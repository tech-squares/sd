\input texinfo @c %**start of header -*-texinfo-*-
@c user documentation for Sd (square dance caller's helper)
@c See the file INSTALL for how to format and view.
@setfilename sd_doc.info
@settitle Sd
@set sd-version 30.74
@set Time-stamp: July 16, 1994
@set full-manual
@c %**end of header
@iftex
@finalout
@end iftex
@c
@c We want the title and copyright stuff in the info file, too,
@c (and most importantly, in the ASCII version created by
@c "makeinfo --no-headers") so it cannot be inside a @titlepage environment.
@headings off
@iftex
@ @c hard Space to make vskip work
@vskip 0pt plus 1fill
@end iftex
@c
@center @titlefont{Sd}
@sp 1
@center A Square Dance Caller's Helper
@sp 10
@center William B. Ackerman and Stephen Gildea
@sp 7
@center @value{Time-stamp:}
@sp 1
@center for Sd version @value{sd-version}
@c
@page    @c end of title page
@iftex
@ @c hard Space to make vskip work
@vskip 0pt plus 1fill
@end iftex

Copyright @copyright{} 1992, 1993, 1994 William B. Ackerman and Stephen Gildea

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission notice
identical to this one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to make and distribute copies of this manual
provided the copyright notice and this permission notice are preserved
on all copies.

The authors disclaim all liability for your use of this software and 
documentation and make no representation as to the suitability of the 
software for any purpose.  THE SOFTWARE IS PROVIDED ``AS IS'' WITHOUT 
WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
NONINFRINGMENT.

@page	@c end of copyright page
@headings double

@node Top, Intro, (dir), (dir)

@menu
This file documents Sd, a square dance caller's helper.

To get started quickly, type @key{1} to go to @dots{}

* Getting Started::             Getting started quickly with Sd

To start reading the manual from the beginning, type @key{n} to go to
the next node.  Or go directly to a topic of interest by picking an item
out of one of the menus here.

This is the summary table of contents:

* Intro::                       Introduction
* Getting Started::             Getting started quickly with Sd
* Invoking Sd::                 Invoking Sd via Command Line
* Macintosh Overview::          Overview of the Macintosh Version
* Calling::                     Calling
* Resolving and Searching::     Resolving and Searching
* Misc Commands::               Miscellaneous Commands
* Terminal Interface::          Terminal Interface
* Linguistic Idiosyncrasies::   Linguistic Idiosyncrasies
* Call Notes::                  Call Notes
* Concept Notes::               Concept Notes
* Bugs::                        Known Bugs and Misfeatures (very incomplete)
* Misc Advice::                 Miscellaneous Advice and Warnings
* Customization::               Customization with X Resources
* Versions::                    Version Numbers
* Installation::                Building and Installing the Program
* Copying::                     The GNU General Public License

This is the complete table of contents:

Introduction

* Contact Info::                How to Contact the Authors
* Acknowledgements::            Acknowledgements

Invoking Sd via Command Line

* Command-Line Options::        Command-Line Options
* Abridgement::                 Abridgement

Macintosh Overview

* Mac Requirements::            Macintosh System Requirements
* Initial Dialog::              The Initial Dialog
* Mac Abridgement::             Abridgement
* Creating Dictionaries::       Creating New Call Dictionaries
* Preferences::                 Saving Preferences
* Sequence Files::              Sequence Files
* Log Files::                   Log Files
* Sequence Window::             The Sequence Window
* Call Window::                 The Call Window
* Keyboard Input::              Keyboard Input

Calling

* Startup Screen::              The Startup Screen
* Heads/Sides Start::             starting with the heads or sides
* 1P2P Lines::                    starting with 1P2P lines
* Just As They Are::              starting with a squared set
* Entering Calls::              Entering Calls
* Call Menus::                    call menus
* Scrolling::                   the call menu scroll bar
* Call Variations::             how to write Call Variations
* Entering Concepts::           Entering Concepts
* Call Modifications::          Call Modifications
* Tag/Scoot::                   Tag/Scoot Call Modifications
* Single/Cross/Left::           The Single, Cross, and Left Modifiers
* Asymmetric Selectors::        How to Write Asymmetric Sequences

Resolving and Searching

* Resolving::                   Resolving
* Normalize::                   Normalizing the Setup
* Pick Random Call::            Letting the program choose a random call
* Reconcile::                   The @code{Reconcile} operation.

Miscellaneous Commands

* Save Sequence::               Saving the Sequence
* Change Output File::          Changing the Output File
* Abort/Exit/Undo::             Abort, Exit, and Undo
* Inserting Comments::          Inserting Comments
* Keeping Pictures::            Keeping Pictures of the Setup
* Hiding Couple Numbers::       Hiding Couple Numbers on the Macintosh

Terminal Interface

* Sdtty::                       The @code{sdtty} program
* Sdtty on the PC::             The PC version
* Sdtty on Unix::               The Unix version

Linguistic Idiosyncrasies

Call Notes

* Sweeping Direction::          Sweeping Direction
* C1 Single Rotate::            C1 Single Rotate
* Spread::                      Spread
* Colliding Recycle::           Colliding Recycle, Ah So, and Cycle and Wheel
* Rotate from Columns::         Rotate from Columns
* Recycle::                     Recycle has two forms in the Database

Concept Notes

* Gruesome::                    Gruesome
* Divided::                     Divided
* Concentric::                  Concentric
* Two Calls::                   Two Calls in Succession
* Assume Waves::                Assume Waves
* Diamond::                     Diamond
* Implied Piecewise::           Implied Piecewise
* Do it Twice::                 Do it Twice
* Precede it or Follow it::     Precede it or Follow it
* So-And-So Only::              So-And-So Only
* Finish::                      Finish
* 12 Matrix and 16 Matrix::     12 Matrix and 16 Matrix

Installation

* Building on Unix::            Building on Unix
* Building on the Mac::         Building on the Mac with Think C
* Building on DOS::             Building on DOS with gcc
* Document Formatting::         How to format the documentation
* Manifest::                    List of files in the distribution

@end menu

@include readme.txinfo

@node Getting Started, Invoking Sd, Intro, Top
@chapter Getting Started

@code{Sd} can be run from a shell (on Unix or DOS) by typing its name
and the level you want to write sequences for, e.g.,

@example
sd c2
@end example

The Macintosh version of @code{sd} is typically run by double clicking
on the application icon, which looks like the square dance symbol (two
overlapping squares).  An information window is displayed at startup;
this window can be dismissed by clicking anywhere on it with the mouse.

Program commands for actions such as automatic
resolves and exiting the program can be found in the menu in the upper
left corner (or in pull-down menus on the Macintosh version).

With some experimentation, you should be able to use the program without
reading this document.  The following chapters cover using @code{Sd} in
detail.

@node Invoking Sd, Macintosh Overview, Getting Started, Top
@chapter Invoking Sd via Command Line

@display
@t{sd} level [ Xt options @dots{} ] [ @t{-abridge} filename ]
@t{sd} level @t{-write_list} filename
@t{sd} level @t{-write_full_list} filename
@end display

Note: This chapter does not apply to the Macintosh version.
@xref{Macintosh Overview}.

The program is normally invoked with a single argument---the level.
This is one of the following: @code{m} (mainstream), @code{p} (plus),
@code{a1}, @code{a2}, @code{c1}, @code{c2}, @code{c3a},
@code{c3}, @code{c3x}, @code{c4a}, or @code{c4}.
The default is @code{m}.
This determines the calls and concepts that will be made
available, according to our best guess of what the levels mean.  Various
optional arguments are permitted to control the window system, 
customize the list of calls used, and set other options.
These will be described later.

The call definitions will be read in from the encoded database file
@file{sd_calls.dat}.  The program will then ponder the database for a few
seconds while it determines what calls to put on what menus.  This
takes about (200/MIPS) seconds at C4, correspondingly less at lower levels.

@menu
* Command-Line Options::        Command-Line Options
* Abridgement::                 Abridgement
@end menu

@node Command-Line Options, Abridgement,  , Invoking Sd
@section Command-Line Options

Options used by both @code{sd} and @code{sdtty}:

@table @code
@item -db @var{filename}
location of the calls database.  The default is @file{sd_calls.dat} in
the current directory.
@item -sequence @var{filename}
base name of the file to write sequences to.  The calling level will be
appended to this name.  The default is @file{sequence}, so a complete
file name might be @file{sequence.C1}.
@end table

There are X resources associated with both options:
@code{Sd.sequenceFile} is equivalent to the @w{@code{-sequence}} switch, and
@code{Sd.databaseFile} is equivalent to @code{-db}.

If you almost always will be passing the the same value for a
command-line switch, you may find it more convenient to set the
corresponding resource.

With the X Window System interface, Sd accepts all Xt command-line
options.  The following are some of the more useful options for use with
Sd.

@table @code
@item -rv
reverse video
@item -bg @i{color}
background color
@item -fg @i{color}
foreground color
@item -bd @i{color}
border color
@item -font @i{font}
font used everywhere
@item -geometry @i{geom-spec}
geometry in pixels
@item -title @i{string}
title for window manager and icon use
@item -name @i{string}
name to look up resources under.  default: program name.
@item -xrm @i{resource-line}
an X resource manager string.
@end table

These options are specific to the terminal-based version, @code{sdtty}.

@table @code
@item -no_cursor
dumb terminal mode: do not use cursor motion commands to keep the screen
up-to-date efficiently
@item -lines @var{nlines}
the number of lines on the screen.  Default is 25.
@item -no_line_delete
do not use the insert line or delete line cursor control commands
@end table


@node Abridgement,  , Command-Line Options, Invoking Sd
@subsection Abridgement

The program recognizes three flags which allow use of an abridged
list of calls:

@table @code
@item -write_list @var{filename}
write out the call list for the indicated level and exit
@item -write_full_list @var{filename}
write out the call list for the indicated level and all lower levels
and then exit the program.
@item -abridge @var{filename}
read in the file, strike all the calls contained therein off the menus,
and proceed.
@end table

The first two are used to prepare a call list.  The call list for the
indicated level, exactly as the calls appear in the menu, will be written
to the named file.  If @code{-write_list} is used, only the calls exactly on
that level will be written.  If @code{-write_full_list} is used, the lower level
calls will be written as well, so the file will look exactly like the
main call menu.  After performing either of these operations, the program
exits.

The third special flag is used to read in a list of calls to be avoided.
Any call listed in the file, in precisely the same format as it was written
out, will be removed from the internal database prior to running the program.
Every sequence written under control of such a file will say @samp{(abridged)}
after its level.

To write sequences for a group that is learning C2, for example, run the
program with
@example
        sd c2 -write_list my_group
@end example

Then delete from the file @file{my_group} those calls that the group has
learned, i.e., those calls not to be avoided.
When writing sequences, use the command
@example
        sd c2 -abridge my_group
@end example

As the group learns new C2 calls, delete the corresponding lines from
the file @file{my_group}.  That file always contains the calls that they don't
yet know.  When the file goes to zero, they know the whole list.

The lines in the abridgement file must always be in exactly the same format
as the strings that are written out by the @code{-write_list} or @code{-write_full_list}
flags.  The program has no tolerance for creative capitalization, stray
blanks, or other variations.  Any line in the file that does not match a
call in the menu is simply ignored.  The order is not important, though it
is possible that leaving it in the original menu order may someday yield
faster program startup.

@node Macintosh Overview, Calling, Invoking Sd, Top
@chapter Overview of the Macintosh Version

The Macintosh version of @code{sd} supports a graphical user interface
that can be driven entirely using the mouse.  The user interface is
generally similar to the X Window System user interface of @code{sd}, although
it has been adapted to follow standard Macintosh user interface
conventions, such as the use of pull down menus.  This section of the
document describes the unique features of the Macintosh user interface.
In the remainder of the document, comments are inserted to explain
specific differences in the Macintosh user interface.

In addition to mouse input, the Macintosh version of @code{sd} supports
keyboard input of calls and most commands (similar to @code{sdtty}).
Keyboard input can be used interchangeably with mouse input.  Keyboard
input is most useful when you know exactly what you want to do (and you
are a good typist).  Menus are useful when you want to select from a
display of available options.

@menu
* Mac Requirements::            Macintosh System Requirements
* Initial Dialog::              The Initial Dialog
* Mac Abridgement::             Abridgement
* Creating Dictionaries::       Creating New Call Dictionaries
* Preferences::                 Saving Preferences
* Sequence Files::              Sequence Files
* Log Files::                   Log Files
* Sequence Window::             The Sequence Window
* Call Window::                 The Call Window
* Keyboard Input::              Keyboard Input
@end menu

@node Mac Requirements, Initial Dialog,  , Macintosh Overview
@section Macintosh System Requirements

The Macintosh version of @code{sd} was designed to run on System 6 or 7;
however, it has not been extensively tested on System 6.  If you have
difficultly running @code{sd}, please contact the authors.

The amount of memory required to run @code{sd} depends upon the calling
level you select.  Under normal use, @code{sd} runs in a 1Mb partition
at level @code{c4}.  If you are running System 7, this means you should
have at least 3Mb of RAM.


@node Initial Dialog, Mac Abridgement, Mac Requirements, Macintosh Overview
@section The Initial Dialog

An information window is displayed at startup;
this window can be dismissed by clicking anywhere on it with the mouse.

The initial dialog is entitled @code{sd options}.  It allows you to
select the calling level from a pull down menu.  The available levels
are: @code{mainstream}, @code{plus}, @code{a1}, @code{a2}, @code{c1},
@code{c2}, @code{c3a}, @code{c3}, @code{c3x}, @code{c4a}, or @code{c4}.
(An additional level @code{all} is provided primarily for use in
debugging call definitions.)  The calling level determines the calls and
concepts that will be made available, according to our best guess of
what the levels mean.

Once you have selected the desired calling level, click the @code{New
Sequence} button to begin a new call sequence.  The program will read a
set of call definitions from a call dictionary and then bring up the
sequence window.  Reading the call dictionary can take a few seconds or
even minutes, depending up the speed of your machine and the calling
level you have selected.


@node Mac Abridgement, Creating Dictionaries, Initial Dialog, Macintosh Overview
@section Abridgement

@code{Sd} allows you to alter the set of calls it knows about by
striking out specific calls.  This feature can be used, for example,
when teaching a class, so that calls that have not yet been taught
will not be used.

To use this feature, you must first prepare a text file containing the
names of the calls to be avoided.  The @code{Sd} menu contains a
@code{Save Call List} command that can be used to create a file
containing the names of all calls defined at the selected level.  The
file selection dialog that appears includes a check box labelled
@code{Include Lower Level Calls} that allows you to select whether to
include calls defined at lower levels or only include those calls
introduced at the current calling level.  Once the text file has been
created, you can edit it with a text editor to contain only the names of
calls you want to avoid.  The @code{Save Call List} command can be used
only while the initial dialog is displayed.

The initial dialog contains a button labelled @code{Abridge}.  This
button brings up a file selection dialog, which you use to select the
file containing the list of calls to avoid.  These calls are removed
from the menus for the duration of this execution of the program.  When
this feature is used, every sequence listing will say @samp{(abridged)}
after its level.

The lines in the abridgement file must always be in exactly the same
format as the strings that are written out by the @code{Save Call List}
command.  The program has no tolerance for creative capitalization,
stray blanks, or other variations.  Any line in the file that does not
match a call in the menu is simply ignored.  Because the names of calls
are sometimes changed in new versions of @code{sd}, you may need to
reconstruct your abridgement file after installing a new version of
@code{sd}.

To write sequences for a group that is learning C2, for example, use the
@code{Save Call List} command, turn off the @code{Include Lower Level
Calls} check box, and write to a file, say @file{my_group}.  Use a text
editor to delete from the file @file{my_group} those C2 calls that the
group has learned, i.e., those calls @i{not} to be avoided.  Then, when
writing sequences, use the @code{Abridge} button and select the file
@file{my_group}.  As the group learns new C2 calls, delete the
corresponding lines from the file @file{my_group}.  That file always
contains the calls that they don't yet know.  When the file goes to
zero, they know the whole list.


@node Creating Dictionaries, Preferences, Mac Abridgement, Macintosh Overview
@section Creating New Call Dictionaries

@code{Sd} obtains its definitions of calls from a file called a call
dictionary.  A standard call dictionary is supplied with @code{sd}.
you can also create your own call dictionary and select among multiple
call dictionaries.

A call dictionary is created by compiling a call definition file.  A
call definition file is a text file containing call definitions in a
particular format.  The format is described in a separate document
@file{db_doc.txt}.  To compile a call dictionary, use the @code{Compile
Call Dictionary} command in the @code{Sd} menu.

To select a call dictionary other than the default one, use the
@code{Select Call Dictionary} command in the @code{Sd} menu.  The
@code{Select Call Dictionary} command can be used only while the initial
dialog is displayed.

The default call dictionary is the file @file{sd_calls.dat} in the
directory containing the @code{sd} application file.


@node Preferences, Sequence Files, Creating Dictionaries, Macintosh Overview
@section Preferences

@code{Sd} allows you to alter certain options that are retained between
executions of the program.  These options are displayed and modified
using a dialog box entitled @code{sd Preferences}.  To bring up this
dialog box, use the @code{Preferences} command in the @code{Sd} menu.
Using the preferences dialog box, you can change the default calling
level displayed in the initial dialog box when you start the program.
You can also choose whether to display formations using graphical
symbols or alphanumeric characters and whether or not to display each
couple using different colors.  Using different colors is visually
attractive, but it slows down the program considerably.


@node Sequence Files, Log Files, Preferences, Macintosh Overview
@section Sequence Files

The Macintosh version of @code{sd} stores the call sequences you create
as individual files.  These files are text files and can be edited with
a text editor or included in a document.  The current sequence can be
saved at any time using the @code{Save} or @code{Save As} commands in
the @code{File} menu.


@node Log Files, Sequence Window, Sequence Files, Macintosh Overview
@section Log Files

In addition to storing call sequences as individual files, the Macintosh
version of @code{sd} allows you to collect multiple sequences in a
single text file, called a log file.  In this way, you can create a
single file containing an entire evening's program, for example.

The commands for writing log files are contained in the @code{Log}
submenu of the @code{File} menu.  Each command writes a copy of the
current sequence to a log file.  The @code{New Log} command writes a
copy of the current sequence to a new log file.  The @code{Append to
File} allows you to select an existing log file; the current sequence is
appended to that file.  The @code{Append} command appends a copy of the
current sequence to the log file you specified previously.  The
name of the current log file is displayed in the title bar of the
sequence window with the prefix @code{log:}.

Although these commands can be used at any time, they are normally used
only when you have completed a sequence.


@node Sequence Window, Call Window, Log Files, Macintosh Overview
@section The Sequence Window

When working on a call sequence, the sequence and the current setup
are displayed in a window called the sequence window.  The title of the
sequence window displays the name of the sequence file, if any.

The top portion of the sequence window displays a transcript of the
current call sequence.  Intermixed with the calls are pictures that show
the setup at that point in the sequence.  Normally, only two pictures
are shown, the current setup and the setup prior to the last call.  (The
@code{Keep Picture} command can be used to retain additional pictures in
the transcript.)  The transcript also includes warning messages, error
message, and input prompts.  The transcript pane supports the @code{Copy}
command for copying text from the pane to the clipboard.

Below the transcript pane is an area used for input.  Depending upon the
current activity, this area either displays a set of buttons or it shows
a text box for entering calls.  The text box supports the normal text
editing operations, including transferring text via the clipboard.

At the bottom of the sequence window is status pane containing three
boxes.  The calling level is displayed in the left box.  The current
setup is displayed in the middle box; this name corresponds to the
current menu of calls displayed by the program.  The right box displays
status information when resolving a square.


@node Call Window, Keyboard Input, Sequence Window, Macintosh Overview
@section The Call Window

Normally, when you are creating a call sequence, a utility window
labelled @code{Matching Calls} is displayed that shows the set of calls
and concepts that are available.  Calls are displayed first, in
alphabetical order.  Concepts are displayed after the calls, in an order
that attempts to group related concepts together and put simple concepts
first.  Finally, the call window displays commands that are equivalent to
the pull down menu commands.

The calls and concepts that are displayed in the call window are
selected based on the current setup.  This selection is approximate but
conservative---appearance of a call or concept on the menu does not
necessarily mean it is legal, though absence from the menu means that
the program is fairly certain that it can't be legal.

To select a call, concept, or command from the call window, double click
on it.

The call window contains a button labelled @code{Validate}.  When you
click this button, the program performs a more careful check to see
which concepts and calls are possible from the current setup and removes
those which are not possible.  This feature is very useful to suggest
ideas for possible calls in a given situation.  The time needed to
determine the valid concepts and calls varies depending upon the setup
and the calling level.  Although normally validation is quite fast, it
is not fast enough to want to do it automatically after every call.


@node Keyboard Input,  , Call Window, Macintosh Overview
@section Keyboard Input

When working on a call sequence, you can enter calls and concepts using
the keyboard.  You can also enter most of the commands that are
available on menus.  Keyboard input is echoed in the text box in the
input pane of the sequence window.  Terminate a call, concept, or
command by typing @key{Return}, @key{Enter}, or clicking on the
@code{Accept} button.

Keyboard input supports automatic completion, meaning that you need type
only as much of each word as will make the word unique.  When you type
@key{Space}, @code{sd} will complete the word for you if it can.  When
you type @key{Return}, @key{Enter}, or @key{Tab}, @code{sd} will
complete the entire phrase.  So, for example, if the setup is waves and
the level is mainstream, you could type just @code{sw th} and
@key{Return} to get a @i{swing thru}.  In fact, just @code{sw} and
@key{Return} is enough.  Typing a question mark (@key{?}) is equivalent
to clicking on the @code{Validate} button.

@node Calling, Resolving and Searching, Macintosh Overview, Top
@chapter Calling

This chapter describes how to use the program in its normal mode to
generate a sequence of calls of your choosing.

@menu
* Startup Screen::              The Startup Screen
* Entering Calls::              Entering Calls
* Entering Concepts::           Entering Concepts
* Call Modifications::          Call Modifications
* Tag/Scoot::                   Tag/Scoot Call Modifications
* Single/Cross/Left::           The Single, Cross, and Left Modifiers
* Asymmetric Selectors::        How to Write Asymmetric Sequences
@end menu

@node Startup Screen, Entering Calls,  , Calling
@section The Startup Screen

The startup menu is displayed when the program starts and after each
sequence has been completed and written to a file.  In addition to the
obvious program exit button, this permits you to select the starting
operation.  The selections here, and almost everywhere else in the
program, are made by moving the mouse until the cursor is over the
chosen item, and pressing Mouse Button 1 (typically the left button).

If you are using the Macintosh version of @code{sd}, the startup screen
displays a set of buttons in the input pane of the sequence window.
These buttons correspond to the startup menu commands described in this
chapter.

@menu
* Heads/Sides Start::           starting with the heads or sides
* 1P2P Lines::                  starting with 1P2P lines
* Just As They Are::            starting with a squared set
@end menu

@node Heads/Sides Start, 1P2P Lines,  , Startup Screen
@subsection Heads/Sides Start

If you click on @code{heads start} or @code{sides start}, the sequence will begin
with @samp{heads} or @samp{sides} and the first call.  Normally this means that the
designated people will move into the center and do the first call while
the others wait.  Subsequent calls will be directed to everyone.  For
example, one might click on @code{heads start}, and then @code{star thru}, and
then @code{double pass thru}, and so on.  You can also click on @code{heads start}
or @code{sides start} followed by a call such as @i{split square thru} or @i{split
dixie style to a wave}.  Use the @code{split} concept to get these.

If you want to have the heads go into the middle and do several calls
before the sides join in, as in @i{head ladies chain ; heads square thru 4},
or @i{heads touch 1/4 ; walk and dodge}, you must click on @code{centers}
before all calls after the initial one.  Whether you actually read the card
that way while calling is up to you.

@node 1P2P Lines, Just As They Are, Heads/Sides Start, Startup Screen
@subsection 1P2P Lines

The @code{heads 1P2P} and @code{sides 1P2P} starting actions refer to caller jargon
for a common starting maneuver, typified by @i{so-and-so lead right and
circle up 4}.  You can read the card that way, or as @i{wheel thru and
circle up 4}, or as @i{step right}, or as @i{bring us together}, or whatever
improvisation you like.  The promenade distance printed at the end of the
sequence will assume that you said @i{step right} or @i{lead right @r{(or @i{wheel
thru})} and circle up 4}.

Whether you consider 1P2P openings to be overused is up to you.

@node Just As They Are,  , 1P2P Lines, Startup Screen
@subsection Just As They Are

The @code{just as they are} button starts the sequence on squared set spots,
without having the heads or sides begin.  This is nearly useless, since
the program doesn't know about the @i{all 4 couples} concept or about
thars or alamo rings.  This shortcoming may be fixed in the future.

In the Macintosh version, this button is labelled @code{Squared Set}.

@node Entering Calls, Entering Concepts, Startup Screen, Calling
@section Entering Calls

The usual thing you do when writing a sequence is to select calls from
the call menu, perhaps preceded by one or more concepts.  (Concepts are
discussed in the next section.)

@menu
* Call Menus::                  call menus
* Scrolling::                   The call menu scroll bar
* Call Variations::             How to write variations on calls
@end menu

@node Call Menus, Scrolling,  , Entering Calls
@subsection Call Menus

The call menu is the long menu near the center of the screen.  There are
actually 17 menus that can appear here, each tailored to the current
setup.  For example, if the current setup is right-hand waves, a menu
will appear that contains only those calls that the program believes
might be legal from right-hand waves.  This determination is approximate
but conservative---appearance on the menu does not necessarily mean it
is legal, though absence from the menu means that the program is fairly
certain that it can't be legal.  There is a @dfn{universal} menu that
appears when the setup is not one of the common ones, or when anything
complex is going on.  This contains every call that is in the database
for the chosen level.

The call menus are alphabetized in a way that ignores blanks and @code{<N>},
@code{<ANYONE>}, @code{<DIRECTION>}, or @code{<ANYTHING>} items.
Hence, @code{<ANYONE> run} will be found
under @code{r}.  Digits are listed first, followed by upper case letters,
followed by lower case letters.

If you are using the Macintosh version of @code{sd}, the call menu
is displayed as a utility window.  Calls are selected by double
clicking.  In addition, calls can be entered by typing their name,
as described in the next paragraph.

If you are using the keyboard-based interface (@code{sdtty}),
type the name of the call followed by @key{Return}.
The program has a @i{completing reader}, which
means that you need type only as much of each word as will make the word
unique.  When you type @key{Space}, @code{sdtty} will complete the word for
you if it can.  When you type @key{Return}, @key{Tab}, or @key{Escape},
@code{sdtty} will
complete the entire call.  So, for example, if the setup is waves and the
level is mainstream, you could type just @code{sw th} and @key{Return} to get a
@i{swing thru}.  In fact, just @code{sw} is enough.
When using @code{sdtty}, typing a question mark (@key{?}) will show all
legal things that you could type at that point.

A number of calls have limitations or quirks that you should be aware of.
@xref{Call Notes}.

@node Scrolling, Call Variations, Call Menus, Entering Calls
@subsection Scrolling

The call menu can be scrolled with the scroll bar to its left.  Move the
mouse into the scroll bar area.  Clicking the left mouse button will scroll
the window down over the menu by a percentage of the window's size that is
equal to the percentage that the cursor is down from the top of the scroll
bar.  Clicking the right mouse button will scroll the window up by the
same amount.  Clicking the middle mouse button will move the window to a
percentage down the menu that is equal to the percentage that the cursor
is down from the top of the scroll bar.  If the mouse is moved while the
middle mouse button is held down, the menu will scroll in real time.

If you are using the Macintosh version of @code{sd}, the call window
can be scrolled using the scroll bar at the right of the window.

@node Call Variations,  , Scrolling, Entering Calls
@subsection Call Variations

Some calls require a numeric designator (e.g., @i{square thru 3}), a people
designator (e.g., @i{boys run}), a direction (e.g., @i{pass in}),
or another call (e.g., @i{clover and star thru}).
Such designators appear in the call menu as @code{<N>}, @code{<ANYONE>},
@code{<DIRECTION>},
or @code{<ANYTHING>}.

When you select one of the first three kinds of calls,
a popup will appear containing numbers, people designators, or directions.
Click on the chosen item.  Not all items will be legal in all cases, such as
@code{leads run} from a grand line.  If you made a mistake, just move the mouse
away from the popup.  (On the Macintosh, click the @code{Cancel} button.)
When using keyboard input (@code{sdtty} or Macintosh),
just type the text normally for numbers, people, or directions.

When you select a call that requires a subordinate call, the program
will prompt you for it.
When using keyboard input (@code{sdtty} or Macintosh),
you must literally type the "<anything>" in the original call.

Some calls or concepts may require more than one argument.  If
this is the case, popups will appear more than once.  Enter the
items in sequence.

Some calls or concepts require a number that is naturally expressed as a
fraction indicating some number of quarters, such as touch 1/4, 1/2, or 3/4.
When a popup appears asking for the number, enter it as a number of quarters.
The program will turn the
fraction into the appropriate form, e.g., 2/4 becomes 1/2.
When using keyboard input (@code{sdtty} or Macintosh), you may type it
as a reduced fraction, as in @samp{circle by 1/2 by 3/4}.


@node Entering Concepts, Call Modifications, Entering Calls, Calling
@section Entering Concepts

A call may be preceded by concepts, which modify the action of the call.
These may be nested (@dfn{stacked}) to any reasonable depth.  In a
perhaps hopeless attempt to keep the concept menus from becoming too
unwieldy, concepts have been organized into a general concept menu and
several submenus organized by topics.  The main concept menu is in the
lower left corner.  It supposedly contains all the extremely common
concepts.  Buttons for the other concepts submenus appear above this
menu.  Clicking on one of these buttons brings up the submenu.  If you
don't see what you want on a concept submenu, move the mouse away.  Some
concepts appear in more than one submenu---it doesn't matter which one
you use.  The submenus are

@table @code
@item phantom concepts
those that involve picking out virtual setups, that may include
phantoms, from a real formation that is larger than eight people.
Examples: @i{split phantom lines}, @i{triple boxes}, @i{triple lines
working forward}.

@item couples/tandem concepts
the obvious thing.

@item distorted concepts
those that involve picking out distorted virtual setups, without
phantoms, by identifying real people out of a formation that is larger
than eight people, or the phantom equivalent of same.  Examples:
@i{parallelogram}, @i{stairstep lines}, @i{bigblock}.

@item 4-person distorted concepts
those that involve picking out 4-person virtual setups, without
phantoms, by identifying real people, or the phantom equivalent of same.
Examples: @i{trapezoid}, @i{once removed}, @i{jay}.

@item miscellaneous concepts
all others.  There are a lot of them.
@end table

When you click on any concept, the universal call menu replaces whatever
special call menu may have been presented, since the set of legal calls
becomes highly unpredictable.

If you are using the Macintosh version of @code{sd}, concepts are
displayed in the call window, following the calls.

When using keyboard input (@code{sdtty} or Macintosh), type the
concept the same way that you would type a call.  The completing reader
works the same way.  Type @key{Return} after the concept and
then enter the call on the next line.  Even though a concept and the call
to which it applies will appear on the same line in the final transcript,
each concept and each call is entered on its own line.

Some concepts require a numeric designator (e.g., @i{interrupt after the 3rd
part}) or a people designator (e.g., @i{girls are stable}).  The handling
is the same as for calls that require these.

Some concepts require two calls (e.g., @i{checkpoint} and @i{interlace}).  After
choosing such a concept, enter the first call, preceded by whatever concepts
apply to it.  The program will then prompt you for the second call.
A complex tree of concepts and calls can thus be constructed.

The program recognizes the level at which concepts are legal, but lets you
override this if you wish.  The @code{toggle concept levels} command toggles
(turns on or off) the state of off-level concept permission.  In the menu-based
program, click on the @code{toggle concept levels} button.
In the text-based program, type the command @code{toggle concept levels}.
In the Macintosh program, use the @code{Allow Any Concept} command in the
@code{Sequence} menu to enable or disable off-level concepts.
When off-level concepts are enabled,
their use will cause a warning to be inserted into the transcript.


@node Call Modifications, Tag/Scoot, Entering Concepts, Calling
@section Call Modifications

Some calls can be modified in a natural way, such as @samp{in roll motivate}
and @samp{vertical tag your neighbor}, or in unnatural ways, such as @samp{trade
the diamond but replace the diamond circulate with explode the diamond}.
To form such a call, you must first enable call modifications
by clicking on @code{allow modifications} before choosing the
call.

There are two levels of this feature.  If you click on @code{allow
modifications} just once, you get the simple version, which only prompts
you for @dfn{natural} modifications.  Natural modifications have been somewhat
arbitrarily defined as those for which there is an accepted way of fitting
the words in without using the phrase ``but replace the <whatever> with
<whatever>.''  If you click on @code{allow modifications} a second time, you allow
a potentially large number of modification possibilities, sometimes several
in the same call.

If you are using the Macintosh version, call modification is enabled
using the @code{Modify Next Call} submenu of the @code{Sequence} menu.
Three commands are provided, which either disable call modification,
enable simple modifications, or enable all modifications.

When either level of modifications is selected, the line at the top of
the text transcript area indicates this.  Also, the universal call menu
is chosen whenever modifications are enabled, since the possibilities are
unpredictable.

When you click on a call for which modifications are possible, a popup
will appear saying something like @code{The box circulate can be
replaced.  Do you want to replace it?}  If you want to replace the
designated call, click in the active area of the popup; otherwise, move
the mouse away.  (On the Macintosh, click either the @code{Replace} or
the @code{Don't Replace} button.)  If you indicate that you want to
replace the call, you will then be prompted for the replacement call.
Enter it, along with any concepts.  In some cases you may be asked
repeatedly about various modifications.  For example, in @i{motivate},
you can replace the initial @i{circulate}, and you can turn the star a
different amount.  You may select any or all of these modifications.

Note:  When complex modifications are involved, the program may ask for them
in an order that seems unnatural.  This is because it asks in the order that
it executes the call internally, which may not be the same as the order in which
the words are spoken.  Do not be alarmed.  Observe the popup titles and
prompts carefully.  The final result should come out in the correct order.

For both these optional modifications and the mandatory subcalls discussed
earlier (e.g., @code{clover and <anything>}), the program attempts to show
unambiguously how everything is structured, by putting subcalls and their
accompanying concepts in square brackets.  It also attempts to put
natural modifications in their natural place in the phrase.  In complex
cases, like @samp{[CHECKPOINT LEFT catch [SINGLE CONCENTRIC snake] 3 BY
[2/3 recycle] the difference] cover up} things may be quite difficult.
How (and whether) you choose to read such a card is up to you.


@node Tag/Scoot, Single/Cross/Left, Call Modifications, Calling
@section Tag/Scoot Call Modifications

To use tagging call modifications, like @samp{tag the star your leader},
enable modifications, click on @code{tag your leader} (the generic form of all tagging calls is
@samp{tag @dots{}}) followed by the @samp{1/2} version of the replacement tagging call,
e.g., @code{1/2 tag the star} or @code{loop and 1/2 tag}.  The program will
remove the superfluous @samp{1/2}.  You may also choose the @code{revert}
or @code{reflect} calls here.

To get something like @samp{flip chain thru and scatter reaction}, enable
modifications and select @code{tag chain thru and scatter reaction} or
whatever.  Then change the @code{1/2 tag}.

@code{1/2 invert} and @code{track 2} are acceptable tagging replacements.


@node Single/Cross/Left, Asymmetric Selectors, Tag/Scoot, Calling
@section The @i{Single,} @i{Cross,} and @i{Left} Modifiers

There are a number of calls that contain these words in a nonstraightforward
way.  In these cases, click on the concept before clicking on the call,
even though the word order seems wrong.  The program will repair the
word order.

Examples:

@table @i
@item Chase left @r{or} left roll the
Click on @code{LEFT} and then @code{chase right} or @code{right roll
the}.

@item Scoot and cross ramble, trans cross reactivate, @r{etc.}
Click on @code{CROSS} and then the call.  The program will move the
word @samp{cross} into the correct place in the transcript.
For example, click on @code{CROSS} and then @code{scoot and ramble}
to get @i{scoot and cross ramble}.  Click on @code{CROSS} and then
@code{transactivate} to get @i{trans cross reactivate}.  Click on
@code{MAGIC}, @code{CROSS} and then @code{trans nuclear reaction} to get
@i{magic trans cross nuclear reaction}.
@end table

Not all calls that have the word @samp{cross} or @samp{single} in them are invoked
by clicking on the concept.  For example, @samp{cross your neighbor}
is simply in the database under its full name.


@node Asymmetric Selectors,  , Single/Cross/Left, Calling
@section Asymmetric Selectors

The people selector popup contains various asymmetric selectors such as
@code{near line} and @code{far box}.  You can use these selectors with
the @code{so-and-so do your part} concept to call @i{near column
pass thru}, etc.  The resultant setup must be reasonable---shape-changers
on one side of the set may lead to problems.
Most calls have not been checked for
robustness in the presence of asymmetrical setups.  Use this with care!
The resolver checks all eight people, so it should work.
If you have not restored symmetry, resolves may be extraordinarily difficult
to find.


@node Resolving and Searching, Misc Commands, Calling, Top
@chapter Resolving and Searching

This chapter describes how to have the program find calls for you to
accomplish various goals.

@menu
* Resolving::                   Resolving
* Normalize::                   Normalizing the Setup
* Pick Random Call::            Letting the program choose a random call
* Reconcile::                   The @code{Reconcile} operation.
@end menu

@node Resolving, Normalize,  , Resolving and Searching
@section Resolving

Whenever the setup is in a resolved state, whether intentionally or
accidentally, the program indicates that fact at the bottom of the
transcript area.
The program looks for @i{right and left grand} or
@i{left allemande}
from 8-chain,
trade by, double pass thru, waves, crossed waves, 1/4 tag, and 3/4 tag.
If the sequence needs an
@i{extend}, @i{slip the clutch}, @i{circulate}, @i{pass thru}, @i{trade by},
@i{cross by}, or @i{dixie grand}
first, the program reports that too.
The program will also find
@i{promenade}, @i{reverse promenade},
@i{single file promenade}, @i{reverse single file promenade},
and @i{circle right (or left)}
resolves.

Whenever the @samp{resolve} message appears, you can end the sequence and
write it to a file by clicking on @code{end this sequence}.
If you are using the Macintosh version, you can save the sequence to
a file at any time, whether or not it is resolved, using the @code{Save}
or @code{Save As} commands.

There are
at least three ways to resolve a sequence: you can wander into a resolve
by accident, you can @dfn{sight resolve} the square, entering the calls
that you want, or you can use the @code{resolve} command.  This command
adds the necessary calls to the sequence, exactly as if you had entered
them.

When you click on @code{resolve}, the program goes into a special mode in
which it searches for resolves, saves them, and lets you look through
them and pick one that you like.
A resolve is a sequence of up to three calls
that leads to a resolved state.  While the program is in resolve mode,
the call menu is replaced by a special menu of options, along with
information about the current resolve.  That information tells how
many resolves are currently stored and which one is currently shown.
When you click on @code{resolve}, the program finds the first resolve and
displays it, showing information @samp{1 out of 1}, which means that it
has one resolve stored, and resolve number one is currently displayed.
The transcript area shows the effect of that resolve.

You can click on @code{find another} to search for another resolve and add
it to its stored list.  When the list has more than one resolve in it,
clicking on @code{go to previous} and @code{go to next} will move around in its
list of previously found resolves and show whichever one you want.
In this way, you can search
for a better resolve than the one you already have, but go back to
the earlier one if no better one is forthcoming.

Clicking on @code{accept} will leave resolve mode, causing the current
resolve to be added to the sequence exactly as though you had
entered those calls manually.  You can then @code{undo} individual calls if
you wish.

Clicking on @code{abort the search} (@code{Cancel} in the Macintosh
version) will throw away all of the saved resolves and leave resolve
mode, but will not destroy the sequence.  The sequence will be left just
as it was before @code{resolve} was selected.

Clicking on anything else, such as @code{exit}, @code{end this sequence}, or a
concept, is equivalent to @code{accept} followed by whatever that action
is.  So, for example, you can click on @code{end this sequence} as soon as
you see a resolve that you like.

If one or more concepts are pending when you select @code{resolve}, the
program will search only for resolves whose first call starts with those
concepts.  So, for example, clicking on @code{once removed} and then
@code{resolve} might get you this resolve:

@example
   ONCE REMOVED reverse the pass
   linear flow
   right and left grand  (7/8 promenade)
@end example

The program searches for resolves by using a random number generator to
generate up to 5000 random sequences, occasionally inserting concepts.
It biases the search in favor of short sequences (one call) rather than
long ones (three calls) and in favor of resolves that do not contain @i{all 8
circulate}.  If, after 5000 attempts, no resolve is found, the @code{find another}
operation fails.  (This tends to happen if you try to resolve out of an
hourglass at Mainstream.)  You can click on @code{find another} again to make
another attempt if you wish.

@node Normalize, Pick Random Call, Resolving, Resolving and Searching
@section Normalizing the setup

Clicking on @code{normalize} invokes an operation very similar to the resolver,
except that it searches for sequences of up to three calls that normalize
various matrices, such as 4x4, into a nice 8-person setup.  It uses a variety
of phantom-like concepts to do its work.

Be aware that the phantom-like concepts that this command uses are not
the only ways to get out of large matrix setups.
There are a number of calls,
like @i{press},
@i{truck}, @i{loop}, @i{squeeze}, @i{Z axle}, and @i{finish a long trip}
that are also useful.
The @code{normalize} operation does not search for such things.  It is only
intended to search for things that might not be obvious.

If you have selected @code{toggle concept levels},
the @code{normalize} command may
make use of concepts that are not legal at the chosen level.  This is sometimes
useful in emergencies.

@node Pick Random Call, Reconcile, Normalize, Resolving and Searching
@section Letting the program choose a random call

Clicking on @code{pick random call} invokes an operation very similar to the resolver,
except that it searches for any legal single call.  While this may sound like
a fairly pointless operation, remember that you can use this while one or
more concepts are already entered, in which case it will search for legal calls
that involve those concepts.  Hence, this operation is useful for finding
clever uses of difficult concepts such as @i{checkpoint},
@i{interlace}, or @i{on your own}.

@node Reconcile,  , Pick Random Call, Resolving and Searching
@section The @code{Reconcile} operation

Clicking on @code{reconcile} invokes an operation like resolving, but it
puts the generated calls someplace other than at the end of the
sequence.  This is useful if you have a clever getout at the end of the
sequence, and you want it to be the resolve, but people don't have their
partners and corners.  This lets you retroactively modify the sequence
so that the clever getout will work.

Note first that this operation may only be invoked when the setup is
left-handed two-faced lines, right-handed waves, or left-handed waves,
in which case it assumes you want a @i{promenade}, @i{right and left grand}, or
@i{left allemande} respectively.  The program must know which getout type you
want.  If the setup is an 8-chain, it can't tell.  In that case, either
do a @code{touch} or a @code{left touch}, to give the program a clue.  Then, after the
reconcile operation is complete, you can erase that extra call.

The reconcile operation is very similar in behavior to resolve, except
that the program needs to know the insertion point.  Rather than
searching for the first resolve as soon as you enter the mode, the
reconcile operation lets you set the insertion point before searching.
Click on @code{raise insertion point} or @code{lower insertion point} to
set it.  A dotted line will be displayed showing where in the sequence
the generated calls will be placed.  When this is in the right place,
click on @code{find another} to find the first reconcile.  You can
change the insertion point at any time.

If you are using the Macintosh version, you change the insertion point
using a utility window labelled @code{reconcile point} that appears
after you perform the @code{Resolve} command.  Simply drag the dotted
line to the place in the sequence where you want the generated calls to
be inserted.

Reconciles are extremely difficult to find---much harder than resolves.
To avoid frustration, make the insertion point be at a place where the
setup is very simple and a large number of calls are legal.  We recommend
making the insertion point be at a place where the setup is in waves.
Remember that, if the insertion point is at an hourglass, the program
has to find a random sequence of up to three calls that goes from an hourglass
to another hourglass while miraculously performing the required
permutation.

Avoid using reconcile when a gender-dependent or head/side-dependent
call lies between the insertion point and the end of the sequence.  The
program checks every reconcile by re-executing all calls from the
insertion point to the end and verifying that everything is exactly as
it was except for the permutation of the people.  For example, if the
call @samp{heads kickoff} occurs after the insertion point, and a
potential reconcile changes heads and sides, it will not be offered.
For gender-dependent calls the situation is a little better: if, at the
end of the sequence, the boys are in the center and the girls on the end
before doing the reconcile, you know that any inserted sequence will
have to be gender-preserving anyway, so calls like @samp{star thru} and
@samp{boys kickoff} will be okay.

@node Misc Commands, Terminal Interface, Resolving and Searching, Top
@chapter Miscellaneous Commands

This section describes commands that are not concerned with generating
sequences.

@menu
* Save Sequence::               Saving the Sequence
* Change Output File::          Changing the Output File
* Abort/Exit/Undo::             Abort, Exit, and Undo
* Inserting Comments::          Inserting Comments
* Keeping Pictures::            Keeping Pictures of the Setup
* Hiding Couple Numbers::       Hiding Couple Numbers on the Macintosh
@end menu

@node Save Sequence, Change Output File,  , Misc Commands
@section Saving the Sequence

At any time when the sequence is resolved (for example, after a successful
use of the @code{resolve} operation), you can click on @code{end this sequence}.
This will append the current sequence to the current output file, and then
go back to the startup screen.  You will be given an opportunity to enter
a line of text to be used as a subtitle, for example ``very hard interlace''
or ``stupid biggie.''  The written sequence will also be annotated with the
level, the current date and time, and the versions of the program and
database.

Until you have done the @code{end this sequence} operation, the sequence is not
written to disk and you cannot start writing a new sequence.  Just
resolving isn't enough.

If you are using the Macintosh version, files are handled differently.
@xref{Sequence Files}. To specify a label to be used as a subtitle,
use the @code{Label} command in the @code{Sequence} menu.

@node Change Output File, Abort/Exit/Undo, Save Sequence, Misc Commands
@section Changing the Output File

You can change the name of the file to which the program writes its
output by clicking on the @code{Change output file} button.  A popup
will appear, prompting you for a new file name.  This action will become
effective the next time a sequence is written out.  Sequences previously
written will stay under their old name.

If you are using the Macintosh version, files are handled differently.
@xref{Sequence Files}.

@node Abort/Exit/Undo, Inserting Comments, Change Output File, Misc Commands
@section @code{Abort}, @code{Exit}, and @code{Undo}

If you click on the @code{exit} button, the program will exit.  If a
sequence is in progress, the program will ask for confirmation first.
Using your window manager to send a @code{Delete Window} message to the
program is equivalent to clicking on the @code{exit} button.  The
@code{exit} button appears on the startup screen as well as the normal
screen.

If you click on the @code{abort} button, the program will abort the sequence
but not exit.  It will go back to the startup screen to allow you to
start another sequence.  It will ask for confirmation first.

If you are using the Macintosh version, you end a sequence and start a
new one using the @code{End This Sequence} command in the
@code{Sequence} menu.

If you click on the @code{undo} button while no call is partially entered,
that is, while no concepts have been entered, the program will erase
the last complete call, with all of its concepts.  If one or more
concepts have been entered, only the last concept will be erased.

@node Inserting Comments, Keeping Pictures, Abort/Exit/Undo, Misc Commands
@section Inserting Comments

You can insert arbitrary text strings into the sequence transcript in the
form of @i{comments}.  This is useful for things that you may want to say
to help the dancers, such as ``side boys be careful---go to your left.''
Also, if you want to call something that the program can't do, so you have
to trick the program into doing it by means of several other calls, it is useful
to enter a comment saying what you originally wanted.  This can guide you
when editing the transcript file.

To enter a comment, click on @code{insert a comment}.  A popup will appear into
which you may enter the text.  The comment will be enclosed in curly braces
in the transcript.

A comment may be entered in front of any concept or call, and goes into
the transcript exactly where it was entered.  Because of the way the program
assembles mouse-clicks into transcript lines, it is not possible to enter
a comment at the end of a line.

@node Keeping Pictures, Hiding Couple Numbers, Inserting Comments, Misc Commands
@section Keeping Pictures

The program shows pictures on the screen for the current position
and the position just before the last call.  Normally, those pictures
will not appear in the sequence written to a file.  If you want the
current position to have its picture written in a file (say, because the
sequence is very difficult and you believe it may be necessary to say
something helpful then like ``check a parallelogram with boys in the center
box'') click on @code{keep picture}.

If you are using the Macintosh version, the picture stored in a sequence
file or log file uses alphanumeric characters, even if the sequence
window displays graphical symbols.  Similarly, if you copy text from the
sequence window, the copied text will use alphanumeric characters for
pictures.  However, if you have an appropriate symbol font, you can
recreate the pictures using graphical symbols by using the @code{Copy
Special Font} command in the @code{Edit} menu.  This command is like the
@code{Copy} command except that pictures are represented using encoded
text, where each graphical symbol is represented by a single ASCII
character.

@node Hiding Couple Numbers, , Keeping Pictures, Misc Commands
@section Hiding Couple Numbers

If you are using the Macintosh version and displaying formations using
graphical symbols, you can select whether or not to display couple
numbers using the @code{Hide Couple Numbers} or @code{Reveal Couple
Numbers} commands in the @code{Sequence} menu.

@node Terminal Interface, Linguistic Idiosyncrasies, Misc Commands, Top
@chapter Terminal Interface

@menu
* Sdtty::                       The @code{sdtty} program
* Sdtty on the PC::             The PC version
* Sdtty on Unix::               The Unix version
@end menu

@node Sdtty, Sdtty on the PC,  , Terminal Interface
@section Sdtty

A variation of the program, called @code{sdtty}, provides
a terminal-oriented interface useful when you don't have access to a
window system.  In this version, you type the commands, calls, and
concepts to a completing reader.

At present, @code{sdtty} is the only version of the program available for
PC-compatible computers.  We hope to have the window-based version
available for Microsoft-Windows soon.

Where the window-based interface prompts in a separate popup for people,
number, or direction designators,
you type the designator as part of the call name.
For example, to call @code{<ANYONE> run} and select @code{centers}, just
type @code{centers run}.
Where in the window interface you would select @w{@code{square thru <n>}}
and then select @code{4} in response to the ``How many?'' prompt, with
@code{sdtty} you type @w{@code{square thru 4}} as one command.

When typing, press @key{Space} to complete the current word.
Type @key{TAB} or @key{ESC} to complete as much as possible.
Type @kbd{C-u} (that is, Control U) to clear a partially-typed line.

Press @kbd{?} to see the possible completions.
If there are many possibilities, @code{sdtty} will display a page and
offer a @samp{More} prompt.  Type @key{Space} to see the next
page, @key{RET} to see the next line, and @key{DEL} to stop.

@code{sdtty} has a special command @code{refresh display}
that has no counterpart in
the window-based version.  It causes a complete clean transcript
of the current sequence to be printed.  This can be used if the display got
messed up due to such things as unreliable terminal or modem behavior.

@code{sdtty} tries to keep the screen up-to-date efficiently,
maintaining a clean transcript of the current sequence on the screen
at all times, by using whatever Operating System facilities it thinks are
appropriate.  If, for any reason, this doesn't work properly for you,
you can give the @code{-no_cursor} switch at program startup to disable
that.  This will cause @code{sdtty} to treat the computer's display as
if it were a dumb typewriter.  When started in this way, the part of
the transcript that has changed with each command is simply redisplayed.
This will inevitably lead to a choppy appearance on the screen or
printing device.  The @code{refresh display} command cleans that up.

@node Sdtty on the PC, Sdtty on Unix, Sdtty, Terminal Interface
@section Sdtty on the PC

Our DOS compiler, DJGPP, says it supports 80386, 80387, 80486, XMS,
himem.sys, VCPI, DPMI, QEMM, 386MAX, and DesqView.
We have also heard it works with Microsoft's EMM386 and Qualitas's
@w{386 MAX}.
(You need EMS; for EMM386, this means that you can't use the
@code{NOEMS} option.  This may require that you remove the @code{NOEMS}
option from the @code{CONFIG.SYS} file.)
The authors have not tested Sd with all of these.

To run under DOS, you need a 386 or higher processor and 2Mb of memory.
A hard disk is recommended.  There
should be at least 175 kilobytes of memory free in the first 640Kb.
The authors have not actually tried it on a system this small, and we
would be interested in your experiences.

To deal with different types of display hardware with various screen sizes,
the @code{-lines @var{n}} switch can be given at program startup, as in
@code{sdtty -lines 36 a2}.  The default size is 25.

@node Sdtty on Unix,  , Sdtty on the PC, Terminal Interface
@section Sdtty on Unix

The Unix version normally uses the @i{curses} display access mechanism.  It
should make effective use of the screen-editing features of the terminal
(VT-100 or emulation of same, or whatever) to keep the screen updated.
However, this requires that all of the system facilities for dealing with
terminals (@code{TERM} environment variable, @code{terminfo} database,
@code{stty} behavior, etc.) be working properly.
If, for any reason, this doesn't
work for you, you can turn the @i{curses} mechanism off completely by using the
@code{-no_cursor} command-line switch at program startup.  This should even
make it possible to use the program from a printing device.

When using @i{curses}, it normally tries to use the insert/delete line
capabilities of your terminal device to update the screen more efficiently.
For certain terminal or modem configurations, this may be
counterproductive.  If so, you can turn this feature off
by giving the command-line switch
@code{-no_line_delete} at program startup.

@node Linguistic Idiosyncrasies, Call Notes, Terminal Interface, Top
@chapter Linguistic Idiosyncrasies

In a number of cases, the program behaves in a way that could be considered
idiosyncratic, peculiar, or simply wrong.  Some of these cases are admittedly bugs
or shortcomings of the program.  Others are inevitable consequences of what the
program is trying to do.

The syntax, semantics, and general structure of the square dance calling
``language'' is fairly regular and precise---much more so than, for
example, the English language.  That is, the correspondence between dancer
actions and verbal phrases is fairly regular.  However, there are exceptions.
A very simple example of this is the fact that callers generally say @samp{quarter
top} and @samp{half the top}, using the word ``the'' in one case but not the other.

The program handles these exceptions by calling in an occasionally stilted but
unambiguous ``computer-ese'' dialect.  This dialect is intended to be
very close to the words you would use when calling, but it is sometimes different.
The rationale for this is that it is too hard to make the program always use
the words that a caller would use.  When writing sequences, be aware that the
dancers do not necessarily know this ``computer-ese'' dialect.  Use the words
that you think are correct and natural.  Your judgement is much better than any
program's judgement can ever be.

The program sometimes requires you to say various ``helper'' words, such as @code{left}
in cases where their necessity is is not universally agreed upon.  For example,
from a left-handed quarter-tag, @code{scoot and plenty} is not considered legal---you
are required to enter @code{left scoot and plenty}, even though the Callerlab
definition does not require the word @code{left} in this case.  What helper
words you use or don't use when calling is, of course, up to you.

There are some innocent-looking things that the program can generate for which
appropriate words do not exist.  You must not write sequences containing such
things, because you won't be able to call them.  For example, from boy-boy-girl-girl
waves, it is perfectly straightforward for a caller to say @samp{boys hinge}.
(However, the program requires that you enter this as @samp{boys only hinge}.)
From boy-girl-boy-girl waves, @samp{boys hinge} is meaningless, but the program accepts
@samp{boys do your part, hinge}.  It doesn't know that this is an unacceptable
thing to call.  Don't do it.

In general, if you don't think you can clearly express to the dancers
what you want, don't call it.

A number of concepts are particularly vulnerable to this phenomenon.
See @ref{Do it Twice}, @ref{Precede it or Follow it}, and @ref{So-And-So Only}.

Callers often indulge in a form of poetic license, using phrases such as
@samp{like a ...} or @samp{finish like a ...}.  For example, at C2 one could
say @samp{cast off 3/4 like a shazam}.  Since @i{shazam} means cast off (arm
turn) 1/4 and then U-turn back, this is readily understood by the dancers
to mean arm turn 3/4 and then U-turn back.

It does not follow that @samp{like a shazam} means to U-turn back at the
end of the call.  Calling @samp{pass and roll like a shazam} would cause
a great deal of consternation.  @samp{<anything> like a shazam} is only
reasonable when the <anything> is logically very similar to an arm turn 1/4.
It would be very difficult for a computer program to understand how to
characterize the calls that are reasonable, and Sd does not attempt
to do so.

Because of this potential for misuse, Sd does not support very many things
of the form @samp{like a ...} or @samp{finish like a ...}.  In many cases, you
can use explicit substitution to get this effect.  For example, by clicking on
@code{allow modifications}, you can enter @code{shazam BUT REPLACE
arm turn 1/4 WITH [cast off 3/4]} which you can then read as @samp{cast off
3/4 like a shazam}.  If you wish to enter such a thing, or enter @code{cast off 3/4}
and @code{U-turn back}, and then edit the transcript file with a text editor,
or just extemporize while calling, by all means do so.

The program @i{does} recognize the @samp{finish} concept.  It has potential
for abuse.  See @ref{Finish}.

@node Call Notes, Concept Notes, Linguistic Idiosyncrasies, Top
@chapter Call Notes

@menu
* Sweeping Direction::          Sweeping Direction
* C1 Single Rotate::            C1 Single Rotate
* Spread::                      Spread
* Colliding Recycle::           Colliding Recycle, Ah So, and Cycle and Wheel
* Rotate from Columns::         Rotate from Columns
* Recycle::                     Recycle has two forms in the Database
@end menu

@node Sweeping Direction, C1 Single Rotate, , Call Notes
@section Sweeping Direction

@samp{Sweep 1/4}, @samp{with the flow}, and @samp{by golly}
all assume a sweeping direction.
The program does not currently remember sweeping direction from the
preceding call.  Hence, it assumes clockwise.  Click on @code{REVERSE} if you want
it the other way.  Of course, you must not say the word @i{reverse} when calling it.

@node C1 Single Rotate, Spread, Sweeping Direction, Call Notes
@section C1 @i{Single Rotate}

@samp{Single rotate while the others} is intended to be called to the
heads or sides from a squared set.  It performs the common C1 usage of
this call.  It is nonsensical in other contexts.

@node Spread, Colliding Recycle, C1 Single Rotate, Call Notes
@section Spread

The term @dfn{spread} can mean different things and so is two calls in
this program.
Use the call @samp{spread} after @i{follow your neighbor}.
Use the call @samp{@dots{} and spread} after @i{wheel and deal},
or after starting a sequence with something like @samp{heads star thru}.
You can also use the call @samp{wheel and spread}.

@node Colliding Recycle, Rotate from Columns, Spread, Call Notes
@section Colliding @i{Recycle}

``Colliding'' @i{recycle}, @i{ah so}, and @i{cycle and wheel} are not implemented.
Do not call these if the ends of the line are facing the same way.
@samp{Wheel and deal} from a one-faced line is okay.

@node Rotate from Columns, Recycle, Colliding Recycle, Call Notes
@section Rotate from Columns

Remember that @i{rotate} and @i{single rotate} from columns is legal only
at C3, but from lines it is legal at C2.  Since the program has no
knowledge of different starting setups implying different levels, the call
is in the database at C2.  Don't use it from columns at that level.

@node Recycle,  , Rotate from Columns, Call Notes
@section Recycle

There are two @i{Recycle} calls in the database: @samp{recycle} can be done
from waves, facing couples, right-handed boxes, or a couple facing a
right-handed mini-wave.  It can take the @samp{cross}, @samp{single}, or
@samp{diamond} modifiers.  It is the call that dancers will do when told
to @i{recycle}, and is the call that is used in @i{cover up} and
@i{counterpoint}.

Unfortunately, there is no mechanism for the program to recognize a call
as being fractionalizable in some setups but not others, and the
facing-couples version of recycle is not fractionalizable.
To permit fractional use of recycle, as with
@samp{interlace} or @samp{random}, we have provided a call
@samp{recycle (by parts)}, which can be done only from lines.  Use this call
(but don't read the ``by parts'' phrase) when fractions are required.


@node Concept Notes, Bugs, Call Notes, Top
@chapter Concept Notes

@menu
* Gruesome::                    Gruesome
* Divided::                     Divided
* Concentric::                  Concentric
* Two Calls::                   Two Calls in Succession
* Assume Waves::                Assume Waves
* Diamond::                     Diamond
* Implied Piecewise::           Implied Piecewise
* Do it Twice::                 Do it Twice
* Precede it or Follow it::     Precede it or Follow it
* So-And-So Only::              So-And-So Only
* Finish::                      Finish
* 12 Matrix and 16 Matrix::     12 Matrix and 16 Matrix
@end menu

@node Gruesome, Divided,  , Concept Notes
@section Gruesome

In this program, @dfn{gruesome} simply means
@i{phantom couples or tandem} with the phantoms added to make a 2x8 rather than
the 4x4 that would normally be created, and with the added requirement that
the pairing be parallel to the long axis.  @dfn{Gruesome twosome} is just an
abbreviation for @i{gruesome as couples twosome}.
This extension is not
widely accepted at present.  Be prepared to explain what you mean.

@node Divided, Concentric, Gruesome, Concept Notes
@section Divided

The concepts @samp{divided lines} and @samp{divided columns}, done from a 2x8,
and @samp{12 matrix divided lines} and @samp{12 matrix divided columns}, done from
a 2x6, mean that the setup is to be separated into 2x4's or 2x3's, respectively.
The former two are equivalent to @i{split phantom twin
boxes}, except that they demand that people be facing in the indicated way.
For all of these concepts, if people are T-boned, you can use @code{standard}
to permit the concept to be used.  In all
cases outboard phantoms are added as required at the start of the call,
and removed where possible at the conclusion of the call.

@node Concentric, Two Calls, Divided, Concept Notes
@section Concentric

The @samp{concentric} and @samp{cross concentric} concepts are formulated
as follows:
The rule tells how the people who finish on the outside should
elongate their 2x2 if they finish in a 2x2.  This is the only
case that needs to be addressed.

@enumerate
@item
If the people who finished on the outside in a 2x2 started
in a 2x2, they use the ``lines-to-lines/columns-to-columns'' rule,
relative to what setup @i{they} thought they were in.

If the concept was @i{concentric}, so these people started on
the outside in an elongated 2x2, they can make a decision about
whether they had line or column elongation.  They do not have
to be in a 2x4 for this.  For example, from a dogbone created by
Heads touch, the sides think they are in columns.  But from ordinary
diamonds or an hourglass, they think they are in lines.

If the concept was @i{cross concentric}, so these people started in the
center in a 2x2, they must have the assistance of the original ends.
The original setup must have been a 2x4, except for weird pinwheel-like
setups noted below.  Hence it is @i{illegal} to call @i{cross concentric
@w{square thru 2}} from a rigger in which the center box is facing couples
and the wings have right hands and are expected to rear back.  The
centers do not know whether they were in lines or columns because the
ends are not in an acceptable setup.  The centers do @i{not} use the
``checkpoint elongate perpendicular to the 1x4 rule''---that rule does not
apply here.  If the outsides are in a pinwheel, that is, occupying a 4x4
matrix in an irregular way, each center
makes the line vs.@: columns decision based on the end person in their own
quadrant.  That is, the center person's own facing direction and that
end person's @i{location,} but not that end person's facing direction.

@item
If the people who finished on the outside in a 2x2 started
in a 1x4 or diamond, they use the @dfn{checkpoint rule}---they elongate
their resulting 2x2 perpendicular to the long axis of @i{their own}
1x4 or diamond, not the long axis of the set.

If the concept was @i{concentric}, so these people started on
the outside in a 1x4 or diamond, their own long axis is presumably
the same as the long axis of the whole set.

If the concept was @i{cross concentric}, so these people started in
the center in a 1x4 or diamond, their own long axis might not be the
long axis of the set.  If we do @i{cross concentric @w{square thru 2}}
from a center wave perpendicular to outside miniwaves, so everyone
rears back, the original centers
finish perpendicular to their own 1x4, not the original ends' 1x4.
They finish in approximately the places where the ends began.
If we do it from a 1/4 tag, the centers finish where the ends began.
@end enumerate

@node Two Calls, Assume Waves, Concentric, Concept Notes
@section Two Calls in Succession

The @code{do two calls in succession} concept allows a pair of calls to
be executed atomically under a concept.  This makes it possible to do
a @samp{concentric (recycle ; roll)} and have the lines-to-lines
rule embrace the roll.  The script will appear as above.  The proper way
to say the concept when calling is problematical.  Something like @samp{consider
the following two calls to be one unit, and do a stable swing thru and turn thru}
might be appropriate.

@node Assume Waves, Diamond, Two Calls, Concept Notes
@section Assume Waves

There are several concepts that tell the dancers how phantoms are facing.
They are
@example
   @code{assume waves}
   @code{assume miniwaves}
   @code{assume two-faced lines}
   @code{assume one-faced lines}
   @code{assume inverted lines}
   @code{assume inverted boxes}
   @code{assume normal columns}
   @code{assume magic columns}
   @code{assume eight chain}
   @code{assume trade by}
   @code{assume dpt}
   @code{assume cdpt}
   @code{assume facing lines}
   @code{assume back-to-back lines}
@end example

When these are used without "active phantoms" (see below), the information
that they convey tells the dancers how to begin certain calls such as
@samp{hinge}, @samp{vertical tag}, and @samp{in roll circulate}.
The information is thrown away after the call begins.  That is, the program
does not hold the dancers responsible for tracking phantoms through a call.
It only tells them how to begin.

Use these concepts with care.  Many dancers don't like to be held responsible
for the facing direction of phantoms.

The concept @code{assume normal casts} may be used in cases in which you
do not require the dancers to track phantoms through the call, but you
want to resolve any ambiguity about the @samp{cast off 3/4} operations
that happen at the end of such calls as @samp{chain reaction} and
@samp{motivate}.  You might read such an operation as @samp{12 matrix
motivate, assume the final cast off is normal}.

The concept @code{with active phantoms}, used after one of the "assume"
concepts, effectively places invisible but otherwise intelligent dancers
on the phantom spots, with the indicated facing direction.  Those phantoms
proceed through the entire call, interacting with each other and with the
live dancers as necessary.  If the call is impossible for the phantoms do,
or if illegal collisions occur between live dancers and phantoms. an error
message is printed.  At the end of the call, any live dancers or phantoms
that come to the same spot may take right hands with each other, if that is
appropriate for the call.

Use this concept with extreme care, if at all.  It is extremely dangerous
in terms of what it may require the dancers to do.  Many dancers find it
difficult enough to do the live people's parts of calls without having to
do the phantoms' parts also.

@node Diamond, Implied Piecewise, Assume Waves, Concept Notes
@section Diamond

You should not need to click on @code{diamond} except when you actually
want the diamond concept, as in @i{diamond single wheel} or @i{diamond swing
thru}.  There are cases in which it may seem that the word @i{diamond}
ought to be added after clicking on @code{interlocked} and/or
@code{magic}.  The program will insert the extra word @i{diamond} for
you.  (At least, that is the intention.)  So, for example, clicking on
@code{magic} and then @code{alter the diamond} will get @samp{magic
diamond, alter the diamond}, and clicking on @code{magic},
@code{interlocked}, @code{diamond}, @code{as couples}, and @code{quarter
right} will get @samp{magic interlocked diamond, diamond as couples
quarter right}.

@node Implied Piecewise, Do it Twice, Diamond, Concept Notes
@section Implied Piecewise

Some of the replacement/interruption meta-concepts push the
semantics of the language to the limit.  Whenever a call undergoes an
interruption or enters or leaves a part with an additional concept on it,
there is an implicit @i{piecewise} at that instant.  That is, concepts and
setups are re-evaluated.
This behavior is not always obvious to the dancers.
Furthermore, in some cases it may be perceived as wrong.  For example, an
implied @i{piecewise} on a concept such as @i{cross concentric} or
@i{single cross concentric} is very likely to be considered wrong,
because the centers and ends will switch with each other multiple times.
If you have any doubt about whether some instance of concept stacking is
correct and will be understood by the dancers, do not use it.

Furthermore, replacements and interruptions are @i{normal}, that is, they
do not carry any concepts that were on the call being replaced---only
those on the entire operation.

Example, from a starting DPT setup:

@example
DELAY: TANDEM TWOSOME clean sweep 1/4 BUT REPLACE THE 3rd
PART WITH A [CHECKPOINT crossfire BY crossfire]
@end example

Normally, the tandem twosome behavior is not re-evaluated after each
part of the clean sweep.  But, since the third part was replaced with
something else to which that concept did not apply, the setup is
re-evaluated before doing the final part.  Note in particular that
the replacement was @i{normal}---the call having a part replaced was a
@i{tandem twosome clean sweep 1/4}.  If we wanted the entire operation,
including the replacement, to be tandem twosome (with no re-evaluation,
of course) we might call:
@example
TANDEM TWOSOME DELAY: clean sweep 1/4 BUT REPLACE THE 3rd
PART WITH A [SINGLE CROSS CONCENTRIC turn thru]
@end example

If you think that some instance of a replacement or interruption will
cause confusion on the dance floor because of this sort of issue,
you should not use it.

@node Do it Twice, Precede it or Follow it, Implied Piecewise, Concept Notes
@section Do it Twice

The @code{do it twice} concept simply causes the subject call to be executed
twice.  This is a notion familiar at all levels from Mainstream
(@samp{spin chain thru, the girls double circulate}) to C4 (@samp{piecewise
twice, recoil}).  No universally recognized words for this exist, so the program
uses the generic phrase @code{do it twice}.  When calling, use whatever words
you think are appropriate.

@node Precede it or Follow it, So-And-So Only, Do it Twice, Concept Notes
@section Precede it or Follow it

The concepts @code{precede it by} and @code{follow it by} take two subject
calls.  They perform the first call (first in textual order, that is)
@i{before} or @i{after}, respectively, the second.  For example,
@code{follow it by roll, swing thru} does a swing thru and roll.
There is only one context in which these concepts are sensible---they can be
the subject of the @code{piecewise}, @code{random}, or @code{reverse random}
meta-concepts.  For example, @code{piecewise follow it by criss cross the
deucey, turn the key} will do a @samp{criss cross the deucey}
after each of the three parts of @samp{turn the key}.

These concepts are among the situations in which the program does not attempt
to print out the exact words that are appropriate to use when calling, but
instead prints out an unambiguous description of what is supposed to happen.
The exact words you should use depend on the context and on your judgement.
You might say @code{piecewise add a criss cross the deucey, and turn the key},
or @code{do a criss cross the deucey after each part, and turn the key}, or
something similar.

@node So-And-So Only, Finish, Precede it or Follow it, Concept Notes
@section So-And-So Only

There are four closely related concepts here.  You must have a clear
understanding of how the program treats them in order to use them effectively.
Compared to the natural and fluent way most dancers and callers use these
ideas, the program may seem idiosyncratic and ignorant in its handling of them.
@xref{Linguistic Idiosyncrasies}.

The four concepts are @code{only}, @code{disconnected}, @code{do your part},
and @code{own the <anyone>}.

@example
   @code{<anyone> only <call>}
         or
   @code{<anyone> only <call> while the others <other call>}
@end example

This means find the maximal connected undistorted subsets, and
do the call in those subsets.  For example, from boy-boy-girl-girl waves,
the boys are in two miniwaves that have nothing to do with
each other.  The boys can do 2-person calls, such as trade or hinge,
in those setups.  If the others are told to do a second call, they do it
in their connected undistorted subsets.  For example, we could say
@code{boys only hinge while the others shazam}.  The results will be
reassembled as a 2x4, a "C1-phantom" setup, stars, or something similar.

From boy-girl-boy-girl waves, the boys are in 4 1-person connected undistorted
setups.  Using this concept, the boys can quarter right, but they can't trade
or hinge.

Now it is commonly accepted practice to say "boys trade" when the boys are
looking out, and have them effectively trade the wave.  This is  because
the call "trade" is a special case, not because calls in general can be
done from that setup.  To see this, consider the call @code{roll away}.
It, and two-person calls in general, are @i{not} legal unless the people are
adjacent.  The special property of the call @code{trade}, that it can be done
by designated people who are not adjacent, is simply an idiosyncrasy that
everyone knows.  The Sd program recognizes this by having a call in its database
@code{<anyone> trade} as well as the call @code{trade}.  Use that call, not
the @code{<anyone> only} concept, to get the appropriate people to trade
down the line when in waves.

If you really want non-adjacent people to @code{roll away}, use the
@code{disconnected} concept.

Incidentally, this is why the concept has the word "only" in it.  Without it,
the line @code{boys trade} appearing on a printed sequence would be ambiguous.
The Sd program is designed to make it possible to determine unambiguously how
an action arose by looking at the printout.  Of course, in many cases, you
should not read the word "only" when calling the card.  Use your own judgement.

@example
   @code{<anyone> disconnected <call>} or
         or
   @code{<anyone> disconnected <call> while the others <other call>}
@end example

This is like @code{<anyone> only}, but finds the maximal undistorted subsets,
whether they are connected or not.  This is a recognized C2 concept.  It is
generally intended to be used from grand (1x8) setups, in which the designated
people leave the room and compress themselves into a 1x4 setup.  After doing
the call they come back and place themselves in the same four spaces that
they had vacated.  A few shape-changing calls are permitted.  In this case,
whichever set of people occupied the center spots prior to the call will
occupy the center of the result, in accordance with accepted usage for
this concept.

@example
   @code{<anyone> do your part, <call>}
         or
   @code{<anyone> do your part, <call> while the others <other call>}
@end example

This means that the non-designated dancers leave the room and re-form their own
setup in another room.  The setups are not shrink-wrapped---they stay
the same size in each room, with phantoms where the other people are.
The appropriate call is done in each room.  The non-designees come back,
and the two setups are merged.  This merging operation is similar to that
used for @code{<anyone> only}.  It may result in things like "C1-phantom"
setups.  From boy-boy-girl-girl waves, @code{boys do your part, hinge} will leave
C1 phantom setups, just as @code{boys only hinge} will.  In fact, the difference
between these concepts is rather subtle in many cases.  The important point
is that, in each room, the dancers work in the entire setup.  For example,
from facing lines, if the centers do their part of @code{right and left thru},
they work on their own side, with the nonexistent ends, rather than working
in the center.

From boy-girl-boy-girl waves, @code{boys do your part, hinge} creates a mess.
No sensible dancer would consider it acceptable.  Do not use such things.

@example
   @code{own the <anyone>, <call> by <other call>}
@end example

This is similar to the @code{<anyone> do your part} concept, except that the
result setups are reassembled according to strict matrix positions.  That
is, instead of a "C1 phantom" setup, a 4x4 matrix may result.
This is a recognized C3A concept.

In all of these concepts, the program will always use the word "others" for
the non-designated people.  When calling, you should probably say something
more intelligent, like "girls" or "sides" or whatever.

In general, be aware that the choice of words that the program uses for these
concepts is determined by the need to avoid ambiguity, and may not be the
words that you should use when calling.  For example, if the program prints
out @samp{boys only hinge}, it may be more natural to say just
@samp{boys hinge}.  Similarly, if the program prints out @samp{boys do your
part, transfer the column while the others switch the wave}, it may be more
natural to say @samp{everyone do your part, boys transfer the column while
the girls switch the wave}.  As in all aspects of calling, choose your
words carefully.

@node Finish, 12 Matrix and 16 Matrix, So-And-So Only, Concept Notes
@section Finish

To Sd, this concept means "skip the first part", and is only legal for
certain calls---those for which dancers would generally agree on this meaning.
However, it is still somewhat dangerous, since the actual meaning of
@samp{finish} in the square dancing folklore seems to be a little more
complicated than that.  You should be careful when using this concept.
One call that is commonly used this way is @samp{finish like wheel the ocean}
after an appropriate "pushy" cast off 3/4.  In Sd, @code{finish wheel the ocean}
means to have the belles cross.  Hence you may, after carefully verifying that
the casting direction is correct, enter something like @code{chain reaction}
and @code{centers finish wheel the ocean}, which you could read as
@samp{chain reaction; centers finish like a wheel the ocean}.

@node 12 Matrix and 16 Matrix,  , Finish, Concept Notes
@section 12 Matrix and 16 Matrix

This discussion will be in terms of 12 matrices.  16 matrices are analogous.

Definition: a @dfn{large setup} is a setup of more than 8 people.
A @dfn{large call} is a call executed in such a setup.  There are very few
large calls that don't have some kind of modifier like @samp{12 MATRIX}
or @samp{3x3} in their name.

General principle:  when in a large setup, so that phantoms are present,
you must say something to acknowledge the existence of the phantoms, that
is, to say that the phantoms' spots count.  This is necessary whether doing
a large call, or splitting the large setup into smaller ones for doing small
calls.  So, for example, if you are in a parallelogram, you can't just say
the name of a large call.  You must say @samp{12 MATRIX} or @samp{2X6 MATRIX}.

The explicit matrix concepts @samp{MxN MATRIX}, e.g., @samp{2X6 MATRIX}, legitimize
the large setup, saying where the phantoms are, and making it possible to
call large calls, or, if the call has no large version, to split the setup
and do multiple instances of smaller versions.

Explicit matrix concepts can also be used to dictate the precise formation
with phantoms when using tandem or as-couples concepts.  For example, from
two-faced lines, @samp{2X8 MATRIX AS COUPLES} leads to virtual 2x4 lines (in
which the ends are all phantoms), @samp{4X4 MATRIX AS COUPLES} leads to virtual
2x4 columns (this happens to be the same as @samp{PHANTOM AS COUPLES} in this
setup), and @samp{4X4 MATRIX BOXES WORK SOLID} leads to a virtual 2x2.
@samp{2X8 MATRIX BOXES WORK SOLID} leads to a virtual 1x4.  From twin diamonds
in which each diamond has all 4 people facing the same way,
@samp{16 MATRIX OF PARALLEL DIAMONDS DIAMONDSOME} leads to a virtual 1x4
in which both ends are phantoms.  @samp{DIAMONDSOME} leads to a virtual 1x2.

The call size modifiers @samp{12 MATRIX} or @samp{16 MATRIX} legitimize the large setup
(though they don't always state unambiguously where the phantoms are, which
can lead to difficulty) and also select a large version of a call.  When
this modifier is used, only large versions of the call may be
performed---the setup will not be split for small versions.

When we say that @samp{12 MATRIX} is a call size modifier, we mean that, for
example, @samp{12 MATRIX relay the top} is a call.  @samp{3X4 MATRIX relay the top}
is not a call.  It is a statement that the setup is a legitimate 3x4,
and a request to do the call @samp{relay the top} in it, which is illegal.
There are some calls, like circulate, that can be done either with
explicit matrix concepts or with call size modifiers.

In a great many instances explicit matrix concepts like @samp{2X6 MATRIX} or
@samp{3X4 MATRIX} can be used interchangeably with the call size modifier
@samp{12 MATRIX}.  For example, @samp{2X6 MATRIX in roll circulate} and
@samp{12 MATRIX in roll circulate} are equivalent in 2x6 lines.
@samp{3X4 MATRIX circulate}
and @samp{12 MATRIX circulate} are equivalent in triple lines.  It should
never be necessary to give both an explicit matrix concept and a call
size modifier.

The explict matrix concepts and call size modifiers all have the additional
property that they can expand a smaller setup as required, so, for example,
@samp{12 MATRIX circulate} is legal in normal columns.
(Special case: in a 2x4
setup, the @samp{16 MATRIX} call modifier doesn't know whether to expand to a
4x4 or a 2x8, so you may need to use @samp{4X4 MATRIX} or @samp{2X8 MATRIX} explicitly.
In other cases, the expansion is clear.)


For example, from triple waves,
@code{12 MATRIX circulate}
and
@code{3X4 MATRIX circulate}
are both legal and equivalent.

From parallelogram waves,
@code{12 MATRIX circulate}
and
@code{2X6 MATRIX circulate}
are both legal and equivalent, as are
@code{12 MATRIX in roll circulate}
and
@code{2X6 MATRIX in roll circulate}.

@subsection Small Calls (defined for 8 or fewer people)

If a call is defined for a setup of 8 or fewer people, and the setup is larger
than 8 people, so you want the setup divided, you must give an explicit matrix
concept such as @samp{2X6 MATRIX}.  This defines the formation, and tells people
to divide the 12-person formation into the smaller formations required to do
the call.  Do not say @samp{12 MATRIX}.  That designates a 12-person call, which
this is not.

So, from parallelogram columns,
@code{2X6 MATRIX double play}
is legal, while
@code{12 MATRIX double play}
and
@code{double play}
are not.  You may also say
@code{12 MATRIX DIVIDED COLUMNS double play}.
(The 12 MATRIX DIVIDED COLUMNS concept forms two 6-person setups.)

The above examples will work from 2x4 columns also---it expands
the matrix by placing phantoms outside.

From triple waves, you may also say
@code{3X4 MATRIX double play}
or
@code{12 MATRIX SPLIT PHANTOM COLUMNS double play}
but not
@code{12 MATRIX double play}.

You may substitute calls like @samp{3x3 peel off} for @samp{double play} in the
above.  Note that the @samp{MxN} concept identifies a variant of the call.
It does not cause the matrix to be expanded or recognized.

@subsection Large Calls (defined for more than 8 people)

Most large calls are versions of calls that are normally done from small
setups.  That large version must be identified with some modifier such as
@samp{12 MATRIX}, or @samp{MxN}.  Furthermore, you must legitimize the phantoms by
giving an appropriate modifier.  An explicit matrix concept such as
@samp{2X6 MATRIX} will do, as will a call size modifier such as @samp{12 MATRIX}.

From parallelogram columns, you may say
@code{12 MATRIX circulate}
or
@code{2X6 MATRIX circulate}
or
@code{12 MATRIX 3X3 transfer the column}
or
@code{2X6 MATRIX 3X3 transfer the column}
but not
@code{3X3 transfer the column}.

The above examples will work from 2x4 columns also---it expands
the matrix by placing phantoms outside.

@node Bugs, Misc Advice, Concept Notes, Top
@chapter Known Bugs and Misfeatures

The @dfn{funny} concept is not fully implemented.  Only @dfn{funny circulate}
types of calls are supported, as in @i{funny go first class} or @i{funny bingo}.
Do not attempt a @i{funny square thru} or @i{funny slide thru}.

@node Misc Advice, Customization, Bugs, Top
@chapter Miscellaneous Advice and Warnings

If a call that you believe is legal does not appear on the menu,
click on @code{allow modifications}.  This will bring up the universal call
menu.  You can then thrash out which of you or the computer is correct.

The program sometimes prints non-fatal @i{warnings} about calls.
These are intended
principally as advice to you, the user of the program, that the call
you have just entered may not be a reasonable thing to call.  It is not
necessarily the case that reading the warning aloud when calling the
sequence is the correct thing to do, though it might be.  The call
might simply be inappropriate, or it might be wise to say something along
the lines of ``be careful; everyone do your part.''
The significance of a warning may also depend on the level.  Some things
that are extremely peculiar but barely legal at high challenge levels are
simply not done at lower levels.  You should use your judgement.  

Warning:  The database is not without errors or misunderstandings in
nonstandard uses of calls.  The program generally tries to be extremely
conservative.  However,
you should not blindly accept what the program does, particularly if
a call was used in an unusual way.  The management will not be
responsible for any sequences left unattended.

Warning:  Some combinations of things that seem obvious
to the program might not be agreed to by the dancers.  Particularly
at high challenge levels, some things are controversial.  Proceed with
caution.  Unless you agree wholeheartedly with what the program did, and
believe that the dancers will also agree, it may be best not to do it.
Don't stack outrageous interrupts and replacements, with concepts going
every which way, unless you are prepared to explain yourself at the end
of the tip.

Warning:  The program's notion of levels is only keyed to concepts and
calls, not to concept/call combinations, and not to calls in the context
of certain setups.  For example, since @i{split} and @i{square thru} are
both Mainstream, it thinks that @i{split square thru} is Mainstream, even
though it is A1.  Also, @i{chain reaction} should only be used from the
simple @samp{heads pass the ocean} setup at A1, but the program doesn't
know this.

For debugging, there is a hidden level called @code{all}, which is above
C4.  At this level, even the invisible calls that are used in the
definitions of other calls are legal.  They typically begin with an
underscore.  Also, when the @code{all} level is selected, all
sequentially-defined calls are fractionalizable, even if they aren't in
practice.

The font for the text output window must be fixed-width so the
formation pictures are legible.  If you do not get this by default,
set this X resource:

@example
Sd*text*font: -misc-fixed-medium-r-normal--13-*-*-*-c-70-iso8859-1
@end example

@node Customization, Versions, Misc Advice, Top
@chapter Customization with X Resources

The file @file{Sd.res} is a sample X user resource file for the program.  It
contains values for a number of parameters, including most of the
text on the screen which is not fetched from the calls database.
Install @file{Sd.res} as @file{$HOME/Sd} to use these resources.

People who have many user resource files for different applications
may wish to store them in a directory other than their home directory.
To do so, set the environment variable @code{XAPPLRESDIR} to the directory
where your resource files are.  For example, one of the authors uses
the subdirectory @file{app-resources}, and his .cshrc contains this line:

@example
setenv XAPPLRESDIR ~/app-resources
@end example

To use a different value for any of these parameters, either edit the
resource file or load the changed value into your X server's resource
database.  To modify the server resource database, put a modified
version of the appropriate line in the @file{.Xresources} file in your home
directory (assuming you run @code{xrdb .Xresources} from @file{.xsession} or
whatever your X startup file is called).  You will have to re-run @code{xrdb}
after editing your @file{.Xresources} file.
You should add @samp{Sd} to the front
of any lines you move to your @file{.Xresources} file.

All values in the distributed @file{Sd.res} file except the colors are the
defaults and are in the file for illustration only.  You can remove
them if you wish your installed user resource file to contain only the
resources you change.

To have mouse button 3 invoke the Undo operation, as one of the
authors does, set these resources:

@example
Sd*frame*Label*Translations: #override <Btn3Down>: undo()
Sd*frame*List*Translations: #override <Btn3Down>: undo()
@end example

@node Versions, Installation, Customization, Top
@chapter Versions

The version is a string consisting of parts separated by colons.

If you customize any part of Sd for your own use, or fix bugs, please
assign the result a new version by appending to the current version.
This will help in keeping track of bug reports.  The version string is
defined near the top of the file @file{sdmain.c}.  For example, you might
set it to @code{25.6.joe1} for your private version.  By leaving the
original two numbers, we can correlate possible problems with the
fileset on which the private version was based.

The calls database also has a version.
If you modify the database, we ask that you
change the version string at the top of the file.

@node Installation, Copying, Versions, Top
@include install.txinfo

@node Copying, , Installation, Top
@include gpl.txinfo

@page
@contents
@page
@ @c make an even 4 pages of TOC
@bye

@c Local Variables:
@c time-stamp-start: "Time-stamp: "
@c time-stamp-end: "$"
@c time-stamp-format: (time-stamp-month-dd-yyyy)
@c End:
