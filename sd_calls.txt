/* calls database source for Sd -- square dance caller's helper.

    Copyright (C) 1990-1994  William B. Ackerman.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 1, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

    -----------------------------------------------------------------

    The `mkcalls' program must be run once to compile `sd_calls.txt',
    this file, into `sd_calls.dat', the binary file used by Sd.

    -----------------------------------------------------------------

    The version of this file is as shown immediately below.  This
    string gets encoded into the database file and then displayed
    at program startup, as the "db" part of the complete version.

    ATTENTION!  If you modify the database, we recommend that
    you change the version string below to identify the change.
    This will facilitate tracking errors, since the database version
    will be written onto every sequence.  Changing the version
    string is also required by paragraphs 2(a) and 2(c) of the GNU
    General Public License if you distribute the file.
*/

version "30.7"

call "(nothing)" mainstream tag nullcall
            dont_use_in_resolve is_tag_call
            /* Why a tag call?  So that "revert" will
               appear on the waves menu. */
   nulldefine

call "slip the clutch" mainstream tag slipclutch
            imprecise_rotation
   setup thar thar restriction forbidden wave_only
      array [0N 3E 0 0 4N 3W 0 0]
   setup crosswave thar restriction forbidden wave_only
      array [0N 3E 0 0 4N 3W 0 0]
   setup pcrosswave thar restriction forbidden wave_only
      array [0 0 2N 5E 0 0 6N 5W]
   /* We wish this were legal from waves, so that we could print
      "slip the clutch, left allemande" as a resolve, instead of
      "extend".  Alas, it is not legal.  It seems that its use
      prior to a left allemande is a common figure of speech, but
      not a real call.  If it were a real call, this is what
      it would be:
   setup 2x4 thar restriction forbidden wave_only
      array [CR2E CR3E AL3W AL2W ZM4N ZM5N ZM1N ZM0N] */

call "cross by" c1
            imprecise_rotation
   setup thar thar restriction forbidden wave_only
      array [1N 2E 0 0 5N 2W 0 0]
   setup crosswave thar restriction forbidden wave_only
      array [1N 2E 0 0 5N 2W 0 0]
   setup pcrosswave thar restriction forbidden wave_only
      array [0 0 3N 4E 0 0 7N 4W]
   setup 2x4 thar restriction forbidden wave_only   /* This one *is* legal. */
      array [CR3E CR2E AL2W AL3W ZM5N ZM4N ZM0N ZM1N]

call "remake the thar" plus
   setup thar thar restriction forbidden wave_only
      array [3W 2W 0 0 3E 2E 0 0]
   setup crosswave thar restriction forbidden wave_only
      array [3W 2W 0 0 3E 2E 0 0]
   setup pcrosswave thar restriction forbidden wave_only
      array [0 0 5W 4W 0 0 5E 4E]

call "all 8 spin the top" plus
   setup thar thar restriction forbidden wave_only
      array [L3W L6E 0 0 R3E R6W 0 0]
   setup crosswave thar restriction forbidden wave_only
      array [L3W L6E 0 0 R3E R6W 0 0]
   setup pcrosswave thar restriction forbidden wave_only
      array [0 0 L5W L0E 0 0 R5E R0W]

call "@b top" a1
            neednumber imprecise_rotation
   seq trade []
   seq slipclutch [repeat_n]

call "flip your lid" c3
   setup qtag qtag
      preds "Must be in quarter tag setup."
         if q_tag_front [0 0 3S 4N 5N 4N 7S 5N]
         if q_tag_back [0 0 3S 4N 6S 2S 7S 5N]

call "jay walk" c1
   setup qtag qtag
      preds "Must be in quarter tag setup."
         if q_tag_front [0 0 1N 1N 2N 6N 0N 0N]
         if q_tag_back [0 0 1N 1N 3N 7N 0N 0N]
call "ping-pong circulate" plus
   setup qtag qtag
      preds "Must be in quarter tag setup."
         if q_tag_front [0 0 L0S L0S M3N M7N R1S R1S]
         if q_tag_back [0 0 L0S L0S M2N M6N R1S R1S]
call "fall into a column" c4a
            fudge_to_q_tag
   setup qtag 2x4 rotate
      preds "Must be in quarter tag setup."
         if q_tag_front [0 0 0W 2E 4W 3W 7W 5E]
         if q_tag_back [0 0 0W 2E 2W 5W 7W 5E]

call "_ctrs stampede" dontshow tag ctrsstampede
            visible_fractions finish_means_skip_first_part
   seq tradethewave []
   seq hinge []
   seq and_cross []

call "_ends stampede" dontshow tag endsstampede
            parallel_conc_end
   setup 2x2 2x2
      array [R2W L3E 0 0]

call "stampede" c3a tag stampede
            fudge_to_q_tag
   conc ctrsstampede [] endsstampede [conc_demand_columns conc_force_columns endscando]

call "stroll and cycle" c4a
            fudge_to_q_tag
   setup qtag 2x4
      preds "Must be in quarter line setup."
         if q_line_front [0 0 0S 6S 6N 5N 3S 5S]
         if q_line_back [0 0 0S 6S 3N 0N 3S 5S]

call "exchange the boxes" c3a
   setup 2x4 2x4
      array [M3N M2N M1N M0N R7N L6N R5N L4N]
   setup 4x2 2x4
      array [L3S M2S M1S M0S M7S M6S M5S R4S]

call "1/4 exchange the boxes" c3a
   setup 2x4 2x4
      array [R1S L0S R3S L2S M3N M1N M2N M0N]
   setup 4x2 2x4
      array [M1N M5N M3N R4S L3S M4N M2N M6N]

call "1/2 exchange the boxes" c3a
   setup 2x4 2x4
      array [M5S M7S M4S M6S L2S L0S R3S R1S]
   setup 4x2 2x4
      array [M5N M4N R4S M5S M2S L3S M3N M2N]

call "3/4 exchange the boxes" c3a
   setup 2x4 2x4
      array [L4N L6N R5N R7N M6S M7S M4S M5S]
   setup 4x2 2x4
      array [M4N L3S M5S M1S M6S M2S R4S M3N]

call "_centers maybe slip" dontshow tag ctrmaybeslip
            dont_use_in_resolve left_means_mirror
   conc slip [inherit_left or_anycall] nullcall []

call "_single bring us together" dontshow tag sgl_bring_together
            dont_use_in_resolve
   setup dmd 2x2
      array [0 0 0 1S]
   setup pmd 2x2
      array [2W 0 0 0]

call "_1/4 circle single bring us together" dontshow tag 1_4_sgl_bring_together
            dont_use_in_resolve
   setup 4x1 2x2
      array [2W 1E 0 0]

call "_3/4 circle single bring us together" dontshow tag 3_4_sgl_bring_together
            dont_use_in_resolve
   setup 4x1 2x2
      array [2W 3W 0 0]

call "bring us together" c4a
            sequence_starter single_is_inherited
   seq sgl_bring_together [cpls_unless_single]

call "1/4 circle bring us together" c4a
            single_is_inherited
   seq 1_4_sgl_bring_together [cpls_unless_single]

call "3/4 circle bring us together" c4a
            single_is_inherited
   seq 3_4_sgl_bring_together [cpls_unless_single]

call "exchange the diamonds" c2
            fudge_to_q_tag
   setup qtag qtag
      array [0 0 6N 7N 0 0 2N 3N]
   setup pqtag qtag
      array [1S 0S 0 0 5S 4S 0 0]

call "3/4 exchange the diamonds" c2
            fudge_to_q_tag
   setup qtag qtag
      array [0 0 5W 5E 0 0 4E 4W]
   setup pqtag qtag
      array [2W 3W 0 0 3E 2E 0 0]

call "exchange the triangles" c3a
   setup bone6 bone6
      array [M1N M0N L5N R4N L3N R2N]
   setup pbone6 bone6
      array [L1S L0S 0 R4S R3S 0]
   setup short6 short6
      array [5S 0 3S R2S 0 L0S]
   setup pshort6 short6
      array [R5N L4N 3N 2N R1N L0N]

call "convert the triangle" c4a
   setup trngl trngl qualifier miniwaves
      preds "???"
         if trngl_pt_rh [0 R3E L3W 0 R1E R1E]
         if always      [0 R3E L3W 0 L2W L2W]
   setup ptrngl trngl qualifier miniwaves
      array [M4N 0 0 M2N 0 0]

call "unwrap the diamonds" c2
            fudge_to_q_tag take_right_hands
   setup qtag 2x4
      array [0 0 AM1W CR4W 0 0 CM2E AL7E]
   setup pqtag 2x4
      array [ZM3N CM5S 0 0 AM2S ZM4N 0 0]
            alternate_definition [interlocked] c2
   setup qtag 2x4
      array [0 0 AM1W AL7E 0 0 CM2E CR4W]
   setup pqtag 2x4
      array [ZM3N CM5S 0 0 AM2S ZM4N 0 0]
            alternate_definition [magic] c3
   setup qtag 2x4
      array [0 0 AL7E CM2E 0 0 CR4W AM1W]
   setup pqtag 2x4
      array [ZM3N CM5S 0 0 AM2S ZM4N 0 0]

call "wrap to a diamond" c3a
   setup 4x2 qtag
      array [ZM1N CR2E CR4S CR3W AL3E AL1S AL2W ZM4N]

call "wrap to an interlocked diamond" c3a
   setup 4x2 qtag
      array [ZM1N CR2E CR4S CR7W AL7E AL1S AL2W ZM4N]

call "unwrap the hourglass" c2
            take_right_hands
   setup hrglass 2x4
      array [0 0 AM1W 0 0 0 CM2E 0]
   setup phrglass 2x4
      array [ZM3N CM5S 0 CR4S AM2S ZM4N 0 AL3S]

call "wrap to an hourglass" c3a
   setup 4x2 hrglass
      array [ZM1N CR2E CR4S CM7S AM3S AL1S AL2W ZM4N]

call "unwrap the galaxy" c2
            take_right_hands
   setup galaxy 4x4
      preds "???"
         if next_galaxyspot_is_tboned [ZM3E  ZM3S 0 ZM15S ZM15W ZM14N 0 ZM13N]
         if always                    [CR14S ZM3S 0 ZM15S AL13S ZM14N 0 ZM13N]

call "wrap to a galaxy" c3a
   setup 4x2 galaxy
      array [ZM3N CR4E CR5S CM6S AM2S AL3S AL4W ZM5N]

call "snap the diamond" c4
            fudge_to_q_tag
   setup qtag 2x4 rotate
      array [0 0 1N 2S 0 0 5S 6N]
   setup pqtag 2x4 rotate
      array [3W 4E 0 0 7E 0W 0 0]

call "dodge @2circulate@3" c2
   conc walkndodge [] circulate [or_anycall]

call "change lanes" c3x
   crossconc dblcirc [conc_demand_lines] remake [conc_force_lines]

call "retain your lane" c3x
   conc remake [] dblcirc [conc_demand_lines conc_force_lines]

call "collapse the setup" c4a
            fudge_to_q_tag cross_is_inherited
   conc stepnfold [inherit_cross] endsdetour [conc_demand_lines conc_force_columns endscando]

call "strike out" c4a
            fudge_to_q_tag
   conc sngcrossnwheel [] endsdetour [conc_demand_lines conc_force_columns endscando]

call "_ends strip" dontshow tag endsstrip
   setup 2x2 1x4
      array [L1N R3N R2S L0S]

call "strip the setup" c3a
   reverse_checkpoint fanthetop [] endsstrip [conc_demand_lines endscando]

call "in style" c3
            fudge_to_q_tag step_to_wave
   setup qtag 2x4
      array [2N 3N 0 5S 6N 7N 0N 0]

call "... and circle 1/4" c2 tag andcircle
            fudge_to_q_tag
   setup qtag qtag
      preds "Impossible, apparently."
         if q_tag_front  [0 0 1S 3N 5N 4N 0S 7N]
         if q_line_front [0 0 1S 3N 5N 4N 0S 7N]
         if q_tag_back   [0 0 1S 3N 2N 6N 0S 7N]
         if q_line_back  [0 0 1S 3N 2N 6N 0S 7N]

call "_something and circle 1/4" dontshow tag something_and_circle
            fudge_to_q_tag step_to_wave
   seq ctrsswingslip [or_anycall]
   seq andcircle []

call "gravitate" c4
            fudge_to_q_tag reverse_means_mirror take_right_hands
   setup qtag 2x4
      array [C4W C5W A0W C6W A0E A1E C3E A5E]

call "quarter the alter" c4
            step_to_wave left_means_touch_or_check visible_fractions
   seq armturn_14 [allow_forced_mod]
   seq ctrarmturn_14_utb [allow_forced_mod]
   seq ctrrotstar [allow_forced_mod]
   seq flipdiamond [allow_forced_mod]

call "@9-@9-@9 quarter the alter" c4
            step_to_wave left_means_touch_or_check need_three_numbers visible_fractions
   seq armturn_n4 [allow_forced_mod]
   seq ctrarmturn_n4_utb [allow_forced_mod shift_one_number]
   seq ctrrotstar [allow_forced_mod repeat_n shift_two_numbers]
   seq flipdiamond [allow_forced_mod]

call "@2swing @3and circle @a" c1
            neednumber
   seq something_and_circle [repeat_n]

call "_peel chain thru part 1" dontshow tag peelchain1
            dont_use_in_resolve left_means_mirror
            fudge_to_q_tag step_to_wave
   setup qtag 1x8 qualifier right_wave
      array [0N 5N 0 7S 0 0 6N 0]

call "_trail chain thru part 1" dontshow tag trailchain1
            dont_use_in_resolve left_means_mirror
            fudge_to_q_tag step_to_wave
   setup qtag 1x8 qualifier right_wave
      array [5N 0N 0 7S 0 0 6N 0]

call "peel chain thru" c3a
            left_means_mirror
   seq peelchain1 [inherit_left]
   seq fanthetop [allow_forced_mod]

call "trail chain thru" c3a
            left_means_mirror
   seq trailchain1 [inherit_left]
   seq fanthetop [allow_forced_mod]

call "create a diamond" c4a
            left_means_mirror
   setup 2x4 qtag
      array [0E 1E 0 0 0 0 3N 6N]

call "triple trade" a1 tag tripletrade
   setup 1x8 1x8
      array [M0N R3S R6S L1S M4N L7S L2S R5S]
   setup ptpd ptpd
      array [M0N 0 R6S 0 M4N 0 L2S 0]
   setup pptpd ptpd
      array [0 R3S 0 L1S 0 L7S 0 R5S]

call "turn four" c4a
   setup 1x8 1x8 rotate restriction 2fl_only
      array [R0N R1N R2N R3N L0S L1S L2S L3S]

call "diamond circulate" plus tag diamondcirc
            fudge_to_q_tag
   simple_funny
   setup dmd dmd
      array [R1E 0 L1W 0]
   setup pmd dmd
      array [0 R2E 0 L2W]

call "diamond single rotate 1/4" c4
            fudge_to_q_tag reverse_means_mirror
   setup dmd dmd
      array [0 AL0S 0 CL2N]
   setup pmd dmd
      array [CL3N 0 AL1S 0]

call "triangle circulate" c1 tag trngle_circ
   simple_funny
   setup trngl trngl
      array [0 R2S L1S 0 L3W R3E]
   setup ptrngl trngl
      preds "???"
         if nexttrnglspot_is_tboned [L2W M2N R0S R4E L3S M4N]
         if always                  [L2S M2N R0S R4S L3S M4N]
            alternate_definition [3x1] c2
   setup 3x4 3x4          /* ***** for now, only allow outer columns filled, gotta fix this */
      array [R11S 0 0 L5S M3N R3S M4N 0 0 M10N M0N L0S]

call "reshape the triangle" c2
   simple_funny
   setup trngl trngl
      array [0 R2E L1W 0 L3W R3E]
   setup ptrngl trngl
      preds "???"
         if nexttrnglspot_is_tboned [L2S M2E R0S R4S L3S M4W]
         if always                  [L2W M2E R0S R4E L3S M4W]

call "turn the star 1/4" dontshow tag turnstar1
            dont_use_in_resolve is_star_call
   setup star star
      array [R1E 0 L1W 0]
   setup dmd dmd rotate
      array [R0N 0 L0S 0]
   setup pmd dmd rotate
      array [0 R1N 0 L1S]
   setup 2x2 2x2
      array [R1S L0S M1N M0N]

call "turn the star @b" a2 tag turnstarn
            dont_use_in_resolve is_star_call neednumber
   seq turnstar1 [repeat_n]

call "turn the star @b, interrupt first with @0" c1
            dont_use_in_resolve is_star_call neednumber
   seq nullcall [mandatory_anycall]
   seq turnstar1 [repeat_n]

call "turn the star @b, interrupt after with @0" c1
            dont_use_in_resolve is_star_call neednumber
   seq turnstar1 [repeat_n]
   seq nullcall [mandatory_anycall]

call "turn the star @b, interrupt after 1/4 with @0" c1
            dont_use_in_resolve is_star_call neednumber
   seq turnstar1 []
   seq nullcall [mandatory_anycall]
   seq turnstar1 [repeat_nm1]

call "turn the star 3/4, interrupt after 1/2 with @0" c1
            dont_use_in_resolve is_star_call
   seq turnstar2 []
   seq nullcall [mandatory_anycall]
   seq turnstar1 []

call "turn the star 1/2" dontshow tag turnstar2
            dont_use_in_resolve is_star_call
   setup star star
      array [CR2S 0 AL0S 0]
   setup dmd dmd
      array [CR2S 0 AL0S 0]
   setup pmd dmd
      array [0 CR3S 0 AL1S]
   setup 2x2 2x2
      array [C2S A3S A0S C1S]

/* We use this in cases in which we know the "star" must not be a box of four, such as
   "alter the diamond".  If we allowed boxes to circulate, then someone could accidentally
   call "reverse order alter the diamond" from parallel waves. */
call "turn the diamond 1/2" dontshow tag turndmd2
            dont_use_in_resolve is_star_call
   setup star star
      array [CR2S 0 AL0S 0]
   setup dmd dmd
      array [CR2S 0 AL0S 0]
   setup pmd dmd
      array [0 CR3S 0 AL1S]

call "_turn the star 1/4 / ends trade" dontshow tag turnstar1_endstrade
            dont_use_in_resolve 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turnstar1 [allow_forced_mod] trade []

call "_turn the star @b / ends trade" dontshow tag turnstarn_endstrade
            dont_use_in_resolve neednumber 12_matrix_is_inherited
   maybematrix_conc_star turnstarn [allow_forced_mod] trade []

call "_turn the star 1/2 / ends trade" dontshow tag turnstar2_endstrade
            dont_use_in_resolve 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turndmd2 [allow_forced_mod] trade []

call "_turn the center star 1/4" dontshow tag turnstar1_endsnothing
            dont_use_in_resolve 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turnstar1 [allow_forced_mod] nullcall []

call "_turn the center star @b" dontshow tag turnstarn_endsnothing
            dont_use_in_resolve neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turnstarn [allow_forced_mod] nullcall []

call "_diamond ends isolate" dontshow tag diamond_ends_isolate
            dont_use_in_resolve
   setup dmd 1x4 rotate
      array [R0N 0 L0S 0]
   setup pmd 1x4 rotate
      array [0 M1W 0 M3W]

call "_centers slip/ends circulate" dontshow tag ctrsslipendscirc
            dont_use_in_resolve
   conc slip [] circulate [conc_demand_lines conc_force_lines]

call "alter the diamond" c4
            visible_fractions
   seq turndmd2 [allow_forced_mod]
   seq flipdiamond [allow_forced_mod]
   seq fanback []

call "alter the wave" c1
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check visible_fractions finish_means_skip_first_part
   seq swing []
   seq fanback []
   seq turndmd2 [allow_forced_mod]
   seq flipdiamond [allow_forced_mod]

call "alter and circulate" c2
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check visible_fractions finish_means_skip_first_part
   seq swing []
   seq fanback []
   seq ctrsslipendscirc []
   seq turndmd2 [allow_forced_mod]
   seq flipdiamond [allow_forced_mod]

call "change the wave" c3
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check grand_is_inherited visible_fractions finish_means_skip_first_part
   seq trade []
   seq maybegrandslip [inherit_grand]
   seq ctrcrossrun [inherit_grand]
   seq trade []

call "change the centers" c3
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check grand_is_inherited visible_fractions finish_means_skip_first_part
   seq trade []
   seq maybegrandslip [inherit_grand]
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand]

call "_and cross" dontshow tag and_cross
            dont_use_in_resolve
   simple_funny
   setup 2x2 2x2 restriction unusual wave_only
      array [0N 1N 0N 1N]
            alternate_definition [grand] c3a
   setup 4x2 2x4 restriction quarterbox_or_col
      preds "Can't figure out whether to cross."
         if columns_magic_tandem     [0N 5N 2N 3N 4N 5N 2N 7N]
         if columns_magic_antitandem [6N 5N 4N 3N 4N 3N 2N 1N]

call "@0 and cross" a1
            grand_is_inherited dont_use_in_resolve
   seq nullcall [mandatory_anycall]
   seq and_cross [inherit_grand]

call "nicely" c4 tag nicely
            grand_is_inherited visible_fractions finish_means_skip_first_part
   seq hinge []
   seq and_cross [inherit_grand]

call "connect the diamond" c4a
   setup dmd 2x2
      array [R1S 0 L0S 0]
   setup pmd 2x2
      array [0 M2E 0 M1W]

call "flip the diamond" plus tag flipdiamond
            fudge_to_q_tag take_right_hands
   setup dmd 1x4
      array [CR1S 0 AL3S 0]
   setup pmd 1x4
      array [0 CR2E 0 AL2W]
            alternate_definition [reverse] c3a
   setup dmd 1x4 rotate
      array [CR1N 0 AL1S 0]
   setup pmd 1x4 rotate
      array [0 AL0E 0 CR2E]
            alternate_definition [interlocked] c1
   setup qtag 2x4 rotate
      array [0 0 AL0S AL7S 0 0 CR7N CR0N]
   setup pqtag 2x4 rotate
      array [CR6E CR1E 0 0 AL2E AL5E 0 0]
            alternate_definition [magic] c2
   setup qtag 2x4 rotate
      array [0 0 AL7S CR7N 0 0 CR0N AL0S]
   setup pqtag 2x4 rotate
      array [CR1E CR6E 0 0 AL5E AL2E 0 0]
            alternate_definition [magic interlocked] c3
   setup qtag 2x4 rotate
      array [0 0 AL7S AL0S 0 0 CR0N CR7N]
   setup pqtag 2x4 rotate
      array [CR1E CR6E 0 0 AL5E AL2E 0 0]
            alternate_definition [3x1] c3x
   setup 3x1dmd 1x8 rotate
      array [R0N R1N R3N 0 L0S L1S L3S 0]
   setup p3x1dmd 1x8 rotate
      array [0 0 0 R2E 0 0 0 L6E]

call "cut the diamond" plus tag cutdiamond
            fudge_to_q_tag take_right_hands
   setup dmd 1x4
      array [CR3S 0 AL1S 0]
   setup pmd 1x4
      array [0 CR2E 0 AL2W]
            alternate_definition [reverse] c3a
   setup dmd 1x4 rotate
      array [CR1N 0 AL1S 0]
   setup pmd 1x4 rotate
      array [0 M2E 0 M0E]
            alternate_definition [interlocked] c1
   setup qtag 2x4 rotate
      array [0 0 AL0S AL7S 0 0 CR7N CR0N]
   setup pqtag 2x4 rotate
      array [CR5E CR2E 0 0 AL1E AL6E 0 0]
            alternate_definition [magic] c2
   setup qtag 2x4 rotate
      array [0 0 AL7S CR7N 0 0 CR0N AL0S]
   setup pqtag 2x4 rotate
      array [CR2E CR5E 0 0 AL6E AL1E 0 0]
            alternate_definition [magic interlocked] c3
   setup qtag 2x4 rotate
      array [0 0 AL7S AL0S 0 0 CR0N CR7N]
   setup pqtag 2x4 rotate
      array [CR2E CR5E 0 0 AL6E AL1E 0 0]
            alternate_definition [3x1] c3x
   setup 3x1dmd 1x8 rotate
      array [R0N R1N R3N 0 L0S L1S L3S 0]
   setup p3x1dmd 1x8 rotate
      array [0 0 0 R6E 0 0 0 L2E]

call "drop in" c2 tag dropin
   setup dmd 2x2
      preds "???"
         if dmd_ctrs_rh [CR0E 0 AL2W 0]
         if always      [CR3E 0 AL1W 0]
   setup pmd 2x2
      array [0 ZM1N 0 ZM2N]

call "drop out" c2
   setup dmd 2x2
      preds "???"
         if dmd_ctrs_rh [AL0W 0 CR2E 0]
         if always      [AL3W 0 CR1E 0]
   setup pmd 2x2
      array [0 ZM1N 0 ZM2N]

call "_special drop in" dontshow tag spec_drop_in
            dont_use_in_resolve take_right_hands
   setup dmd 2x2
      array [R0E 0 L1W 0]
   setup pmd 2x2
      array [0 M1N 0 M2N]
            alternate_definition [12matrix] c3a
   setup pshort6 2x3 rotate
      array [0 R0N 0 0 L2S 0]
   setup short6 2x3 rotate
      array [M5W 0 M0W M1W 0 M4W]
            alternate_definition [16matrix] c3a
   setup pspindle 2x4
      array [M1N M2N M3N 0 M4N M5N M6N 0]
   setup spindle 2x4
      array [0 0 0 L3W 0 0 0 R0E]

call "switch the wave" a2
   setup 1x4 1x4 restriction wave_only
      array [CR3S AL0S AL1S CR2S]
            alternate_definition [grand] c3
   setup 1x8 1x8 restriction wave_only
      array [CR3S AL0S AL1S CR6S AL7S CR4S CR5S AL2S]

call "switch the line" c1
   setup 1x4 1x4
      array [CR3S AL0S AL1S CR2S]
            alternate_definition [grand] c3
   setup 1x8 1x8
      array [CR3S AL0S AL1S CR6S AL7S CR4S CR5S AL2S]

call "curl apart" c3x
   setup 1x4 1x4
      array [R3S L2N L1S R0N]

call "mix" a1 tag mix
            grand_is_inherited visible_fractions
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand roll_transparent]

call "swing and mix" a2
            grand_is_inherited visible_fractions
   seq swing []
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand]

call "trade the wave" plus tag tradethewave
   setup 1x4 1x4 restriction forbidden wave_only
      array [CR3S CR2S AL1S AL0S]

call "cross roll" c1 tag crossroll
   setup 1x4 1x4
      array [CR1S CR2S AL3S AL0S]
            alternate_definition [grand] c3x
   setup 1x6 1x6
      array [CR1S CR5S AL0S AL4S AL2S CR3S]
   setup 1x8 1x8
      array [CR1S CR2S CR7S AL0S AL5S AL6S AL3S CR4S]

call "run wild" c3x
            grand_is_inherited visible_fractions
   seq crossroll [inherit_grand]
   seq crossroll [inherit_grand]

call "slip" a2 tag slip
   setup 1x4 1x4
      array [ZM0N CR3S ZM2N AL1S]

call "_maybe grand slip" dontshow tag maybegrandslip
   setup 1x4 1x4
      array [ZM0N CR3S ZM2N AL1S]
            alternate_definition [grand] c3a
   setup 1x6 1x6
      array [ZM0N CR2S AL1S ZM3N AL5S CR4S]
   setup 1x8 1x8
      array [ZM0N CR3S CR6S AL1S ZM4N AL7S AL2S CR5S]

call "slide" a2
   setup 1x4 1x4
      array [1N 0N 3N 2N]

/* This is the "follow your neighbor and spread" type. */
call "spread" plus tag spread
   setup 1x4 1x4
      array [1N 0N 3N 2N]

/* This is the "heads star thru and spread" type. */
call "... and spread" plus
   setup 4x2 2x4 rotate
      array [M6W M7W M0W 0 0 M3W M4W M5W]

call "swing" a2 tag swing
   setup 1x4 1x4 restriction wave_only   /* See comment at spin chain the line. */
      array [CR1S AL0S AL3S CR2S]

call "slither" a2
   setup 1x4 1x4
      array [0N 3N 2N 1N]

call "swing/slip" dontshow tag swingslip
            left_means_mirror dont_use_in_resolve step_to_wave
   setup 1x4 1x4
      array [L3N L0S R1N R2S]

call "centers swing/slip" dontshow tag ctrsswingslip
            dont_use_in_resolve
   conc swingslip [] nullcall []

call "_right swing" dontshow tag right_swing
            left_means_mirror dont_use_in_resolve step_to_wave
   setup 1x4 1x4 restriction forbidden wave_only
      array [CR1S 0 0 CR2S]

call "_right 1quarter" dontshow tag right_1quarter
            left_means_mirror dont_use_in_resolve step_to_wave
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [CR0N 0 0 CR3N]

call "_right 3quarter" dontshow tag right_3quarter
            left_means_mirror dont_use_in_resolve step_to_wave
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [CR1S 0 0 CR2S]

call "_centers @2spin @3the windmill" dontshow tag ctrwindmill
            left_means_mirror dont_use_in_resolve
   seq swingslip [inherit_left or_anycall]
   seq cast_off_34 []

call "_outsides face @h" dontshow tag set_windmill_direction
            dont_use_in_resolve
   conc nullcall [] quarter_maybe []

call "_finish @2spin @3the windmill" dontshow tag finish_windmill
            left_means_mirror dont_use_in_resolve
   conc ctrwindmill [inherit_left] dblcirc [conc_demand_lines conc_force_lines]

call "@2spin @3the windmill, outsides @h" a2
            left_means_mirror
   seq set_windmill_direction []
   seq finish_windmill [inherit_left]

call "sock it to me" c2
   setup 1x4 1x4
      preds "Can't find an unambiguous socker."
         if socker_is_left [R2S L0S L3S L1S]
         if socker_is_right [0 R3S 0 R2S]

call "here comes the judge" c2
   setup 1x4 1x4
      preds "Can't find an unambiguous judge."
         if judge_is_right [R1S R3S L0S R2S]
         if judge_is_left [0 L0S 0 L1S]

call "partner tag" plus tag partnertag
   setup 1x2 1x2
      array [M1E M0W]

/* This call makes divide the ocean illegal from riggers. */
call "_partner tag by pairs" dontshow tag partnertagbypairs
   setup 2x2 2x2
      array [M1E M0W M3W M2E]
            alternate_definition [single] c3
   setup 1x2 1x2
      array [M1E M0W]

call "lockit" a1 tag lockit
   setup 1x4 1x4 rotate
      array [R0N R1N L0S L1S]
   setup dmd dmd rotate
      array [R0N 0 L0S 0]
   setup pmd dmd rotate
      array [0 R1N 0 L1S]
            alternate_definition [cross] c3x
   setup 1x4 1x4 rotate
      array [R1N R0N L1S L0S]
            alternate_definition [grand] c4
   setup 1x8 3x4 rotate
      array [R9N R8N R11N L8S L0S L1S L11S R1N]

call "_cross lockit" dontshow tag crosslockit
   setup 1x4 1x4 rotate
      array [R1N R0N L1S L0S]

call "fan the top" mainstream tag fanthetop
            step_to_wave left_means_touch_or_check
   setup 1x4 1x4 rotate
      array [CR0N CR3S AL0S AL3N]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR3S 0 AL3N]
            alternate_definition [grand] c3
   setup 1x8 3x4 rotate
      array [CR9N CR7S CR5S AL7N AL0S AL2N AL5N CR2S]
   setup 3x4 1x8 rotate
      array [CR0N CR3S AL3N AL0S 0 AL6N 0 AL5N CR5S 0 0 CR6S]

call "spin the top" mainstream tag spinthetop
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check grand_is_inherited visible_fractions finish_means_skip_first_part
   seq trade []
   seq fanthetop [inherit_grand]

call "reverse the top" c3
            step_to_wave left_means_touch_or_check grand_is_inherited visible_fractions
   seq fanthetop [inherit_grand]
   seq trade []

call "cross the top" c4
            step_to_wave left_means_touch_or_check
   setup 1x4 1x4 rotate
      array [0S 3N 0N 3S]

call "spin the yo-yo" c4
            step_to_wave left_means_touch_or_check
   seq armturn_34 []
   seq fanthetop []

call "@6 shove off" c3a
   partnermatrix use_selector stop_and_warn_on_tbone
      [M18N 16 M18N 16 M14N 16 M14N 16 L14S 16 L14S 16 R18S 16 R18S 16]

call "@6 1/2 shove off" c3a
   partnermatrix use_selector stop_and_warn_on_tbone
      [M17N 16 M17N 16 M15N 16 M15N 16 L15W 16 L15W 16 R17E 16 R17E 16]

call "@6 tow truck" c3x
   partnermatrix use_selector stop_and_warn_on_tbone
      [M18N 16 M18N 16 M14N 16 M14N 16 M14N 16 0 0 M18N 16]

call "@6 1/2 tow truck" c3x
   partnermatrix use_selector stop_and_warn_on_tbone
      [M17N 16 M17N 16 M15N 16 M15N 16 M15N 16 0 0 M17N 16]

call "@6 run the wheel" c3x
   partnermatrix use_selector stop_and_warn_on_tbone
      [R18W 16 R18W 16 L14E 16 L14E 16 R16W 14 R16W 14 L16E 14 L16E 14]

call "bridge the gap" c4a
   partnermatrix tbone_is_ok
      [M14N 18 M14N 18 L14S 18 L14S 18 0 0 0 0]

call "@6 right anchor 1/4" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 R18E 18 R18E 18 R16E 16 R16E 16]

call "@6 left anchor 1/4" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 L16W 16 L16W 16 L14W 18 L14W 18]

call "@6 right anchor 1/2" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 R20S 16 R20S 16 R16S 16 R16S 16]

call "@6 left anchor 1/2" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 L16S 16 L16S 16 L12S 16 L12S 16]

call "@6 right anchor 3/4" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 R18W 14 R18W 14 R16W 16 R16W 16]

call "@6 left anchor 3/4" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 L16E 16 L16E 16 L14E 14 L14E 14]

call "@6 quarter right" mainstream
            dont_use_in_resolve
   matrix [R16E 16 R16E 16]

call "@6 quarter left" mainstream
            dont_use_in_resolve
   matrix [L16W 16 L16W 16]

call "@6 U-turn back" mainstream tag some_utb
            dont_use_in_resolve
   matrix [16S 16 16S 16]

call "@6 press ahead" mainstream
            dont_use_in_resolve
   matrix [M16N 18 M16N 18]

call "@6 press right" mainstream
            dont_use_in_resolve
   matrix [M18N 18 M18N 18]

call "@6 press left" mainstream
            dont_use_in_resolve
   matrix [M14N 18 M14N 18]

call "@6 1/2 press ahead" mainstream
            dont_use_in_resolve
   matrix [M16N 17 M16N 17]

call "@6 truck" c2
            dont_use_in_resolve reverse_means_mirror
   matrix [M14N 16 M18N 16]

call "@6 1/2 truck" c2
            dont_use_in_resolve reverse_means_mirror
   matrix [M15N 16 M17N 16]

call "@6 reverse truck" c2
            dont_use_in_resolve
   matrix [M18N 16 M14N 16]

call "@6 1/2 reverse truck" c2
            dont_use_in_resolve
   matrix [M17N 16 M15N 16]

call "@6 E.R.A." c4
            dont_use_in_resolve
   matrix [M16N 14 M16N 18]

call "@6 1/2 E.R.A." c4
            dont_use_in_resolve
   matrix [M16N 15 M16N 17]

call "@6 M.C.P." c4
            dont_use_in_resolve
   matrix [M16N 18 M16N 14]

call "@6 1/2 M.C.P." c4
            dont_use_in_resolve
   matrix [M16N 17 M16N 15]

call "@6 leap frog" c4
            dont_use_in_resolve
   matrix [M16N 20 M16N 20]

call "@6 right loop 1" c2
            dont_use_in_resolve
   matrix [R20S 16 R20S 16]

call "@6 right loop 2" c2
            dont_use_in_resolve
   matrix [R22S 16 R22S 16]

call "@6 right loop 3" c2
            dont_use_in_resolve
   matrix [R24S 16 R24S 16]

call "@6 left loop 1" c2
            dont_use_in_resolve
   matrix [L12S 16 L12S 16]

call "@6 left loop 2" c2
            dont_use_in_resolve
   matrix [L10S 16 L10S 16]

call "@6 left loop 3" c2
            dont_use_in_resolve
   matrix [L8S 16 L8S 16]

call "@6 curve right" c3x
            dont_use_in_resolve
   matrix [R18E 18 R18E 18]

call "@6 curve left" c3x
            dont_use_in_resolve
   matrix [L14W 18 L14W 18]

call "@6 roll" plus
            dont_use_in_resolve
   rolldefine

call "roll" plus tag roll
            dont_use_in_resolve
   rolldefine

call "hinge" mainstream tag hinge
            left_means_mirror
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0N AL0S]
         if always [0 AL1S]

call "shazam" c2
            visible_fractions
   /* We used to make this a right-hand-only call, by the principle of maximum
      conservatism.  We don't any longer. */
   seq armturn_14 [allow_forced_mod]
   seq uturnback [allow_forced_mod]

/* Used only for right-hand-only version of shazam.
call "right arm turn 1/4" dontshow tag armturn_14_r
            dont_use_in_resolve left_means_mirror
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [CR0N 0]
*/

call "arm turn 1/4" dontshow tag armturn_14
            dont_use_in_resolve 12_16_matrix_means_split
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [CR0N AL0S]

call "arm turn 3/4" dontshow tag armturn_34
            dont_use_in_resolve 12_16_matrix_means_split
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [CR1S AL1N]

call "arm turn @b" dontshow tag armturn_n4
            dont_use_in_resolve neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_14 [inherit_12_matrix inherit_16_matrix repeat_n]

call "_centers arm turn @b / ends turn back" dontshow tag ctrarmturn_n4_utb
            dont_use_in_resolve neednumber
   singleconc armturn_n4 [] uturnback []

call "_centers arm turn 1/4 / ends turn back" dontshow tag ctrarmturn_14_utb
            dont_use_in_resolve
   singleconc armturn_14 [] uturnback []

call "cast off 1/4" dontshow tag cast_off_14
            dont_use_in_resolve parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if lines_miniwave [CR0N AL0S]
   setup 1x4 2x2
      preds "?"
         if lines_miniwave [CR0E AL0W AL1W CR1E]
         if lines_couple   [AL3W AL0W CR2E CR1E]
         if always         [0    AL0W 0    CR1E]
   setup 1x6 2x3
      preds "?"
         if lines_miniwave [CR0E AL0W CR1E AL2W CR2E AL1W]
         if lines_couple   [AL5W AL0W 0    CR3E CR2E 0]
         if always         [0    AL0W 0    0    CR2E 0]

call "cast off 1/2" dontshow tag cast_off_12
            dont_use_in_resolve parallel_conc_end
   setup 1x2 1x2
      preds "Need to be in miniwave or line of 4."
         if lines_miniwave [CR1S AL0S]
   setup 1x4 1x4
      preds "?"
         if lines_miniwave [CR1S AL0S AL3S CR2S]
         if lines_couple   [AL1S AL0S CR3S CR2S]
         if always         [0    AL0S 0    CR2S]

call "cast off 3/4" dontshow tag cast_off_34
            dont_use_in_resolve parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if lines_miniwave [CR1S AL1N]
   setup 1x4 2x2
      preds "?"
         if lines_miniwave [CR3W AL3E AL2E CR2W]
         if lines_couple   [AL0E AL3E CR1W CR2W]
         if always         [0    AL3E 0    CR2W]
   setup 1x6 2x3
      preds "?"
         if lines_miniwave [CR5W AL5E CR4W AL3E CR3W AL4E]
         if lines_couple   [AL0E AL5E 0    CR2W CR3W 0]
         if always         [0    AL5E 0    0    CR3W 0]
               alternate_definition [single] c4       /* For divide the ocean */
   setup 1x2 1x2
      array [AL0E CR1W]
               alternate_definition [interlocked] c3  /* For interlocked counter */
   setup 1x4 2x2
      preds "?"
         if x14_once_rem_miniwave [CR3W CR2W AL2E AL3E]
         if x14_once_rem_couple   [AL0E CR2W CR1W AL3E]
         if always                [0    CR2W 0    AL3E]

/* Use this only after setting up the roll direction from initial cast.  Not for general use. */
call "_continue to cast off" dontshow tag continue_cast
            dont_use_in_resolve parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Can't figure out which way to cast."
         if roll_is_cw  [CR0N CR1N]
         if roll_is_ccw [AL1S AL0S]

call "cast off @b" mainstream tag cast_off_n4
            parallel_conc_end neednumber diamond_is_legal
   seq cast_off_14 [inherit_diamond]
   seq continue_cast [repeat_nm1 inherit_diamond]

call "_cast off 1/4 and roll" dontshow tag cast_1_4_roll
            dont_use_in_resolve parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if lines_miniwave [CR0E AL0E]
   setup 1x4 2x2
      preds "?"
         if lines_miniwave [CR0S AL0S AL1S CR1S]
         if lines_couple   [AL3S AL0S CR2S CR1S]
         if always         [0    AL0S 0    CR1S]

call "_hinge and then trade" dontshow tag hinge_then_trade
            dont_use_in_resolve left_means_mirror
   seq hinge [inherit_left]
   seq trade []

call "snake" c3x
   setup 1x2 1x2 rotate
      array [C1N A1S]

call "patch the @6" c3a
   /* Selector identities *do not* get re-evaluated between parts of a sequential
      call, which makes this work.  Compare wave the <anyone>. */
   seq hinge [allow_forced_mod]
   seq some_utb []

call "tap the @6" c4a
            visible_fractions finish_means_skip_first_part
   seq passthru []
   seq some_utb []
   seq boxctrrot []
   seq roll []

call "@6 bypass" c4a
   /* By giving a 2x2 def'n, we allow roll, since they know which way
      to turn back.  Also, this allows T-bone boxes. */
   setup 2x2 2x2
      preds "Can't tell who is designated."
         if select [0 0 M1N M0N]
         if unselect [0 0 L1S R0S]
   setup 2x1 1x2
      preds "Can't tell who is designated."
         if select [1N 0]
         if unselect [1S 0]

call "_the_wave" dontshow tag the_wave
            dont_use_in_resolve
   setup 2x4 2x4 rotate restriction wave_only
      array [7W 7W 0W 0W 1W 1W 6W 6W]

call "@0 the wave" c3x
            dont_use_in_resolve
   seq the_wave []
   seq nullcall [mandatory_anycall]

call "trade" mainstream tag trade
            12_16_matrix_means_split
   setup 1x2 1x2
      array [CR1S AL0S]

call "california twirl" mainstream
   setup 1x2 1x2 restriction forbidden couples_only
      preds "Unknown sex."
         if boyp [CR1S 0]
         if girlp [0 AL0S]

call "_maybe single trade" dontshow tag maybesingletrade
            dont_use_in_resolve
   setup 1x2 1x2
      array [CR1S AL0S]
            alternate_definition [single] a2
   setup 1x1 1x1
      array [0S]

call "@6 trade" mainstream
   setup 1x8 1x8
      preds "Sorry, can't handle complex cases yet."
         if unselect [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
/*    Need to finish this.  It is difficult, and needs many predicates. */
         if select_near_select [CR1S AL0S CR3S AL2S CR5S AL4S CR7S AL6S]
/*
         if once_rem_from_select [CR3S CR2S AL1S AL0S CR7S CR6S AL5S AL4S]
         if conc_from_select [CR2S CR3S AL0S AL1S CR6S CR7S AL4S AL5S]
*/
   setup 1x4 1x4
      preds "Can't find anyone to trade with."
         if unselect [ZM0N ZM1N ZM2N ZM3N]
         if select_near_select [CR1S AL0S CR3S AL2S]
         if once_rem_from_select [CR3S CR2S AL1S AL0S]
         if conc_from_select [CR2S CR3S AL0S AL1S]
   setup 1x2 1x2
      preds "Can't find anyone to trade with."
         if select_near_select [CR1S AL0S]
         if unselect_near_unselect [ZM0N ZM1N]

call "trade and roll" plus tag trade_and_roll
   setup 1x2 1x2
      array [CR1W AL0E]

call "U-turn back" mainstream tag uturnback
   setup 1x2 1x2
      array [CR0S AL1S]
   setup 1x1 1x1
      array [0S]

call "@gquarter @eright@f" dontshow tag quarter_right
            left_means_mirror
   setup 1x1 1x1
      array [CR0E]

call "quarter left" dontshow tag quarter_left
   setup 1x1 1x1
      array [AL0W]

/* This one doesn't allow "no direction". */
call "quarter @h" mainstream
   setup 1x2 1x2
      preds "Illegal direction."
         if rightp [CR0E CR1E]
         if leftp [AL0W AL1W]
         if inp [CR0E AL1W]
         if outp [AL0W CR1E]
   setup 1x1 1x1
      preds "Direction must be right or left."
         if rightp [CR0E]
         if leftp [AL0W]

/* This one allows "no direction". */
call "_maybe quarter @h" dontshow tag quarter_maybe
            dont_use_in_resolve
   setup 1x2 1x2
      preds "Direction must be right, left, in, or out."
         if rightp [CR0E CR1E]
         if leftp [AL0W AL1W]
         if inp [CR0E AL1W]
         if outp [AL0W CR1E]
         if no_dir_p [ZM0N ZM1N]
   setup dmd dmd    /* Need these for hinge and circulate. */
      preds "Direction must be right, left, in, or out."
         if rightp [CR0E CR1E CR2E CR3E]
         if leftp [AL0W AL1W AL2W AL3W]
         if inp [CR0E 0 AL2W 0]
         if outp [AL0W 0 CR2E 0]
         if no_dir_p [ZM0N ZM1N ZM2N ZM3N]
   setup pmd dmd
      preds "Direction must be right, left, in, or out."
         if rightp [CR0E CR1E CR2E CR3E]
         if leftp [AL0W AL1W AL2W AL3W]
         if inp [0 CR1E 0 AL3W]
         if outp [0 AL1W 0 CR3E]
         if no_dir_p [ZM0N ZM1N ZM2N ZM3N]
   setup 1x1 1x1
      preds "Direction must be right or left."
         if rightp [CR0E]
         if leftp [AL0W]
         if no_dir_p [ZM0N]

/* This is the call to use after "tag the line".  It is also the second
   part of "pass in/out". */
/* This one allows "no direction".  In many cases that's unesthetic, but it is needed
   for "tunnel thru". */
call "face @h" mainstream tag face_dir
   setup 2x2 2x2
      preds "Illegal direction."
         if rightp   [CR0E CR1E CR2E CR3E]
         if leftp    [AL0W AL1W AL2W AL3W]
         if inp      [CR0E AL1W AL2W CR3E]
         if outp     [AL0W CR1E CR2E AL3W]
         if zigzigp  [CR0E CR1E CR2E CR3E]
         if zagzagp  [AL0W AL1W AL2W AL3W]
         if zigzagp  [CR0E CR1E AL2W AL3W]
         if zagzigp  [AL0W AL1W CR2E CR3E]
         if no_dir_p [ZM0N ZM1N ZM2N ZM3N]
   setup 1x2 1x2
      preds "Direction must be right, left, in, or out."
         if rightp   [CR0E CR1E]
         if leftp    [AL0W AL1W]
         if inp      [CR0E AL1W]
         if outp     [AL0W CR1E]
         if no_dir_p [ZM0N ZM1N]
   setup 1x4 1x4
      preds "Direction must be right, left, in, or out."
         if rightp   [CR0E CR1E CR2E CR3E]
         if leftp    [AL0W AL1W AL2W AL3W]
         if inp      [CR0E CR1E AL2W AL3W]
         if outp     [AL0W AL1W CR2E CR3E]
         if no_dir_p [ZM0N ZM1N ZM2N ZM3N]
   setup 2x1 1x2
      preds "Illegal direction."
         if rightp   [CR0E CR1E]
         if leftp    [AL0W AL1W]
         if zigzigp  [CR0E CR1E]
         if zagzagp  [AL0W AL1W]
         if zigzagp  [AL0W CR1E]
         if zagzigp  [CR0E AL1W]
         if no_dir_p [ZM0N ZM1N]
   setup 1x1 1x1
      preds "Direction must be right or left."
         if rightp   [CR0E]
         if leftp    [AL0W]
         if no_dir_p [ZM0N]

call "pass @h" a1
   seq passthru []
   seq face_dir []

call "_pass in" dontshow tag pass_in
   setup 2x4 2x4
      array [0 0 0 0 AL3W AL2W CR1E CR0E]
   setup 2x2 2x2
      array [0 0 AL1W CR0E]

call "_pass out" dontshow tag pass_out
   setup 2x4 2x4
      array [0 0 0 0 CR3E CR2E AL1W AL0W]
   setup 2x2 2x2
      array [0 0 CR1E AL0W]

call "_quarter in" dontshow tag quarterin
   setup 1x2 1x2
      array [CR0E AL1W]

call "roll away" mainstream
   setup 1x2 1x2 restriction forbidden couples_only
      array [ZM1N AL0N]

call "8 roll away with a half sashay" c4
   setup 1x2 1x2 restriction wave_only
      array [CR1N AL0N]

call "put centers in" mainstream tag centersin
   setup 4x2 2x4 rotate
      array [7W 0 1W 0W 3W 2W 0 4W]
   setup 2x4 2x4 rotate
      array [7W 0 0 0W 3W 0 0 4W]

call "put centers out" c3x
   setup 4x2 2x4 rotate
      array [6W 0 0W 1W 2W 3W 0 5W]
   setup 2x4 2x4 rotate
      array [6W 0 0 1W 2W 0 0 5W]

call "split the outsides, around 1 to a line" mainstream
   setup 4x2 2x4 rotate
      array [ZM6W 0 AL0E ZM1W ZM2W CR3E 0 ZM5W]

call "separate, around 1 to a line" mainstream
   setup 4x2 2x4 rotate
      array [ZM7W 0 0 ZM0W ZM3W 0 0 ZM4W]
   setup 2x4 2x4 rotate
      array [0 AL6N CR1S 0 0 0 0 0]

call "separate, around 2 to a line" mainstream
   setup 4x2 2x4 rotate
      array [ZM6W 0 0 ZM1W ZM2W 0 0 ZM5W]
   setup 2x4 2x4 rotate
      array [0 AL4N CR3S 0 0 0 0 0]

call "pass thru" mainstream tag passthru
            rear_back_from_r_wave no_cutting_through
   setup 2x1 1x2
      array [ZM1N 0]
   /* We put in this next definition to allow it from T-boned boxes
      (which would otherwise get the "People are not working with each other
      in a consistent way" error).  The restriction will make it give a
      "do your part" warning when used in this way. */
   setup 2x2 2x2 restriction not_tboned
      array [0 0 ZM1N ZM0N]

call "touch" mainstream tag touch
            /* The "rear back" property is required for square thru, etc. */
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2 rotate
      array [ZM0W 0]

call "touch 1/4" dontshow tag touch_1_4
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2
      array [CR1E 0]

call "touch 3/4" dontshow tag touch_3_4
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2
      array [CR0W 0]

call "touch @b" mainstream
            rear_back_from_r_wave neednumber diamond_is_legal left_means_mirror
   seq touch [inherit_left inherit_diamond]
   seq armturn_14 [repeat_n inherit_diamond]

call "_leftable touch" dontshow tag lft_touch
            left_means_mirror
   setup 2x1 1x2 rotate
      array [0W 0]

call "_leftable touch @b" dontshow tag lft_touch_n_4
            dont_use_in_resolve neednumber left_means_mirror
   seq lft_touch [inherit_left]
   seq armturn_14 [repeat_n]

call "_face and maybe touch" dontshow tag facenmaybetouch
   seq quarterin []
   seq touch [or_anycall]

call "_hinge and U-turn away" dontshow tag hingnturnaway
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [L0S R0N]
         if always [0 L1N]

call "soft @2touch@3" c3x
   singlecrossconc facenmaybetouch [] hingnturnaway []

call "box the gnat" mainstream       /* Beware!!!  This is a problematical and easily abused call. */
            rear_back_from_r_wave
   setup 2x1 1x2
      array [1S 0]

call "single circle to a wave" plus  /* We need this as a standalone call, */
            reverse_means_mirror     /* because circle to a wave is c2. */
   setup 2x1 1x2 rotate
      array [C1E 0]

call "circle to a 2-faced line" c3x
            reverse_means_mirror
   setup 2x2 1x4
      array [0 0 C3S C2S]

call "single circle to a line" c4
            reverse_means_mirror
   setup 2x1 1x2 rotate
      preds "Unknown sex."
         if boyp [R1E 0]
         if girlp [R1W 0]

call "pitch @h" c3
   setup 2x1 1x2
      preds "Direction must be right or left."
         if rightp   [CR1E CR0W]
         if leftp    [AL1W CR0W]
         if no_dir_p [ZM1N CR0W]
   setup 2x2 2x2
      preds "Direction must be given."
         if rightp   [CR3W CR2W CR1E CR0E]
         if leftp    [CR3W CR2W AL1W AL0W]
         if inp      [CR3W CR2W AL1W CR0E]
         if outp     [CR3W CR2W CR1E AL0W]
         if no_dir_p [CR3W CR2W ZM1N ZM0N]

call "left pitch @h" c3
   setup 2x1 1x2
      preds "Direction must be right or left."
         if rightp   [CR1E AL0E]
         if leftp    [AL1W AL0E]
         if no_dir_p [ZM1N AL0E]
   setup 2x2 2x2
      preds "Direction must be given."
         if rightp   [AL3E AL2E CR1E CR0E]
         if leftp    [AL3E AL2E AL1W AL0W]
         if inp      [AL3E AL2E AL1W CR0E]
         if outp     [AL3E AL2E CR1E AL0W]
         if no_dir_p [AL3E AL2E ZM1N ZM0N]

call "@gleads roll @eright@f to a wave" a1 tag leadsrollright
            left_means_mirror
   setup 2x1 1x2 rotate
      preds "???"
         if columns_tandem [M0W R1E]
         if always         [0   R1E]

call "@gleads @e@f latch on" c3a
            left_means_mirror visible_fractions
   seq leadsrollright [inherit_left]
   seq hinge []

call "slide thru" mainstream tag slidethru
            rear_back_from_r_wave
   setup 2x1 1x2
      preds "Unknown sex."
         if boyp [CR1E 0]
         if girlp [AL1W 0]

call "half breed thru" a1
            rear_back_from_r_wave
   setup 2x2 2x2 restriction not_tboned
      preds "Unknown sex."
         if boyp [0 0 L1S L1S]
         if girlp [0 0 L0S R0S]

call "cross breed thru" c3x
            rear_back_from_r_wave
   setup 2x2 2x2
      preds "Unknown sex."
         if boyp [0 0 R1E R1E]
         if girlp [0 0 L0W L0W]

call "star thru" mainstream tag star_thru
   setup 2x1 1x2 restriction forbidden opposite_sex
      preds "Unknown sex."
         if boyp [CR1E 0]
         if girlp [AL1W 0]

/* Is this a real call these days? */
call "_left star thru" dontshow tag left_star_thru
   setup 2x1 1x2 restriction forbidden opposite_sex
      preds "Unknown sex."
         if boyp [AL1W 0]
         if girlp [CR1E 0]

call "double star thru" a1 tag dblstarthru
            visible_fractions
   seq star_thru  []
   seq left_star_thru []

call "_centers double star thru" dontshow tag ctrs_dbl_star_thru
   conc dblstarthru [] nullcall [conc_demand_columns]

call "triple star thru" a1
   seq ctrs_dbl_star_thru []
   seq star_thru []

call "wheel and deal" mainstream tag wheelanddeal
            left_means_mirror
   setup 1x4 2x2 restriction forbidden couples_only
      preds "???"
         if 1x4_wheel_and_deal [CR1S CR0S AL0S AL1S]   /* 2FL, or beau side of 1FL */
         if always             [0    0    AL3S AL2S]   /* belle side of 1FL */
            alternate_definition [single] a2
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0E AL0E]
         if always [0 AL1E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 restriction forbidden 3x3couples_only
      preds "???"
         if 1x6_wheel_and_deal [CR2S CR1S CR0S AL0S AL1S AL2S]   /* 2FL, or beau side of 1FL */
         if always             [0    0    0    AL5S AL4S AL3S]   /* belle side of 1FL */
            alternate_definition [4x4] c4
   setup 1x8 2x4 restriction forbidden 4x4couples_only
      preds "???"
         if 1x8_wheel_and_deal [CR3S CR2S CR0S CR1S AL0S AL1S AL3S AL2S]   /* 2FL, or beau side of 1FL */
         if always             [0    0    0    0    AL7S AL6S AL4S AL5S]   /* belle side of 1FL */

call "two-faced wheel and deal" dontshow tag 2facedwheelanddeal
   setup 1x4 2x2 restriction forbidden couples_only
      array [CR1S CR0S AL0S AL1S]
            alternate_definition [single] a2
   setup 1x2 1x2 rotate
      array [CR0E AL0E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 restriction forbidden 3x3couples_only
      array [CR2S CR1S CR0S AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 1x8 2x4 restriction forbidden 4x4couples_only
      array [CR3S CR2S CR0S CR1S AL0S AL1S AL3S AL2S]

call "turn and deal" a1 tag turnanddeal
            left_means_mirror
   setup 1x4 2x2 restriction awkward_centers
      array [CR0S CR1S AL2S AL3S]
            alternate_definition [single] c3x
   setup 1x2 1x2 rotate restriction awkward_centers
      array [CR0E AL1E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 restriction awkward_centers
      array [CR0S CR1S CR2S AL3S AL4S AL5S]
            alternate_definition [4x4] c4
   setup 1x8 2x4 restriction awkward_centers
      array [CR0S CR1S CR3S CR2S AL4S AL5S AL7S AL6S]

call "_natural turn and deal" dontshow tag natturnanddeal
            left_means_mirror
   setup 1x4 2x2 restriction forbidden couples_only
      preds "???"
         if 1x4_wheel_and_deal [CR0S CR1S AL1S AL0S]   /* 2FL, or beau side of 1FL */
         if always             [0    0    AL2S AL3S]   /* belle side of 1FL */
            alternate_definition [single] c3x
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0E AL0E]
         if always [0 AL1E]

call "wheel and spread" plus
            left_means_mirror
   setup 1x4 1x4 restriction forbidden 1fl_only
      array [3S 1S 0S 2S]
   setup 2x3 2x3 restriction forbidden 1fl_only
      array [1S 2S 0S 5S 3S 4S]

call "single wheel" a2 tag single_wheel
            left_means_mirror
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0E AL0E]
         if always [0 AL1E]

call "wheel to a line" c3x tag wheeltoline
            reverse_means_mirror
   setup 2x2 1x4 restriction couples_only
      array [CR2S CR3S AL0S AL1S]
            alternate_definition [single] c3x
   setup 2x1 1x2 rotate
      array [AL0E CR1E]
            alternate_definition [3x3] c4
   setup 2x3 1x6 restriction forbidden 1fl_only
      array [CR3S CR4S CR5S AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 2x4 1x8 restriction forbidden 1fl_only
      array [CR4S CR5S CR7S CR6S AL0S AL1S AL3S AL2S]

call "turn to a line" c2 tag turntoline
            reverse_means_mirror
   setup 2x2 1x4
      array [CR3S CR2S AL1S AL0S]
            alternate_definition [single] c3x
   setup 2x1 1x2 rotate
      array [AL0E CR1E]
            alternate_definition [3x3] c4
   setup 2x3 1x6
      array [CR5S CR4S CR3S AL2S AL1S AL0S]
            alternate_definition [4x4] c4
   setup 2x4 1x8
      array [CR6S CR7S CR5S CR4S AL2S AL3S AL1S AL0S]

call "triple wheel" c3x
            reverse_means_mirror single_is_inherited 3x3_is_inherited 4x4_is_inherited visible_fractions finish_means_skip_first_part
   seq wheeltoline  [inherit_reverse inherit_single inherit_3x3 inherit_4x4]
   seq wheelanddeal [inherit_left    inherit_single inherit_3x3 inherit_4x4]
   seq wheeltoline  [inherit_reverse inherit_single inherit_3x3 inherit_4x4]

call "triple turn" c4
            reverse_means_mirror single_is_inherited 3x3_is_inherited 4x4_is_inherited visible_fractions finish_means_skip_first_part
   seq turntoline  [inherit_reverse inherit_single inherit_3x3 inherit_4x4]
   seq turnanddeal [inherit_left    inherit_single inherit_3x3 inherit_4x4]
   seq turntoline  [inherit_reverse inherit_single inherit_3x3 inherit_4x4]

call "zig zag" a2
   setup 2x2 2x2      /* This entry makes it legal from a T-boned 2x2. */
      array [CR0E CR1E AL2W AL3W]
   setup 2x1 1x2
      array [AL0W CR1E]

call "zag zig" a2
   setup 2x2 2x2      /* This entry makes it legal from a T-boned 2x2. */
      array [AL0W AL1W CR2E CR3E]
   setup 2x1 1x2
      array [CR0E AL1W]

call "dixie chain" c4
   setup 4x1 1x4
      array [M3N M2N 0 0]

call "double pass thru" mainstream
            rear_back_from_qtag
   setup 4x1 1x4
      array [M3N M2N 0 0]

call "@gstrut @eright@f" c3
            left_means_mirror
   setup 4x2 1x8 rotate
      array [ZM6W CR7E 0 0 0 0 CR4E ZM5W]
            alternate_definition [single] c3
   setup 4x1 1x4 rotate
      array [ZM3W CR2E 0 0]

call "pass and roll" a2
            rear_back_from_r_wave left_means_mirror
   setup 4x1 2x2
      array [CR0N 0 0 CM3S]

call "ah so" c1
   setup 1x4 2x2 restriction wave_only
      array [CR1S AL3S AL0S CR2S]

call "1/4 tag" plus
            left_means_mirror
   setup 1x4 dmd restriction awkward_centers
      array [0E 1E 2W 3W]

call "@c1/2 @dtag" mainstream tag halftag
            left_means_mirror is_tag_call
   setup 1x4 2x2 restriction awkward_centers
      array [C0E C1E A2W A3W]

call "3/4 tag" plus
            left_means_mirror
   setup 1x4 dmd restriction awkward_centers
      array [C1E C2E A3W A0W]

call "tag the line" mainstream tag tagtheline
            left_means_mirror
   setup 1x4 1x4 restriction awkward_centers
      array [C3E C2E A1W A0W]

call "snap the 1/4 tag" c4
            left_means_mirror
   setup 1x4 dmd
      array [1E 0E 3W 2W]

call "snap the @c1/2 @dtag" c4
            left_means_mirror is_tag_call
   setup 1x4 2x2
      array [1E 0E 3W 2W]

call "snap the 3/4 tag" c4
            left_means_mirror
   setup 1x4 dmd
      array [2E 1E 0W 3W]

call "snap the tag" c4
            left_means_mirror
   setup 1x4 1x4
      array [2E 3E 0W 1W]

call "@i1/4 @j cross @lflip" c1
   setup 1x4 dmd restriction forbidden wave_only
      array [1E 0E 1W 2W]
            alternate_definition [cross] c3
   setup 1x4 dmd restriction forbidden 2fl_only
      array [1E 2W 1W 0E]

call "@i@c1/2 @d@j cross @lflip" c1 tag half_flip
            is_tag_call
   setup 1x4 2x2 restriction forbidden wave_only
      array [C1E A3E A0W C2W]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [C1E C2W A0W A3E]

call "@i3/4 @j cross @lflip" c1
   setup 1x4 dmd restriction forbidden wave_only
      array [2E 3E 0W 3W]
            alternate_definition [cross] c3
   setup 1x4 dmd restriction forbidden 2fl_only
      array [2E 3W 0W 3E]

call "flip the line" c1
   setup 1x4 1x4 restriction forbidden wave_only
      array [2E 3E 0W 1W]
            alternate_definition [cross] c3
   setup 1x4 1x4 restriction forbidden 2fl_only
      array [2E 1W 0W 3E]

call "vertical 0 tag" dontshow tag vertical0tag
            dont_use_in_resolve left_means_mirror
   setup 2x2 1x4 rotate restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [0E 1E 3W 2W]
         if vert2 [0 0E 0 3W]

call "vertical @0" c2
            dont_use_in_resolve left_means_mirror
   seq vertical0tag [inherit_left]
   seq nullcall [mandatory_anycall]

call "vertical 1/4 tag" c1
            left_means_mirror
   setup 2x2 dmd rotate restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C0E A1E Z3W Z2W]
         if vert2 [0 A0E 0 Z3W]

call "vertical @c1/2 @dtag" c1 tag verticalhalftag
            left_means_mirror is_tag_call
   setup 2x2 2x2 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C1S A2S Z0N Z3N]
         if vert2 [0 A1S 0 Z0N]
            alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [ZM0W 1E]

/* This call does the "vertical" the normal way, and only
   does the half-tag part passing left shoulders.  It is
   not the same as "left vertical half tag", which is a complete
   mirror image call, and is available above.  We might like
   to have a call that does a "left vertical" followed by a
   right-shoulder pass, but the nomenclature is very murky, and
   we can't really implement it correctly until the "left pitch right"
   issue is resolved.  So we don't allow the "left" modifier on this
   call.  Furthermore, we mark it c2, since it is esoteric.  This is
   really only useful for "divide the sea", for which its properties
   are just right. */
call "vertical left 1/2 tag" c2 tag verticallefthalftag
            dont_use_in_resolve is_tag_call
   setup 2x2 2x2 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C0S A3S Z1N Z2N]
         if vert2 [0 A0S 0 Z1N]
             alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [ZM1W 0E]

call "vertical turn and deal" c3x
            left_means_mirror
   setup 2x2 2x2 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [CR1W AL2E ZM0N ZM3N]
         if vert2 [0 AL1E 0 ZM0N]

call "vertical 3/4 tag" c1
            left_means_mirror
   setup 2x2 dmd rotate restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C1E A2E Z0W Z3W]
         if vert2 [0 A1E 0 Z0W]

call "vertical tag" c1 tag verticaltag
            left_means_mirror
   setup 2x2 1x4 rotate restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C3E A2E Z0W Z1W]
         if vert2 [0 A3E 0 Z0W]
            alternate_definition [single] c4
   setup 2x1 1x2
      array [ZM1N 0S]

call "tag the star 1/4" c4a
            left_means_mirror
   setup 2x2 dmd rotate restriction forbidden not_tboned
      array [0 0 0E 1E]

call "tag the star@c 1/2@d" c4a
            left_means_mirror is_tag_call
   setup 2x2 2x2 restriction forbidden not_tboned
      array [0 0 1S 2S]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [2S 3S 0 0]

call "tag the star 3/4" c4a
            left_means_mirror
   setup 2x2 dmd rotate restriction forbidden not_tboned
      array [0 0 1E 2E]

call "tag the star" c4a
            left_means_mirror
   setup 2x2 1x4 rotate restriction forbidden not_tboned
      array [0 0 3E 2E]
            alternate_definition [singlefile] c4
   setup 4x1 1x4
      array [1S 0S 0 0]

call "loop and 1/4 tag" c3
            left_means_mirror
   setup 2x2 dmd restriction peelable_box
      array [1E 3W 2W 0E]
            alternate_definition [cross] c4a
   setup 2x2 dmd restriction peelable_box
      array [3W 1E 0E 2W]

call "loop and @c1/2 @dtag" c3
            left_means_mirror is_tag_call
   setup 2x2 2x2 restriction peelable_box
      array [1E 3W 2W 0E]
            alternate_definition [cross] c4a
   setup 2x2 2x2 restriction peelable_box
      array [3W 1E 0E 2W]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate restriction peelable_box
      array [0N 1N 2N 5S 4S 3S]
            alternate_definition [cross 3x3] c4
   setup 3x2 2x3 rotate restriction peelable_box
      array [3S 4S 5S 2N 1N 0N]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate restriction peelable_box
      array [0N 1N 2N 3N 7S 6S 5S 4S]
            alternate_definition [cross 4x4] c4
   setup 4x2 2x4 rotate restriction peelable_box
      array [4S 5S 6S 7S 3N 2N 1N 0N]

call "loop and 3/4 tag" c3
            left_means_mirror
   setup 2x2 dmd restriction peelable_box
      array [2E 0W 3W 1E]
            alternate_definition [cross] c4a
   setup 2x2 dmd restriction peelable_box
      array [0W 2E 1E 3W]

call "loop and tag" c3
            left_means_mirror
   setup 2x2 1x4 restriction peelable_box
      array [2E 0W 1W 3E]
            alternate_definition [cross] c4a
   setup 2x2 1x4 restriction peelable_box
      array [0W 2E 3E 1W]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [5N 4N 3N 0S 1S 2S]
            alternate_definition [cross 3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [2S 1S 0S 3N 4N 5N]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [6N 7N 5N 4N 0S 1S 3S 2S]
            alternate_definition [cross 4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [2S 3S 1S 0S 4N 5N 7N 6N]

call "@i1/4 @j cross @linvert" c2
   setup 4x2 3x4 rotate restriction forbidden wave_only
      array [M8W M11W M1W L10E R4E M2W M5W M7W]
            alternate_definition [cross] c2
   setup 4x2 3x4 rotate restriction forbidden wave_only
      array [M8W M11W M1W R4E L10E M2W M5W M7W]

call "@i1/3 @j cross @linvert" c2
   setup 3x2 short6 restriction forbidden wave_only
      array [M0N M2N L1S R4S M3N M5N]
            alternate_definition [cross] c2
   setup 3x2 short6 restriction forbidden wave_only
      array [M0N M2N R4S L1S M3N M5N]

call "@i@c1/2 @d@j cross @linvert" c2
            is_tag_call    /* !!!! Actually, cross invert shouldn't be. */
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [M6W M1W L0E L7E R4E R3E M2W M5W]
            alternate_definition [cross] c2
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [M6W M1W R3E R4E L7E L0E M2W M5W]

call "@i2/3 @j cross @linvert" c2 tag invert_2_3
   setup 3x2 bone6 rotate restriction forbidden wave_only
      array [M5W L0E L4E R3E R1E M2W]
            alternate_definition [cross] c2
   setup 3x2 bone6 rotate restriction forbidden wave_only
      array [M5W R1E R3E L4E L0E M2W]

call "@i3/4 @j cross @linvert" c2
   setup 4x2 3x4 rotate restriction forbidden wave_only
      array [M11W L0E L10E L9E R6E R4E R3E M5W]
            alternate_definition [cross] c2
   setup 4x2 3x4 rotate restriction forbidden wave_only
      array [M11W R3E R4E R6E L9E L10E L0E M5W]

call "invert the column" c2
   setup 4x2 2x4 restriction forbidden wave_only
      array [L3S L2S L1S L0S R7S R6S R5S R4S]
   setup 3x2 2x3 restriction forbidden wave_only
      array [L2S L1S L0S R5S R4S R3S]
            alternate_definition [cross] c2
   setup 4x2 2x4 restriction forbidden wave_only
      array [R4S R5S R6S R7S L0S L1S L2S L3S]
   setup 3x2 2x3 restriction forbidden wave_only
      array [R3S R4S R5S L0S L1S L2S]

/* Can't use numbers for this, since number 2 is special -- it is a tag
   call, and it is on a different level.  If we put track 2 in specially,
   in addition to track N, there would be no guarantee that, when we typed
   "track 2", we would get that one, since the order of search in sdtty
   is not specified.  Then we might lose the tagging call property. */

call "track 0" c3x
            left_means_mirror
   setup 4x2 2x4
      array [0 0 4S 5S 2S 3S 0 0]

call "track 1" c3x
            left_means_mirror
   setup 4x2 qtag rotate
      array [0 0 1E 2E 7E 0E 0 0]

call "track 2" plus
            left_means_mirror is_tag_call
   setup 4x2 2x4 rotate
      array [0 0 3E 4E 6E 1E 0 0]

call "track 3" c3x
            left_means_mirror
   setup 4x2 qtag rotate
      array [0 0 2E 4E 5E 7E 0 0]

call "track 4" c3x
            left_means_mirror
   setup 4x2 2x4
      array [0 0 6S 7S 0S 1S 0 0]

call "_revert" dontshow tag revert
            dont_use_in_resolve
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if lines_miniwave [R1S L1N]

call "_reflect" dontshow tag reflect
            dont_use_in_resolve
   setup 2x2 2x2
      array [R1E L0W L1W R0E]

call "revert the @0" c3
            is_tag_call
   seq nullcall [mandatory_anycall must_be_tag_call]
   seq revert []

call "reflected @0" c3
            is_tag_call
   seq nullcall [mandatory_anycall must_be_tag_call]
   seq reflect []

call "revert and then reflect @0" c4
            is_tag_call
   seq nullcall [mandatory_anycall must_be_tag_call]
   seq revert []
   seq reflect []

call "reflect and then revert @0" c4
            is_tag_call
   seq nullcall [mandatory_anycall must_be_tag_call]
   seq reflect []
   seq revert []

call "revert, then reflect, then revert @0" c4
            is_tag_call
   seq nullcall [mandatory_anycall must_be_tag_call]
   seq revert []
   seq reflect []
   seq revert []

call "reflect, then revert, then reflect @0" c4
            is_tag_call
   seq nullcall [mandatory_anycall must_be_tag_call]
   seq reflect []
   seq revert []
   seq reflect []

call "peel the deal" c3
   setup 2x2 1x4 restriction peelable_box
      array [L1E R3W R2W L0E]
            alternate_definition [single] c4
   setup 1x2 1x2
      array [L0E R1W]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [L0N L1N L2N R5S R4S R3S]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [L0N L1N L3N L2N R6S R7S R5S R4S]

call "trail the deal" c4
   setup 2x2 1x4 restriction peelable_box
      array [R3W L1E L0E R2W]
            alternate_definition [single] c4
   setup 1x2 1x2
      array [R1W L0E]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [R3S R4S R5S L2N L1N L0N]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [R4S R5S R7S R6S L2N L3N L1N L0N]

call "peel and trail the deal" c4
   setup 2x2 1x4 restriction peelable_box
      array [L1E R3W L0E R2W]
            alternate_definition [1x2] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [R3S R4S L2N R5S L1N L0N]
            alternate_definition [2x1] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [R3S L1N L2N R5S R4S L0N]
            alternate_definition [1x3] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [R4S R5S R7S L2N R6S L3N L1N L0N]
            alternate_definition [3x1] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [R4S L1N L3N L2N R6S R7S R5S L0N]
            alternate_definition [2x2] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [R4S R5S L3N L2N R6S R7S L1N L0N]

call "trail and peel the deal" c4
   setup 2x2 1x4 restriction peelable_box
      array [R3W L1E R2W L0E]
            alternate_definition [1x2] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [L0N L1N R5S L2N R4S R3S]
            alternate_definition [2x1] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [L0N R4S R5S L2N L1N R3S]
            alternate_definition [1x3] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [L0N L1N L3N R6S L2N R7S R5S R4S]
            alternate_definition [3x1] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [L0N R5S R7S R6S L2N L3N L1N R4S]
            alternate_definition [2x2] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [L0N L1N R7S R6S L2N L3N R5S R4S]

call "crossfire" plus
            parallel_conc_end
   /* This is a qualifier rather than a restriction, because the real definition
      from lines back-to-back has them step to a wave in the center, which this
      definition doesn't do.  So, saying "do your part" isn't good enough.  We
      simply make it illegal. */
   setup 1x4 2x2 qualifier 2fl_only
      array [C1S C2S A0S A3S]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3_2fl_only
      /* We say that roll is undefined.  The roll rules come from the definition
         in terms of cross fold and extend.  The 3x3 and 4x4 versions are unclear
         on these points. */
      array [C0E C1E C2E A5E A4E A3E]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4_2fl_only
      array [C0E C1E C3E C2E A7E A6E A4E A5E]

call "chain down the line" mainstream
            parallel_conc_end
   setup 1x4 2x2
      array [L0E L1W L2W 0]

call "cross sashay" c4
   setup 1x4 2x2 restriction wave_only
      array [R1S M1N L0S M0N]
   setup dmd 2x2
      array [R1S 0 L0S 0]
   setup pmd 2x2
      array [0 M2N 0 M1N]

call "swap the wave" c2
            reverse_means_mirror
   setup 1x4 2x2 restriction wave_only
      array [2S 2S 1N 1N]

call "_wave recycle" dontshow tag waverecycle
            diamond_is_legal
   setup 1x4 2x2 qualifier wave_only
      array [CR1S AL3N AL0S CR2N]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction 2fl_only
      array [CR1S CR2N AL0S AL3N]
            alternate_definition [diamond] c4
   setup dmd 2x2
      array [CR1S 0 AL0S 0]
   setup pmd 2x2
      array [0 CR2W 0 AL1E]

call "hammerlane" c4a
            reverse_means_mirror
   setup 2x2 1x4
      array [0 0 ZM0N CR3S]

call "split recycle" c1 tag splitrecycle
            reverse_means_mirror diamond_is_legal
   setup 2x2 1x4
      preds "Can't do this with phantoms or T-boned people."
         if x22_miniwave [CR2S AL0S AL3S CR1S]
         if x22_couple [0 0 ZM0N CR1S]
            alternate_definition [singlefile] c3a
   setup 4x1 1x4 rotate
      array [ZM0W CR1E 0 0]
            alternate_definition [cross] c3
   setup 2x2 1x4
      array [0 0 ZM0N CR3S]
            alternate_definition [diamond] c4
   setup 2x2 dmd
      array [0 0 ZM0N CR1E]

call "recycle" mainstream tag recycle   /* **** Actually, it's a2 for the facing-couples version */
            reverse_means_mirror        /* **** Actually, only appropriate for facing-couples version.  Sigh. */
            diamond_is_legal
   setup 1x4 2x2 qualifier wave_only
      array [CR1S AL3N AL0S CR2N]
   setup 2x2 1x4        /* Shouldn't need a qualifier here -- it should give preference to the 1x4 splitting ?? */
      preds "Can't do this with phantoms or T-boned people."
         if x22_miniwave [CR2S AL0S AL3S CR1S]
         if x22_couple [0 0 ZM0N CR1S]
            alternate_definition [singlefile] c3a
   setup 4x1 1x4 rotate
      array [ZM0W CR1E 0 0]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [CR1S CR2N AL0S AL3N]
   setup 2x2 1x4
      array [0 0 ZM0N CR3S]
            alternate_definition [diamond] c4
   setup dmd 2x2
      array [CR1S 0 AL0S 0]
   setup pmd 2x2
      array [0 CR2W 0 AL1E]
   setup 2x2 dmd
      array [0 0 ZM0N CR1E]

call "centers fold" dontshow tag ctrsfold
   setup 1x4 2x2 restriction forbidden wave_only
      array [ZM0N AL0S ZM1N CR1S]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [ZM0N CR1S ZM1N AL0S]

call "recycle (by parts)" c1
            visible_fractions cross_is_inherited finish_means_skip_first_part
   seq ctrsfold [inherit_cross]
   seq boxctrrot []
   seq quarterin []   /* Yes, it's quarter in, not roll.  Callerlab C1 definitions, page 5.
                         I have submitted a request to the Callerlab challenge definitions
                         committee to have the definition changed so that the third part
                         will be "roll", since there are some callers who believe that it
                         should have been defined that way. */

call "all 8 recycle" c1
            reverse_means_mirror singlefile_is_inherited cross_is_inherited diamond_is_legal
   crossconc splitrecycle [conc_demand_columns inherit_reverse inherit_singlefile inherit_cross inherit_diamond]
             waverecycle [inherit_cross inherit_diamond suppress_elongation_warnings]

call "2/3 recycle" c1 tag 23recycle
   setup 1x4 2x2 restriction forbidden wave_only
      array [CR1E AL3E AL0W CR2W]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [CR1E CR2W AL0W AL3E]

call "_slither if cross" dontshow tag slither_if_cross
   setup 1x4 1x4
      array [ZM0N ZM1N ZM2N ZM3N]
            alternate_definition [cross] c4
   setup 1x4 1x4
      array [ZM0N ZM3N ZM2N ZM1N]

call "_natural vertical 1/2 tag" dontshow tag natural_vertical_half_tag
   setup 2x2 2x2
      preds "Can't do this call."
         if x22_facing_someone      [CR1S AL1S ZM0N ZM0N]
         if x22_tandem_with_someone [CR1S AL0S ZM1N ZM0N]

call "linear cycle" plus
            cross_is_inherited
   seq slither_if_cross [inherit_cross]
   seq hinge []
   seq natural_vertical_half_tag []
   seq coupleup []

call "cycle and wheel" a1 tag cyclewheel
   setup 1x4 2x2
      preds "Can't do this call."
         if lines_miniwave [R1S L3N L0S R2N]
         if lines_couple [R1S R0S L0S L1S]

/* ***** Need to get rid of these, by making the "cross" word go into the right place. */
call "cross cycle" c3
   setup 1x4 2x2 restriction 2fl_only
      array [R1S R2N L0S L3N]

call "2/3 cross cycle" c3
   setup 1x4 2x2 restriction 2fl_only
      array [R1E R2W L0W L3E]

call "explode" a1 tag explode
            parallel_conc_end
   setup 1x4 2x2 qualifier miniwaves
      array [R0E R0E L1W L1W]
   setup 1x4 2x2 restriction forbidden 1fl_only
      array [R3E R0E L2W L1W]

call "explode the line" plus tag explodeline
            parallel_conc_end
   setup 1x4 2x2 qualifier miniwaves
      array [1E 1E 0W 0W]
   setup 1x4 2x2 restriction forbidden 1fl_only
      array [2E 1E 3W 0W]

call "explode the wave" plus
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden wave_only
      array [C1E C1E A0W A0W]

/* ***** bug!!!!! tried to implement reverse explode with "reverse" alternate definition, didn't work. */
call "reverse explode" c1
   /* not really right -- should allow 1FL */
            parallel_conc_end
   setup 1x4 2x2 restriction wave_only
      preds "Can't explode from this line."
         if lines_miniwave [L0W L0W R1E R1E]
         if lines_couple [L0W L3W R1E R2E]

call "explode the diamond" c3
   conc explodeline [] coupleup [conc_demand_lines conc_force_lines]

call "about" c4 tag about
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden wave_only
      array [CR0E CR0E AL1W AL1W]

call "swing about" c4
   /* This is listed in Burleson and Galburt (6th edition) as starting
      with a swing thru, not a swing/slip.  Galburt, in particular, is
      sufficiently literate on this distinction (see their discussion
      of swing-o-late) that this could not be an oversight.  Now we
      all know that slip-swing-about would flow badly, so it follows
      that any decent caller, from a left-handed wave, would want a
      left swing thru.  We ENFORCE this by requiring the user to say
      "left swing about" if the wave is left-handed.  This is the
      "principle of maximum conservatism" that is used in many places
      in this database. */
            step_to_wave left_means_mirror visible_fractions finish_means_skip_first_part
   seq right_swing [inherit_left]
   seq slip []
   seq about []

call "quarter about" c4
            step_to_wave left_means_mirror visible_fractions finish_means_skip_first_part
   seq right_1quarter [inherit_left]
   seq slip []
   seq about []

call "three quarter about" c4
            step_to_wave left_means_mirror visible_fractions finish_means_skip_first_part
   seq right_3quarter [inherit_left]
   seq slip []
   seq about []

call "triple cast" c4a
            take_right_hands
   setup 1x8 2x4 rotate
      array [L4N R5S M4S L5N R3S L2N M3N R2S]
   setup ptpd qtag
      array [L5E 0 M5W 0 R4W 0 M4E 0]
   setup pptpd qtag
      array [0 R6W 0 L6E 0 L3E 0 R3W]

call "split cast" c4a
            left_means_mirror
   conc cast_off_12 [] hinge_then_trade [inherit_left]

call "trim the web" c4
   setup bone bone
      array [0 0 AL3S 1W 0 0 CR7S 0E]
   setup pbone bone
      preds "Can't tell which way to turn the star."
      /* Actually, if we tried harder, we might be able to. */
         if q_tag_front  [L6W 0 0 0 0 R6E 0 0]
         if q_line_back  [L6W 0 0 0 0 R6E 0 0]
         if q_tag_back   [5N  0 0 0 0 0N  0 0]
         if q_line_front [5N  0 0 0 0 0N  0 0]

call "cross and divide" c4a
            parallel_conc_end
   setup 1x4 2x2
      preds "???"
         if x14_once_rem_miniwave [0W 1E 1E 0W]
         if x14_once_rem_couple [3W 1E 2E 0W]
         if always [0 1E 0 0W]

call "Z axle" c3
            split_large_setups
   setup 3x2 1x4 rotate qualifier true_Z
      array [0 L0E L1E R3E R2E 0]

call "swing and cross" c4           /* Ugh!  - J.E.Brosius */
            step_to_wave left_means_touch_or_check grand_is_inherited visible_fractions finish_means_skip_first_part
   seq armturn_34 []
   seq and_cross [inherit_grand]

call "step and fold" c1 tag stepnfold
            parallel_conc_end
   setup 1x4 2x2
      array [CR0S ZM0N AL1S ZM1N]
   setup dmd 2x2
      array [CR0S 0 AL1S 0]
   setup pmd 2x2
      array [0 ZM1N 0 ZM2N]
            alternate_definition [cross] c3
   setup 1x4 2x2
      array [CR1S ZM0N AL0S ZM1N]
   setup dmd 2x2
      array [CR1S 0 AL0S 0]
   setup pmd 2x2
      array [0 ZM1N 0 ZM2N]
            alternate_definition [interlocked] c3  /* Need this for interlocked rally, sigh. */
   setup 1x4 2x2
      array [CR1S ZM0N AL0S ZM1N]
   setup dmd 2x2
      array [CR1S 0 AL0S 0]
   setup pmd 2x2
      array [0 ZM1N 0 ZM2N]

call "@2tag@3@c back to a wave@d" c1
            left_means_mirror first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootback []

call "@2tag@3 @c back @dand scatter" c4
            left_means_mirror first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scatscoot []

call "@2tag @3chain thru" c3a
            left_means_mirror first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootchainthru []

call "@2tag @3chain thru and dodge" c4
            left_means_mirror first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootchainthrundodge []

call "@2tag @3chain thru and scatter" c4
            left_means_mirror first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scatscootchainthru []

call "flip back" c1
            first_part_visible cross_is_inherited
   seq half_flip [inherit_cross]
   seq scootback []

call "flip your neighbor" c2
            first_part_visible cross_is_inherited
   seq half_flip [inherit_cross]
   seq neighbor []

call "touch by @b X @b" c3a
            left_means_mirror need_two_numbers
   singlecrossconc lft_touch_n_4 [inherit_left shift_one_number] lft_touch_n_4 [inherit_left]

call "switch to a diamond" a2
   setup 1x4 dmd
      array [CR1E AL0S AL1W CR2S]
            alternate_definition [interlocked] c1
   setup 2x4 qtag rotate
      array [CR6N AL5E CR0E AL6S AL7S CR1E AL4E CR7N]
            alternate_definition [magic] c2
   setup 2x4 qtag rotate
      array [CR3N AL4E CR1E AL3S AL6S CR0E AL5E CR6N]

call "run away" c4
            left_means_mirror
   setup 1x4 dmd
      array [CR3W AL0E ACR1E CR2W]
            alternate_definition [cross] c4
   setup 1x4 dmd
      array [CR3W CR2W ACR1E AL0E]

call "erase" c3x
   setup 1x4 dmd rotate
      array [CR0N CR3E AL0S AL1E]
   setup dmd 1x4 rotate
      array [CR0N 0 AL0S 0]
   setup pmd 1x4 rotate
      array [0 CR1E 0 AL3E]

call "zip the top" c4a
   setup 1x4 1x4 rotate
      array [CR0N CR1S AL0S AL1N]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1S 0 AL1N]

call "fan back" c4 tag fanback
            step_to_wave left_means_touch_or_check
   setup 1x4 dmd
      array [CR0S CR3W AL2S AL3E]
   setup dmd 1x4
      array [CR0S 0 AL2S 0]
   setup pmd 1x4
      array [0 CR1W 0 AL1E]

call "spin back" c4
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check visible_fractions finish_means_skip_first_part
   seq trade []
   seq fanback []

call "short cycle" c4
   setup 1x4 1x4 rotate restriction forbidden wave_only
      array [R0N L3N L0S R3S]

call "peel the top" plus
            split_large_setups
   setup 2x2 1x4 rotate restriction wave_only
      array [AL2N CR2S AL3N CR3S]
   setup 3x2 1x4 qualifier true_Z restriction wave_only
      array [CR1W AL0E 0 0 CR0W AL1E]

call "follow your neighbor" plus tag neighbor
   setup 2x2 1x4 rotate restriction wave_only
      array [CR0S AL0N AL3N CR3S]
            alternate_definition [grand] c1
   setup 3x2 1x6 restriction wave_only
      array [CR1W CR5W CR3W AL3E AL5E AL1E]
   setup 4x2 1x8 restriction wave_only
      array [CR1W CR2W CR7W CR4W AL4E AL7E AL2E AL1E]

call "cross your neighbor" c1
   setup 2x2 1x4 rotate restriction wave_only
      array [CR0S AL0N CR3S AL3N]

call "criss-cross your neighbor" c2
   setup 2x2 1x4 rotate restriction wave_only
      array [CR3S AL3N CM2S AM2N]

call "follow thru" c1
   setup 2x2 1x4 rotate restriction wave_only
      array [CR0N AL0S AL1S CR1N]
   setup pmd 1x4
      preds "???"
         if dmd_ctrs_rh [CR1E CR2E 0 0]
         if always      [AL1W 0    0 AL2W]
            alternate_definition [grand] c3
   setup 3x2 1x6 restriction wave_only
      array [CR2E CR4E CR3E AL3W AL4W AL2W]
   setup 4x2 1x8 restriction wave_only
      array [CR3E CR6E CR5E CR4E AL4W AL5W AL6W AL3W]
            alternate_definition [cross] c3x
   setup 2x2 1x4 rotate restriction wave_only
      array [CR0N AL0S CR1N AL1S]
   setup pmd 1x4
      preds "???"
         if dmd_ctrs_rh [AL1W AL2W 0 0]
         if always      [CR1E 0    0 CR2E]
            alternate_definition [3x3] c4a
   setup 3x2 1x6 restriction wave_only
      array [CR5E CR4E CR3E AL3W AL4W AL5W]
            alternate_definition [4x4] c4a
   setup 4x2 1x8 restriction wave_only
      array [CR6E CR7E CR5E CR4E AL4W AL5W AL7W AL6W]

/* **** get rid of this when can force final concepts in defmod spec */
call "_grand follow thru" dontshow tag grandflwthru
   setup 3x2 1x6 restriction wave_only
      array [CR2E CR4E CR3E AL3W AL4W AL2W]
   setup 4x2 1x8 restriction wave_only
      array [CR3E CR6E CR5E CR4E AL4W AL5W AL6W AL3W]

call "pair the line" c4
   setup 1x4 2x3 rotate
      array [CR5E CR4E AL0E AL1E]
            alternate_definition [cross] c4
   setup 1x4 2x3 rotate
      array [CR0E CR1E AL5E AL4E]

call "@i@6 @j cross @lfold" mainstream
/* This used to be:
   partnermatrix use_selector stop_and_warn_on_tbone
      [M16N 16 M16N 16 M16N 16 M16N 16 R18S 18 R18S 18 L14S 18 L14S 18]
   Wasn't that a riot??
*/
   setup 1x4 2x3 rotate
      preds "???"
         if select [CR5E    0 AL0E    0]
         if always [   0 ZM4W    0 ZM1W]
            alternate_definition [cross] mainstream
   setup 1x4 2x3 rotate
      preds "???"
         if select [CR0E    0 AL5E    0]
         if always [   0 ZM4W    0 ZM1W]

call "loop the loop" c4
   setup 1x4 2x3 rotate
      array [R5E R1E L0E L4E]
            alternate_definition [cross] c4
   setup 1x4 2x3 rotate
      array [R0E R1E L5E L4E]

call "rip the line" c4
   setup 1x4 2x3 rotate
      array [CR0E CR4E AL5E AL1E]

call "curl thru" c4
   setup 1x4 2x3 rotate
      array [R0E R1E L5E L4E]

call "pass the ocean" mainstream tag pass_ocean
            rear_back_from_r_wave
   setup 2x2 1x4 rotate
      array [0 0 L1S R0N]

call "cross the ocean" c3x
   setup 2x2 1x4 rotate
      array [0 0 R0N L1S]

call "_designees walk/others dodge" dontshow tag starthopping
   setup 2x2 2x2
      preds "Can't tell who is designated."
         if select [0 0 M1N M0N]
         if unselect [M1N M0N M3N M2N]

call "@k hop" c3a
   seq starthopping []
   seq hinge []

call "beau hop" c3a
   setup 2x2 1x4 rotate
      array [0 0 R3N R0N]
            alternate_definition [singlefile] c3x
   setup 4x1 1x4
      array [R1E R2E 0 0]
            alternate_definition [3x3] c4
   setup 2x3 1x6 rotate
      array [0 0 0 R4N R2N R0N]
            alternate_definition [4x4] c4
   setup 2x4 1x8 rotate
      array [0 0 0 0 R5N R6N R3N R0N]

call "belle hop" c3a
   setup 2x2 1x4 rotate
      array [0 0 L0S L3S]
            alternate_definition [singlefile] c3x
   setup 4x1 1x4
      array [L1W L2W 0 0]
            alternate_definition [3x3] c4
   setup 2x3 1x6 rotate
      array [0 0 0 L0S L2S L4S]
            alternate_definition [4x4] c4
   setup 2x4 1x8 rotate
      array [0 0 0 0 L0S L3S L6S L5S]

call "dixie style to a wave" mainstream
            split_like_dixie_style
            rear_back_from_qtag left_means_mirror no_elongation_allowed
   setup 2x2 1x4 rotate
      array [0 0 L0S L3S]
            alternate_definition [singlefile] mainstream
   setup 4x1 1x4
      array [L1W L2W 0 0 ]

call "dixie diamond" c1
            split_like_dixie_style
            rear_back_from_qtag left_means_mirror no_elongation_allowed
   setup 2x2 dmd rotate
      array [0 0 L0N R3W]
            alternate_definition [singlefile] c1
   setup 4x1 dmd
      array [R1N L2E 0 0 ]

call "dixie sashay" c1
            split_like_dixie_style
            rear_back_from_qtag left_means_mirror no_elongation_allowed
   setup 2x2 1x4 rotate
      array [0 0 L0S 1S]
            alternate_definition [singlefile] c1
   setup 4x1 1x4
      array [3W L2W 0 0 ]

call "dixie derby" c3x
            split_like_dixie_style
            rear_back_from_qtag left_means_mirror no_elongation_allowed
   setup 2x2 1x4 rotate
      array [0 0 1N 0N]
            alternate_definition [singlefile] c4
   setup 4x1 1x4
      array [2E 3E 0 0 ]

call "dixie spin" c4a
            split_like_dixie_style
            rear_back_from_qtag left_means_mirror no_elongation_allowed
   setup 2x2 1x4
      array [0 0 L0S R3S]
            alternate_definition [singlefile] c4a
   setup 4x1 1x4 rotate
      array [R3E L0E 0 0 ]

call "pass the sea" a2
            rear_back_from_r_wave
   setup 2x2 1x4 rotate
   array [0 0 L0S R1N]

call "veer left" mainstream
   setup 2x2 1x4
      array [0 0 1N 0N]

call "@gveer @eright@f" mainstream
            left_means_mirror
   setup 2x2 1x4
      array [0 0 2N 3N]

call "leftable veer left" dontshow tag lft_veer_left
            left_means_mirror
   setup 2x2 1x4
      array [0 0 1N 0N]

call "sashay thru" c4
            left_means_mirror
   setup 2x2 1x4
      array [0 0 2N 3N]

call "reach out" c3a
   setup 2x2 1x4 restriction wave_only
      array [CM3S AM1S CR2S AL0S]

call "flare out to a line" c3a
   setup 2x4 1x8 restriction 2fl_only
      array [AL0S AL1S CR5S CR4S ZM7N ZM6N ZM2N ZM3N]
            alternate_definition [cross] c3x
   setup 2x4 1x8 restriction 2fl_only
      array [CR5S CR4S AL0S AL1S ZM7N ZM6N ZM2N ZM3N]

call "scoot apart" c4
   setup 2x2 1x4 restriction wave_only
      array [CM3S AM1S AM0S CM2S]

call "_strict peel and nothing" dontshow tag strict_peel_and_nothing
   setup 2x2 1x4 restriction peelable_box
      array [AL0S CR2S ZM3N ZM1N]

call "_peel and nothing" dontshow tag peel_and_nothing
   setup 2x2 1x4 restriction resolve_ok peelable_box
      array [AL0S CR2S ZM3N ZM1N]

call "_trail and nothing" dontshow tag trail_and_nothing
   setup 2x2 1x4 restriction resolve_ok peelable_box
      array [CR2S AL0S ZM3N ZM1N]

call "peel off" mainstream tag peeloff
   setup 2x2 1x4 restriction peelable_box
      array [AL0S CR2S CR3S AL1S]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL2E AL1E AL0E CR3E CR4E CR5E]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E AL3E AL1E AL0E CR4E CR5E CR7E CR6E]

call "trail off" a2
   setup 2x2 1x4 restriction peelable_box
      array [CR2S AL0S AL1S CR3S]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR5E CR4E CR3E AL0E AL1E AL2E]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E CR7E CR5E CR4E AL0E AL1E AL3E AL2E]

call "peel and trail" a2 tag peelntrail
   setup 2x2 1x4 restriction peelable_box
      array [AL0S CR2S AL1S CR3S]
            alternate_definition [1x2] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR5E CR4E AL0E CR3E AL1E AL2E]
            alternate_definition [2x1] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR5E AL1E AL0E CR3E CR4E AL2E]
            alternate_definition [1x3] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E CR7E CR5E AL0E CR4E AL1E AL3E AL2E]
            alternate_definition [3x1] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E AL3E AL1E AL0E CR4E CR5E CR7E AL2E]
            alternate_definition [2x2] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E CR7E AL1E AL0E CR4E CR5E AL3E AL2E]

call "trail and peel" c4
   setup 2x2 1x4 restriction peelable_box
      array [CR2S AL0S CR3S AL1S]
            alternate_definition [1x2] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL2E AL1E CR3E AL0E CR4E CR5E]
            alternate_definition [2x1] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL2E CR4E CR3E AL0E AL1E CR5E]
            alternate_definition [1x3] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E AL3E AL1E CR4E AL0E CR5E CR7E CR6E]
            alternate_definition [3x1] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E CR7E CR5E CR4E AL0E AL1E AL3E CR6E]
            alternate_definition [2x2] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E AL3E CR5E CR4E AL0E AL1E CR7E CR6E]

call "reset" c3
            visible_fractions
   seq strict_peel_and_nothing []
   seq armturn_14 []
   seq strict_peel_and_nothing []
   seq armturn_14 []

call "_eight chain part 1" dontshow tag eightchain1
            left_means_mirror
   setup 4x2 2x4
      array [ZM1N 0 ZM3N 0 0 ZM4N 0 ZM6N]

call "_eight chain part 2" dontshow tag eightchain2
            left_means_mirror
   setup 4x2 2x4
      array [0 ZM2N 0 AL4S AL3S 0 ZM5N 0]

call "eight chain @9" mainstream
            rear_back_from_r_wave left_means_mirror neednumber
   /* We do *NOT* set "visible_fractions" for this.  It is not permitted
      when "repeat_n_alternate" is used. */
   seq eightchain1 [inherit_left repeat_n_alternate]
   seq eightchain2 [inherit_left]

/***** not right: if in 8CH this would split it and lose */
/* Need to specify a 1x4 version, and make the program */
/* know which way to split the 2x4 if a call has both. */
call "weave" c1 tag weave
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [CR0N AL0S ACR1N CAL1S]

call "_natural 3/4 thru" dontshow tag nat34thru
            dont_use_in_resolve
   setup 2x2 1x4 rotate restriction wave_only
      array [L3N R3S L2N R2S]

call "_natural 3/4 and 3/4" dontshow tag nat34_34
            dont_use_in_resolve
   setup 2x2 dmd rotate restriction wave_only
      array [L1W R3W L2N R2S]

call "_quarter by the right" dontshow tag 1_4_by_right
            dont_use_in_resolve left_means_mirror diamond_is_legal
   setup 2x4 2x4 rotate qualifier right_wave
      array [CR7N 0 CR0N 0 0 CR2N 0 CR5N]
   setup 2x4 qtag rotate qualifier left_wave
      array [0 CR6N 0 ZM0W ZM1W 0 CR3N 0]
   setup qtag 2x4 rotate qualifier right_wave
      array [0 0 0 CR1N 0 0 CR6N 0]
   setup pqtag 2x4 rotate qualifier right_wave
      array [ZM7W ZM0W 0 0 ZM3W ZM4W 0 0]
   setup dmd 1x4 qualifier right_wave
      array [ZM0N 0 ZM2N 0]
   setup pmd 1x4 qualifier right_wave
      array [0 CR3E 0 0]
   setup 4x2 1x8 qualifier right_wave
      array [CR1E CR2E CR7E CR4E 0 0 0 0]
   setup 3x2 1x6 restriction wave_only
      array [CR1E CR5E CR3E 0 0 0]
   setup 2x2 1x4 rotate qualifier right_wave
      array [CR0N 0 0 CR3N]
   setup 1x2 1x2 rotate qualifier right_wave
      array [CR0N 0]
            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds
      array [0 0 0 CR1E 0 0 CR0E 0]
   setup pqtag qtag
      array [CR7E CR2E 0 0 0 0 0 0]

call "_half by the right" dontshow tag 1_2_by_right
            dont_use_in_resolve left_means_mirror diamond_is_legal
   setup 1x4 1x4 restriction wave_only
      array [CR1S CR3S ZM2N CR2S]
            alternate_definition [grand] plus
   setup 1x6 1x6 restriction wave_only
      array [CR1S CR2S CR5S ZM3N CR3S CR4S]
   setup 1x8 1x8 restriction wave_only
      array [CR1S CR3S CR6S CR2S ZM4N CR4S CR7S CR5S]
            alternate_definition [12matrix grand] c3a
   setup 1x12 1x12 restriction wave_only
      array [CR1S CR2S CR3S CR4S CR5S CR11S ZM6N CR6S CR7S CR8S CR9S CR10S]
            alternate_definition [16matrix grand] c3a
   setup 1x16 1x16 restriction wave_only
      array [CR1S CR2S CR3S CR4S CR5S CR6S CR7S CR15S ZM8N CR8S CR9S CR10S CR11S CR12S CR13S CR14S]
/* We shouldn't need these:
   setup 1x10 1x10 restriction wave_only
      array [CR1S CR2S CR3S CR4S CR9S ZM5N CR5S CR6S CR7S CR8S]
   setup 1x14 1x14 restriction wave_only
      array [CR1S CR2S CR3S CR4S CR5S CR6S CR13S ZM7N CR7S CR8S CR9S CR10S CR11S CR12S]
*/
            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds
      array [0 0 ZM2N CR2S 0 0 CR7S CR3S]
   setup pqtag qtag
      array [CR5S CR4S 0 0 ZM4N ZM5N 0 0]

call "_three quarters by the right" dontshow tag 3_4_by_right
            dont_use_in_resolve left_means_mirror diamond_is_legal
   setup 2x4 2x4 rotate qualifier right_wave
      array [CR6S 0 CR1S 0 0 CR3S 0 CR4S]
   setup 2x4 qtag rotate qualifier left_wave
      array [0 CR7S 0 ZM0W ZM1W 0 CR2S 0]
   setup qtag 2x4 rotate qualifier right_wave
      array [0 0 0 CR2S 0 0 CR5S 0]
   setup pqtag 2x4 rotate qualifier right_wave
      array [ZM7W ZM0W 0 0 ZM3W ZM4W 0 0]
   setup dmd 1x4 qualifier right_wave
      array [ZM0N 0 ZM2N 0]
   setup pmd 1x4 qualifier right_wave
      array [0 CR1W 0 0]
   setup 4x2 1x8 qualifier right_wave
      array [CR0W CR3W CR6W CR5W 0 0 0 0]
   setup 3x2 1x6 restriction wave_only
      array [CR0W CR2W CR4W 0 0 0]
   setup 2x2 1x4 rotate qualifier right_wave
      array [CR1S 0 0 CR2S]
   setup 1x2 1x2 rotate qualifier right_wave
      array [CR1S 0]
            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds
      array [0 0 0 CR4W 0 0 CR5W 0]
   setup pqtag qtag
      array [CR6W CR3W 0 0 0 0 0 0]

call "_half by the left" dontshow tag 1_2_by_left
            dont_use_in_resolve left_means_mirror diamond_is_legal
   setup 1x4 1x4 restriction wave_only
      array [ZM0N AL0S AL3S AL1S]
   setup qtag qtag restriction wave_only
      array [ZM0N ZM1N AL3S AL7S ZM4N ZM5N ZM6N AL6S]
   setup pqtag qtag
      array [ZM0N ZM1N 0 0 ZM4N ZM5N 0 0]
            alternate_definition [grand] plus
   setup 1x6 1x6 restriction wave_only
      array [ZM0N AL0S AL1S AL4S AL5S AL2S]
   setup 1x8 1x8 restriction wave_only
      array [ZM0N AL0S AL3S AL1S AL5S AL7S AL2S AL6S]
            alternate_definition [12matrix grand] c3a
   setup 1x12 1x12 restriction wave_only
      array [ZM0N AL0S AL1S AL2S AL3S AL4S AL7S AL8S AL9S AL10S AL11S AL5S]
            alternate_definition [16matrix grand] c3a
   setup 1x16 1x16 restriction wave_only
      array [ZM0N AL0S AL1S AL2S AL3S AL4S AL5S AL6S AL9S AL10S AL11S AL12S AL13S AL14S AL15S AL7S]
/* We shouldn't need these:
   setup 1x10 1x10 restriction wave_only
      array [ZM0N AL0S AL1S AL2S AL3S AL6S AL7S AL8S AL9S AL4S]
   setup 1x14 1x14 restriction wave_only
      array [ZM0N AL0S AL1S AL2S AL3S AL4S AL5S AL8S AL9S AL10S AL11S AL12S AL13S AL6S]
*/
            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds
      array [0 0 AL3S AL7S 0 0 ZM6N AL6S]
   setup pqtag qtag
      array [ZM0N ZM1N 0 0 AL1S AL0S 0 0]

call "quarter thru" a1
            step_to_wave left_means_mirror grand_is_inherited diamond_is_legal visible_fractions finish_means_skip_first_part
   seq 1_4_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_grand inherit_diamond roll_transparent]

call "swing thru" mainstream
            step_to_wave left_means_mirror grand_is_inherited 12_matrix_is_inherited 16_matrix_is_inherited diamond_is_legal visible_fractions finish_means_skip_first_part
   seq 1_2_by_right [inherit_left inherit_grand inherit_12_matrix inherit_16_matrix inherit_diamond]
   seq 1_2_by_left  [inherit_left inherit_grand inherit_12_matrix inherit_16_matrix inherit_diamond roll_transparent]

call "three quarter thru" a1
            step_to_wave left_means_mirror grand_is_inherited diamond_is_legal visible_fractions finish_means_skip_first_part
   seq 3_4_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_grand inherit_diamond roll_transparent]

call "_grand slip" dontshow tag grandslip
   setup 1x6 1x6
      array [ZM0N CR2S AL1S ZM3N AL5S CR4S]
   setup 1x8 1x8
      array [ZM0N CR3S CR6S AL1S ZM4N AL7S AL2S CR5S]

call "remake the wave" a2 tag remake
            grand_is_inherited visible_fractions finish_means_skip_first_part
   seq armturn_14 []
   seq maybegrandslip [inherit_grand]
   seq armturn_34 []

call "remake the column" a2
            visible_fractions finish_means_skip_first_part
   seq armturn_14 []
   /* Someday, we will have "force ..." as well as "inherit ...". */
   seq grandslip []
   seq armturn_34 []

call "remake" a2
            left_means_mirror grand_is_inherited diamond_is_legal visible_fractions finish_means_skip_first_part
   seq 1_4_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_grand inherit_diamond]
   seq 3_4_by_right [inherit_left inherit_diamond]

call "swing the fractions" c1
            left_means_mirror diamond_is_legal visible_fractions finish_means_skip_first_part
   seq 1_4_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_diamond]
   seq 3_4_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_diamond]
   seq 1_4_by_right [inherit_left inherit_diamond]

call "quarter cross" c3x
            left_means_mirror grand_is_inherited visible_fractions finish_means_skip_first_part
   seq 1_4_by_right [inherit_left]
   seq ctrcrossrun [inherit_grand]

call "quarter mix" c3a
            left_means_mirror grand_is_inherited visible_fractions finish_means_skip_first_part
   seq 1_4_by_right [inherit_left]
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand]

call "three quarter cross" c3x
            left_means_mirror grand_is_inherited visible_fractions finish_means_skip_first_part
   seq 3_4_by_right [inherit_left]
   seq ctrcrossrun [inherit_grand]

call "three quarter mix" c3a
            left_means_mirror grand_is_inherited visible_fractions finish_means_skip_first_part
   seq 3_4_by_right [inherit_left]
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand]

call "_centers crossback/ends two o's" dontshow tag crossbackandtwoos
   conc crossback [] box_circ [conc_force_otherway endscando]

call "_start settle back" dontshow tag settle_back1
   seq strict_peel_and_nothing []
   seq hinge []

call "settle back" c3x
            visible_fractions finish_means_skip_first_part
   seq settle_back1 []
   seq crossbackandtwoos []

call "short trip" c3x tag longtrip1
   setup 2x4 2x6
      preds "Don't know what to do."
         if lines_miniwave [M3S R3S L2S M2S M4N M6S M11S M1N]
         if lines_couple   [M3S M0S M5S M2S M4N M3N M2N  M1N]

call "finish a long trip" c3x tag longtrip2
   setup 2x6 2x4 rotate
      preds "Wings must be as a couple looking out."
         if lines_miniwave [ 0   0  0 0  0   0  0 0 M1W M6W 0 0]
         if lines_couple   [R7E R0E 0 0 L7E L0E 0 0 M1W M6W 0 0]

call "long trip" c3x
            visible_fractions finish_means_skip_first_part
   seq longtrip1 []
   seq longtrip2 []

call "chase your neighbor" c1
            left_means_mirror
   setup 2x2 1x4 rotate
   array [1N 2N 0 0]

call "swap the top" c3a
            reverse_means_mirror
   setup 2x2 1x4 rotate
      array [0 0 3N 2S]
            alternate_definition [cross] c3
   setup 2x2 1x4 rotate
      array [0 0 3S 2S]

call "star to a wave" c4a
            left_means_mirror
   setup 2x2 1x4 rotate
      array [0 0 R1S R2S]
            alternate_definition [singlefile] c4
   setup 4x1 1x4
      array [R3W R0W 0 0]

call "travel thru" c3a
            rear_back_from_r_wave left_means_mirror
   setup 2x2 1x4 rotate
      array [0 0 CR1N CR0N]
            alternate_definition [singlefile] c4
   setup 4x1 1x4
      array [CR3E CR2E 0 0]

call "revolve to a wave" c3
   setup 2x2 1x4
      array [CR2S CR3N ZM0N CR1S]

call "follow to a diamond" c3a
   setup 2x2 dmd rotate restriction resolve_ok wave_only
      array [C1E A3E A2N C2S]

call "@g@eright@f roll the" c3x
            left_means_mirror
   setup 2x2 dmd rotate
      array [CR0N C1E 0 0]      /* We say that the original belle can't roll. */

call "mayday in" c4
            left_means_mirror
   setup 2x4 2x4
      array [3S 1N 4S 6S 0 0 0 0]   /* We think trying to roll after this call is silly. */

call "mayday out" c4
            left_means_mirror
   setup 2x4 2x4
      array [3N 1N 4S 6S 0 0 0 0]

call "mayday" c4
            left_means_mirror
   setup 2x4 2x4
      array [3E 1N 4S 6S 0 0 0 0]

call "peel to a diamond" c2
   seq peel_and_nothing []
   seq sglctrhinge [roll_transparent]

call "trail to a diamond" c2
   seq trail_and_nothing []
   seq sglctrhinge [roll_transparent]

call "_grand linear cycle but" dontshow tag gndlincyclebut
   setup 1x8 2x4
      array [M2E M6E L7E R7E M1W M5W R4W L4W]

call "_centers couple up" dontshow tag ctrscoupleup
   conc coupleup [or_anycall] nullcall []

call "grand linear cycle@7 but @8" c4a
   seq gndlincyclebut []
   seq ctrscoupleup []

call "trade/stepnfold" dontshow tag tradestpnfld
            visible_fractions dont_use_in_resolve
   seq trade [allow_forced_mod]
   seq stepnfold [allow_forced_mod]

call "_finish relay the shadow" dontshow tag fin_relay_shad
            step_to_wave left_means_touch_or_check
   setup 1x8 2x4 restriction wave_only
      array [C3S 6N 7S A2N A0S 5N 4S C1N]

call "relay the shadow" c1
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fin_relay_shad []

call "spin chain the line" c3a
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible
   seq trade []    /* If we use "swing" instead of "trade", it would give warning
                      "do your part" when done from 1-faced line, which dancers
                      might misconstrue during the cast off parts.  The behavior
                      "swing" needs to be changed so that it gives an error
                      unless the "two-faced" modifier is given. */
   seq spinchainpart2 []
   seq spinchainpart3 []

call "_spin chain the line part 2" dontshow tag spinchainpart2
   checkpoint slip [] cast_off_34 [conc_force_lines suppress_elongation_warnings]

call "_spin chain the line part 3" dontshow tag spinchainpart3
   conc cast_off_34 [] nullcall []

call "divide the ocean @h" c3
       single_is_inherited
   seq divide_oceansea_1 [inherit_single]
   seq divide_ocean_2 [inherit_single]
   seq divide_oceansea_3d []

call "divide the sea @h" c3
       single_is_inherited
   seq divide_oceansea_1 [inherit_single]
   seq divide_sea_2 [inherit_single]
   seq divide_oceansea_3d []

call "divide the ocean @0" c3
       single_is_inherited
   seq divide_oceansea_1 [inherit_single]
   seq divide_ocean_2 [inherit_single]
   seq divide_oceansea_3c []

call "divide the sea @0" c3
       single_is_inherited
   seq divide_oceansea_1 [inherit_single]
   seq divide_sea_2 [inherit_single]
   seq divide_oceansea_3c []

call "_divide the ocean/sea, part 1" dontshow tag divide_oceansea_1
           single_is_inherited
   maybesinglecrossconc cast_off_34 [inherit_single] hinge [conc_force_lines suppress_elongation_warnings]

call "_divide the ocean, part 2" dontshow tag divide_ocean_2
           single_is_inherited
   maybesingleconc verticalhalftag [inherit_single] partnertagbypairs [inherit_single conc_force_columns]

call "_divide the sea, part 2" dontshow tag divide_sea_2
           single_is_inherited
   maybesingleconc verticallefthalftag [inherit_single] partnertagbypairs [inherit_single conc_force_columns]

call "_divide the ocean/sea @h, part 3" dontshow tag divide_oceansea_3d
           single_is_inherited
   maybesingleconc nullcall [] quarter_maybe [conc_force_spots]

call "_divide the ocean/sea @0, part 3" dontshow tag divide_oceansea_3c
           single_is_inherited
   maybesingleconc nullcall [] nullcall [mandatory_anycall]

call "along" c2 tag along
   setup 1x8 2x4 rotate
   array [0N 2S 0S 6S 7S 5N 7N 1N]

call "an anchor" c4 tag ananchor
   setup 1x8 qtag
   array [1S 3S 2N 4N 0S 7S 6N 5N]

call "@2swing @3along" c2
   seq swing [or_anycall]
   seq along []

call "@2swing @3an anchor" c4
   seq swing [or_anycall]
   seq ananchor []

call "@2cast @3an anchor" c4
   seq cast_off_34 [or_anycall]
   seq ananchor []

call "_finish relay your pleasure" dontshow tag fin_relay_pleasure
            step_to_wave left_means_touch_or_check
   setup 1x8 qtag rotate restriction forbidden wave_only
      array [C7N CCR4N CM2S AL4N A7S AAL1S AM2N CR1S]

call "relay your pleasure" c4a
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fin_relay_pleasure []

call "shake and rattle" c3
            reverse_means_mirror
   setup 2x2 2x2
      array [CR1W CR2W AL3W AL0W]
            alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [AL0S CR1S]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [CR0S CR1S CR2S AL3S AL4S AL5S]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [CR0S CR1S CR2S CR3S AL4S AL5S AL6S AL7S]

call "catch @1@9" c2
            split_like_square_thru cross_is_inherited
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq slip [or_anycall]
   seq stepnfold [inherit_cross]

call "@g@eright@f on @9" c4a
            split_like_square_thru
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq finish_right_on []

call "square thru @9" mainstream
            split_like_square_thru
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq natstepthru []

call "square thru, but on the @u hand, @0" plus
            split_like_square_thru
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq nullcall [mandatory_anycall]

call "square thru @9 to a wave" c1
            split_like_square_thru
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]

call "_square thru 2" dontshow tag square_thru_2
            split_like_square_thru
   setup 2x2 2x2 restriction not_tboned
      array [0 0 AM0W CM1E]

call "_square thru 3" dontshow tag square_thru_3
            split_like_square_thru
   setup 2x2 2x2 restriction not_tboned
      array [0 0 AM3S CM2S]

call "_square thru 4" dontshow tag square_thru_4
            split_like_square_thru
   setup 2x2 2x2 restriction not_tboned
      array [0 0 AM2E CM3W]

call "square turn thru @9" c3x
            split_like_square_thru
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq natturnthru []

call "square turn thru @9 to a wave" c3x
            split_like_square_thru
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]

call "step thru" mainstream
   setup 1x2 1x2 rotate
      array [Z0W 0]

call "_natural step thru" dontshow tag natstepthru
   setup 1x2 1x2 rotate
      array [Z0W Z0W]

call "turn thru" mainstream tag turnthru
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2
      array [C0S 0]

call "_natural turn thru" dontshow tag natturnthru
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [C1E A1E]

call "pair off" a1
   setup 2x2 2x2
      array [0 0 R2E L3W]
   setup 2x4 2x4
      array [0 0 0 0 R4E R5E L6W L7W]

call "short and sweet" c4a
            reverse_means_mirror
   setup 2x2 2x2
      array [R1E R2W M3W R0E]

call "short cut" c4a
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 M3W R0E]

call "nip and tuck" c4a
            left_means_mirror
   setup 2x2 2x2
      array [CR3W CR2W 0 0]

call "fan thru" c3x
            rear_back_from_r_wave left_means_mirror no_elongation_allowed
   setup 2x2 2x2
      array [0 0 AM3S ZM0N]

call "fan thru to a wave" c3x
            rear_back_from_r_wave left_means_mirror
   setup 2x2 1x4
      array [0 0 M1S M0N]

call "cross trail thru" a1 tag crosstrail
   setup 2x2 2x2 restriction not_tboned
      array [0 0 ZM0N ZM1N]

call "turn and Q" c4a
/* **** should be able to do this split, need another descriptor,
      "split_like_square_thru" won't do */
            rear_back_from_r_wave left_means_mirror
   setup 2x2 2x2 restriction not_tboned
      array [0 0 2E 3W]

call "turn and flip" c4
            left_means_mirror no_elongation_allowed
   setup 2x2 2x2 restriction not_tboned
      array [0 0 AL3S CM2S]

call "courtesy turn" mainstream tag courtesy
   setup 1x2 1x2 restriction forbidden 2fl_only
      array [AL1S AL0S]

call "right and left thru" mainstream
            visible_fractions finish_means_skip_first_part no_elongation_allowed
   seq passthru []
   seq courtesy []

call "turn and left thru" c3x
            visible_fractions finish_means_skip_first_part
   seq turnthru []
   seq courtesy []

call "flutter wheel" mainstream
            rear_back_from_qtag reverse_means_mirror no_elongation_allowed
   setup 2x2 2x2 restriction not_tboned
      array [0 0 2N 1S]
            alternate_definition [singlefile] mainstream
   setup 4x1 2x2
      array [2S 3N 0 0]

call "ladies chain" mainstream
            rear_back_from_qtag no_elongation_allowed
   setup 2x2 2x2 restriction not_tboned
      preds "Must be normal couples."
         if boyp [0 0 0 L3N]
         if girlp [0 0 L0S 0]
            alternate_definition [singlefile] mainstream
   setup 4x1 2x2
      array [L0N L1S 0 0]

call "flare the star" c4a
            reverse_means_mirror no_elongation_allowed
   setup 2x2 2x2 restriction not_tboned
      array [0 0 L2N L1S]

call "bingo" c3 tag bingo
   simple_funny
   setup 2x2 2x2 restriction wave_only
      array [AL0E CR1W AL0W CR1E]

call "stack the line" c2
            left_means_mirror
   setup 2x2 2x2 restriction peelable_box
      array [1E 3W 2W 0E]

call "reverse the pass" c3
   setup 2x2 2x2 restriction all_facing_same
      array [M2S M3S L0S R1S]
call "1/3 reverse the pass" c3
   setup 2x2 2x2 restriction all_facing_same
      array [R1S L0S M2N M3N]
call "2/3 reverse the pass" c3
   setup 2x2 2x2 restriction all_facing_same
      array [2S 3S 1N 0N]

call "zoom" mainstream
   setup 2x2 2x2 restriction forbidden peelable_box
      array [AL3N CR2N ZM1N ZM0N]

call "zing" c1 tag zing
   setup 2x2 2x2 restriction peelable_box
      array [AL3E CR2W AL1W CR0E]
            alternate_definition [1x2] c4
   setup 3x2 2x3 restriction peelable_box
      array [CR1E CR2E AL0E CR5W AL3W AL4W]
            alternate_definition [2x1] c4
   setup 3x2 2x3 restriction peelable_box
      array [CR2E AL1E AL0E CR5W CR4W AL3W]
            alternate_definition [1x3] c4
   setup 4x2 2x4 restriction peelable_box
      array [CR1E CR2E CR3E AL0E CR7W AL4W AL5W AL6W]
            alternate_definition [3x1] c4
   setup 4x2 2x4 restriction peelable_box
      array [CR3E AL2E AL1E AL0E CR7W CR6W CR5W AL4W]
            alternate_definition [2x2] c4
   setup 4x2 2x4 restriction peelable_box
      array [CR2E CR3E AL1E AL0E CR7W CR6W AL4W AL5W]
            alternate_definition [3x3] c4
   setup 6x2 2x6 restriction peelable_box
      array [CR3E CR4E CR5E AL2E AL1E AL0E CR11W CR10W CR9W AL6W AL7W AL8W]
            alternate_definition [4x4] c4
   setup 8x2 2x8 restriction peelable_box
      array [CR4E CR5E CR6E CR7E AL3E AL2E AL1E AL0E CR15W CR14W CR13W CR12W AL8W AL9W AL10W AL11W]

call "split trade circulate" c2
   simple_funny
   setup 2x2 2x2 restriction magic_only
      array [CR1S AL0S ZM0N ZM1N]

call "cross walk and dodge" c3
   simple_funny
   setup 2x2 2x2 restriction unusual magic_only
      array [M1N M0N M0N M1N]

call "split trade couple up" c3x
   simple_funny
   setup 2x2 2x2 restriction magic_only
      array [R1S L0S R0S L1S]

call "1/2 split trade circulate" c2
            dont_use_in_resolve take_right_hands
   /* We have to use the "forbidden" option, since this def'n
      is slightly sleazy, and wouldn't do the right thing
      from a leftie box. */
   setup 2x2 dmd rotate restriction forbidden magic_only
      array [R0N L0S M1W M3W]

call "_leads run" dontshow tag leadrun
   setup 2x2 2x2 restriction wave_only
      array [R1S L0S M3N M2N]

call "_beaus run" dontshow tag beaurun
   setup 1x2 1x2
      array [CR1S ZM0N]
   setup 2x2 2x2  /* To allow it from T-boned box. */
      array [CR1S ZM0N ZM3N CR2S]

call "_leads kickoff" dontshow tag leadkick
   setup 2x2 2x2
      array [CR1W AL0E AM3W CM2E]

call "_beaus kickoff" dontshow tag beaukick
   setup 1x2 1x2
      array [CR1W AM0W]

call "@i@6 @j cross @lrun" mainstream
   setup 1x2 1x2
      preds "Can't have both people run."
         if select_near_unselect [CR1S AL0S]
         if unselect_near_select [ZM1N ZM0N]
         if unselect_near_unselect [ZM0N ZM1N]
            alternate_definition [cross] mainstream
   setup 1x4 1x4
      preds "Can't have both people or neither person cross run."
         if select_once_rem_from_unselect   [CR3S CR2S AL1S AL0S]
         if unselect_once_rem_from_select   [ZM1N ZM0N ZM3N ZM2N]

call "_centers cross run" dontshow tag ctrcrossrun  /* Maybe can regularize this someday. */
   setup 1x4 1x4
      array [ZM1N CR2S ZM3N AL0S]
            alternate_definition [grand] c3a
   setup 1x6 1x6
      array [ZM1N CR5S AL0S ZM4N AL2S CR3S]
   setup 1x8 1x8
      array [ZM1N CR2S CR7S AL0S ZM5N AL6S AL3S CR4S]

call "@i@6 @j cross @lkickoff" c2 tag designeeskick
   setup 2x2 2x2
      preds "Can't tell who is kicking off."
         if select [CR1W AL0E AL3E CR2W]
         if unselect [C1E A0W A3W C2E]    /* Roll is illegal. */
   setup 1x2 1x2
      preds "Can't tell who is kicking off."
         if select [CR1W AL0E]
         if unselect [C1E A0W]    /* Roll is illegal. */
            alternate_definition [cross] c2
   setup 1x4 1x4
      preds "Can't have both people or neither person cross kickoff."
         if select_once_rem_from_unselect   [CR3W CR2W AL1E AL0E]
         if unselect_once_rem_from_select   [C1E A0W A3W C2E]

call "@i@6 @j cross @lkick by @9" c3
            neednumber
   /* It would be nice to have better selectors to catch errors if both ends
      are selected, or neither. */
   setup 1x4 1x4 qualifier n_is_1
      preds "Can't tell who is kicking."
         if select_near_unselect   [CR1W 0   AL3E 0  ]
         if unselect_near_select   [Z0N  A0W Z2N  C2E]
         if unselect_near_unselect [Z0N  Z1N Z2N  Z3N]
   setup 1x4 1x4 qualifier n_is_2
      preds "Can't tell who is kicking."
         if select_near_unselect   [CR3W 0   AL1E 0  ]
         if unselect_near_select   [Z0N  A0W Z2N  C2E]
         if unselect_near_unselect [Z0N  C3E Z2N  A1W]
   setup 1x4 1x4 qualifier n_is_3
      preds "Can't tell who is kicking."
         if select_near_unselect   [CR2W 0   AL0E 0  ]
         if unselect_near_select   [C1E  A0W A3W  C2E]
         if unselect_near_unselect [C1E  C3E A3W  A1W]
            alternate_definition [cross] c3
   setup 1x8 1x8 qualifier n_is_1
      preds "Can't tell who is kicking."
         if select   [0   0   CR7W 0   0   0   AL3E 0  ]
         if unselect [Z0N Z1N 0    C2E Z4N Z5N 0    A6W]
   setup 1x8 1x8 qualifier n_is_2
      preds "Can't tell who is kicking."
         if select   [0   0   CR5W 0   0   0   AL1E 0  ]
         if unselect [Z0N C3E 0    C2E Z4N A7W 0    A6W]
   setup 1x8 1x8 qualifier n_is_3
      preds "Can't tell who is kicking."
         if select   [0   0   CR4W 0   0   0   AL0E 0  ]
         if unselect [C1E C3E 0    C2E A5W A7W 0    A6W]

call "bounce the @6" c2
   setup 1x4 2x2 restriction forbidden 2fl_only
      preds "Can't tell who is designated."
         if select [R0S R1S L1S L0S]
         if unselect [M0N M1N M1N M0N]
            alternate_definition [single] c2
   setup 1x2 1x2 rotate
      preds "Can't tell who is designated."
         if select [R0E L0E]
         if unselect [M0W M0W]

call "mark time" c4a
   setup 4x2 2x4 rotate restriction wave_only
      array [CAL3S CAL4S CCR6N CCR1N AAL2S AAL5S ACR7N ACR0N]
            alternate_definition [single] c4a
   setup 2x2 1x4 restriction wave_only
      array [CCR1E AAL3W ACR0E CAL2W]

call "@6 mark time" c4a
   setup 4x2 2x4 rotate
      preds "Can't tell who is selected."
         if select   [    0     0 CCR6N CCR1N AAL2S AAL5S     0     0]
         if unselect [CAL3S CAL4S  CR3S  CR4S  AL7N  AL0N ACR7N ACR0N]
            alternate_definition [single] c4a
   setup 2x2 1x4
      preds "Can't tell who is selected."
         if select   [CCR1E AAL3W     0     0]
         if unselect [ CR2W  AL0E ACR0E CAL2W]

call "box counter rotate" a2 tag boxctrrot
   simple_funny
   setup 2x2 2x2
      array [CR1E AL0W AL1W CR0E]

call "split counter rotate" a2 tag splitctrrot
   simple_funny
   setup 2x4 2x4  /* Need these two to force division into 2x2's instead of
                     1x4's.  Someday we may be able to force that more gracefully. */
      array [CR1E AL0W CR3E AL2W AL3W CR2E AL1W CR0E]
   setup 4x2 2x4
      array [CR1E CR6E CR3E CR4E AL3W AL4W AL1W AL6W]
   setup 2x2 2x2
      array [CR1E AL0W AL1W CR0E]
   setup 1x4 1x4 rotate
      array [CR0N CR1N AL0S AL1S]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1N 0 AL1S]

call "_counter rotate the star" dontshow tag ctrrotstar
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1N 0 AL1S]
   setup star star
      array [CR1E 0 AL1W 0]

call "box counter couple up" c3x tag box_ctr_couple_up
   simple_funny
   setup 2x2 2x2
      array [CR1W AL0E AL1W CR0E]

call "rotate 1/4" c2 tag rot1
            parallel_conc_end       /* This makes it win if we tell the ends only
                                          to do a single rotate 1/4.  Is this OK? */
            reverse_means_mirror
   setup 4x2 1x8 rotate restriction forbidden couples_only
      array [CAL5W CAL6W AL2E AL1E AL0E AL3E CAL7W CAL4W]
   setup 2x4 1x8 restriction forbidden couples_only
      array [AL1S AL0S AL7S AL6S CAL4N CAL5N CAL2N CAL3N]
   setup 2x2 1x4 restriction forbidden couples_only
      array [AL1S AL0S CAL2N CAL3N]
            /* This variant of the call is only C1, even though the call "rotate"
               itself is C2.  This makes it possible to do a
               squared-set single rotate at C1.  The squared-set rotate,
               legal at C1, invokes this.  Level-checking is not done on
               invocation, but it is done on alternate definitions of invoked
               calls.  Declaring the single version of this call to be C1
               when the call itself is C2 therefore makes this legal from a
               squared set.  Direct use of single rotate at C1 is not legal,
               because it won't get past the C2 level in the call header. */
            alternate_definition [single] c1
   setup 4x2 2x4 rotate
      array [CAL4W CAL5W AL6E AL7E AL0E AL1E CAL2W CAL3W]
   setup 2x4 2x4
      array [AL7S AL0S AL5S AL2S CAL3N CAL4N CAL1N CAL6N]
   setup 2x2 2x2
      array [AL3S AL0S CAL1N CAL2N]
   setup 6x1 1x6 rotate
      array [CAL3W CAL4W CAL5W AL0E AL1E AL2E]
   setup 8x1 1x8 rotate
      array [CAL4W CAL5W CAL6W CAL7W AL0E AL1E AL2E AL3E]
            alternate_definition [singlefile] c4
   setup 4x1 1x4 rotate
      array [CAL2W CAL3W AL0E AL1E]

call "rotate 1/2" c2 tag rot2
            reverse_means_mirror
   setup 4x2 1x8 restriction forbidden couples_only
      array [CAL5W CAL6W AL2E AL1E AL0E AL3E CAL7W CAL4W]
   setup 2x4 2x4 rotate restriction forbidden couples_only
      array [AL5N AL4N AL2N AL3N CAL0S CAL1S CAL7S CAL6S]
   setup 2x2 1x4 rotate restriction forbidden couples_only
      array [AL3N AL2N CAL0S CAL1S]
            alternate_definition [single] c1   /* See comment on "rotate 1/4" above. */
   setup 4x2 2x4
      array [CAL4W CAL5W AL6E AL7E AL0E AL1E CAL2W CAL3W]
   setup 2x4 2x4
      array [AL6E AL7E AL4E AL5E CAL2W CAL3W CAL0W CAL1W]
   setup 2x2 2x2
      array [AL2E AL3E CAL0W CAL1W]
   setup 6x1 1x6
      array [CAL3W CAL4W CAL5W AL0E AL1E AL2E]
   setup 8x1 1x8
      array [CAL4W CAL5W CAL6W CAL7W AL0E AL1E AL2E AL3E]
            alternate_definition [singlefile] c4
   setup 4x1 1x4
      array [CAL2W CAL3W AL0E AL1E]

/* We need "conc_force_lines" on these because we already had so-and-so
   go into the center, so they perceive the elongation of the setup
   incorrectly.  The call "rotate 1/4" has the "parallel_conc_end"
   flag on, saying to go to antispots if it was single, which is not
   what we want here. */

call "rotate 1/4 while the others @1" c1
            sequence_starter reverse_means_mirror single_is_inherited dont_use_in_resolve
   crossconc nullcall [mandatory_anycall] rot1 [inherit_reverse inherit_single conc_force_lines]

call "rotate 1/2 while the others @1" c1
            sequence_starter reverse_means_mirror single_is_inherited dont_use_in_resolve
   crossconc nullcall [mandatory_anycall] rot2 [inherit_reverse inherit_single conc_force_lines]

call "trixie" c3x tag trixie
   setup 2x2 2x2
      array [CR0E AL1W CR2E AL3W]

call "trixie spin" c3x
            visible_fractions finish_means_skip_first_part
   seq trixie []
   seq cast_off_34 []
   seq ctrcrossrun []

call "swap around" a1
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 ZM1N CR2S]

call "circle 4 clockwise" dontshow tag circle4
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 CR3E CR0E]

call "circle by @b X @b" c1
            reverse_means_mirror need_two_numbers
   seq circle4 [inherit_reverse repeat_n]
   seq lft_touch_n_4 [inherit_left shift_one_number]

call "circle by @b X @0" c1
            reverse_means_mirror neednumber
   seq circle4 [inherit_reverse repeat_n]
   seq lft_touch [inherit_left]
   seq nullcall [mandatory_anycall]

call "_touch tone 0 X 0" dontshow tag touchtone00
            left_means_mirror
   setup 2x4 1x8
      array [AL1S 0 CR4S 0 0 ZM6N 0 ZM3N]

call "_finish touch tone @b X @b" dontshow tag fintouchtone
            need_two_numbers
   conc armturn_n4 [] armturn_n4 [suppress_elongation_warnings shift_one_number]

call "touch tone @b X @b" c4a
            left_means_mirror need_two_numbers
   seq touchtone00 [inherit_left]
   seq fintouchtone []

call "_trap it 1/4" dontshow tag trap_1_4
   setup 4x2 bone
      array [CR7E ZM2E ZM1N CR4S AL1S ZM4N ZM2W AL7W]

call "_trap it 1/2" dontshow tag trap_1_2
   setup 4x2 hrglass rotate
      array [CR7N ZM2E ZM0W CR1E AL0E ZM1W ZM6E AL7S]

call "_trap it part 2" dontshow tag trap_2
            neednumber
   conc nullcall [] armturn_n4 [suppress_elongation_warnings]

call "trap it 1/4 X @b" c4
            neednumber
   seq trap_1_4 []
   seq trap_2 []

call "trap it 1/2 X @b" c4
            neednumber
   seq trap_1_2 []
   seq trap_2 []

call "sweep @b (clockwise)" mainstream
            reverse_means_mirror neednumber
   seq circle4 [allow_forced_mod inherit_reverse repeat_n]

call "by golly (clockwise)" c3
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 1E 0E]

call "clean sweep @b" c3x
            reverse_means_mirror neednumber visible_fractions finish_means_skip_first_part
   seq circle4 [allow_forced_mod inherit_reverse repeat_n]
   seq lft_veer_left [allow_forced_mod inherit_left]
   seq tagtheline [allow_forced_mod inherit_left]
   seq leadsrollright [allow_forced_mod inherit_left]

call "walk and dodge" mainstream tag walkndodge
   setup 2x2 2x2 restriction unusual wave_only
      array [ZM1N ZM0N ZM1N ZM0N]
   /* Purists would say 2x1 walk and dodge. */
   setup 3x2 2x3 restriction forbidden wave_only
      array [ZM1N ZM2N ZM3N ZM2N ZM3N ZM4N]
            alternate_definition [cross] c3
   simple_funny
   setup 2x2 2x2 restriction unusual magic_only
      array [M1N M0N M0N M1N]
            alternate_definition [grand] c3x
   setup 4x2 2x4 restriction unusual wave_only
      array [ZM2N ZM5N ZM3N ZM4N ZM3N ZM4N ZM2N ZM5N]
            alternate_definition [1x2] c3
   setup 2x3 2x3
      preds "???"
         if inroller_is_cw_2x3 [ZM1N ZM2N    0    0 0 ZM0N]
         if always             [   0 ZM0N ZM1N ZM2N 0 0  ]
            alternate_definition [1x3] c3
   setup 2x4 2x4
      preds "???"
         if inroller_is_cw [ZM1N ZM2N ZM3N    0    0 0 0 ZM0N]
         if always         [   0 ZM0N ZM1N ZM2N ZM3N 0 0    0]
            alternate_definition [2x1] mainstream
   /* Same as plain walk and dodge, for purists. */
   setup 3x2 2x3 restriction forbidden wave_only
      array [ZM1N ZM2N ZM3N ZM2N ZM3N ZM4N]
            alternate_definition [3x1] c3
   setup 4x2 2x4 restriction forbidden wave_only
      array [ZM1N ZM2N ZM3N ZM4N ZM3N ZM4N ZM5N ZM6N]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate restriction forbidden wave_only
      array [ZM0W ZM1W ZM2W ZM0W ZM1W ZM2W]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [ZM0W ZM1W ZM2W ZM3W ZM0W ZM1W ZM2W ZM3W]

call "with the flow (clockwise)" c2
            dont_use_in_resolve reverse_means_mirror
   setup 2x2 2x2
      array [0 0 3N 0N]

call "and a quarter more (to left)" c4
            dont_use_in_resolve reverse_means_mirror
   setup 1x2 1x2 rotate
      array [AL1S AL0S]

call "like a couple up" c3a tag fin_coupleup
   setup 2x2 2x2
      array [CR0S AL1S M2N M3N]

call "couple up (by parts)" c3a tag coupleup
        visible_fractions funny_is_inherited
   seq box_circ [inherit_funny]
   seq fin_coupleup [roll_transparent]

call "couple up" c3a
   simple_funny
   setup 2x2 2x2
      array [CR1S AL0S AL1S CR0S]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate restriction forbidden wave_only
      array [CR0E CR1E CR2E AL0E AL1E AL2E]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [CR0E CR1E CR2E CR3E AL0E AL1E AL2E AL3E]

call "_divide and move along" dontshow tag div_move_along
   setup 2x2 2x2
      array [0S 1S 2N 3N]

/* This is used for "ramble", in which we say that it is "unusual" for
   an end to be facing in, but we allow it. */
call "_leads divide and move along" dontshow tag leads_div_move_along
   setup 2x2 2x2 restriction unusual leads_only
      array [0S 1S 2N 3N]
               alternate_definition [cross] c2
   setup 2x2 2x2     /* but we don't allow "cross ramble" if people are facing in -- too yucky */
      array [1S 0S 0 0]

call "split swap" c2
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 R1E M2E]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 R0N R1N R2N]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 R0N R1N R2N R3N]

call "arky star thru" a2
   setup 2x2 2x2
      array [0 0 L1W R0E]

call "mesh" c3x
            reverse_means_mirror
   setup 2x1 1x2 rotate
      preds "???"
         if columns_tandem [M1W M0W]
         if always         [M1W 0]

call "curlique" c3x tag curlique
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2 restriction forbidden opposite_sex
      preds "Unknown sex."
         if boyp  [CR1E 0]
         if girlp [AL1E 0]

call "curli-cross" c3x
            rear_back_from_r_wave grand_is_inherited visible_fractions finish_means_skip_first_part
   seq curlique [allow_forced_mod]
   seq and_cross [inherit_grand]

call "_finish curli-wheel" dontshow tag fincurliwheel
   setup 2x2 2x2 restriction unusual wave_only
      array [CR1S AL0S AM1S CM0S]

call "curli-wheel" c3x
            rear_back_from_r_wave left_means_mirror first_part_visible finish_means_skip_first_part
   seq curlique [allow_forced_mod]
   seq fincurliwheel []

call "curli-cross the top" c4
            rear_back_from_r_wave grand_is_inherited left_means_mirror first_part_visible finish_means_skip_first_part
   seq curlique [allow_forced_mod]
   seq armturn_14 []
   seq fanthetop [inherit_grand]

call "cross and turn" c1
            reverse_means_mirror
   simple_funny
   setup 2x2 2x2
      array [0 0 A2S Z1N]

call "circle to a wave" c2
            reverse_means_mirror
   setup 2x2 2x2 restriction not_tboned
      array [0 0 0E 1E]
            alternate_definition [single] plus
   setup 2x1 1x2 rotate
      array [CR1E 0]
            alternate_definition [3x3] c4
   setup 2x3 2x3
      array [0 0 0 0E 1E 2E]
            alternate_definition [4x4] c4
   setup 2x4 2x4
      array [0 0 0 0 0E 1E 2E 3E]

call "cross back" c2 tag crossback
   simple_funny
   setup 2x2 2x2 restriction wave_only
      array [CR0S AL1S ZM0N ZM1N]
            alternate_definition [grand] c2
   setup 4x2 2x4 restriction wave_only
      array [ZM6N ZM5N ZM4N CR3S AL4S ZM3N ZM2N ZM1N]

call "shakedown" c1 tag shakedown
            left_means_mirror
   setup 2x2 2x2
      array [CR1W CR2W 0 0]
            alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [0 CR1S]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [CR0S CR1S CR2S 0 0 0]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [CR0S CR1S CR2S CR3S 0 0 0 0]

call "mini shake" c3x
            left_means_mirror
   setup 2x2 2x2
      array [CR1W CR2W AL1W CR0E]

call "wheel thru" a1
            left_means_mirror
   setup 2x2 2x2
      array [0 0 CR2E CR1E]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 CR2N CR1N CR0N]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 CR3N CR2N CR1N CR0N]

call "@glead @eright@f" mainstream
            left_means_mirror
   setup 2x2 2x2
      array [0 0 CR2E CR1E]

call "wheel fan thru" c1
            left_means_mirror
   setup 2x2 2x2
      array [0 0 CR2E C3W]

call "wheel fan & cross thru" c3x
            left_means_mirror
   setup 2x2 2x2
      array [0 0 C1E C0W]

call "ripoff" c3
            reverse_means_mirror
   setup 2x2 2x2
      array [CR1S CR2N ZM3N ZM0N]

call "boomerang" c3
   setup 2x2 2x2 restriction forbidden peelable_box
      preds "Can't tell which definition to use."
         if x22_miniwave [L3N R2N M3S M2S]
         if x22_couple [L3N R2N L0S R1S]

call "_leads wheel" dontshow tag leadswheel
            reverse_means_mirror
   setup 2x2 2x2 restriction all_facing_same
      array [AL1S AL0S ZM2N ZM3N]
            alternate_definition [3x3] c4
   setup 2x3 2x3 restriction all_facing_same
      array [AL2S AL1S AL0S ZM3N ZM4N ZM5N]
            alternate_definition [4x4] c4
   setup 2x4 2x4 restriction all_facing_same
      array [AL3S AL2S AL1S AL0S ZM4N ZM5N ZM6N ZM7N]

call "_everyone wheel" dontshow tag everyonewheel
            reverse_means_mirror
   setup 1x2 1x2 restriction forbidden couples_only
      array [AL1S AL0S]
            alternate_definition [3x3] c4
   setup 2x3 2x3
      array [AL2S AL1S AL0S 0 0 0]
            alternate_definition [4x4] c4
   setup 2x4 2x4
      array [AL3S AL2S AL1S AL0S 0 0 0 0]

call "_quarter wheel" dontshow tag quarterwheel
            reverse_means_mirror parallel_conc_end
   setup 1x2 1x2 rotate restriction forbidden couples_only
      array [AL1S AL0S]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only
      array [0 0 0 AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only
      array [0 0 0 0 AL0S AL1S AL3S AL2S]

call "_three quarter wheel" dontshow tag threequarterwheel
            reverse_means_mirror parallel_conc_end
   setup 1x2 1x2 rotate restriction forbidden couples_only
      array [AL0N AL1N]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only
      array [AL5N AL4N AL3N 0 0 0]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only
      array [AL7N AL6N AL4N AL5N 0 0 0 0]

call "_finish wheel the ocean" dontshow tag finwheelocean
            reverse_means_mirror
   setup 2x2 2x2
      /* Note that we allow left miniwaves, so we can have
         so-and-so start a wheel the ocean. */
      array [0 Z1N Z0N Z3N]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 M5W M4W M3W]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 M7W M6W M5W M4W]

call "_finish wheel the sea" dontshow tag finwheelsea
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 Z1N Z2N]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 M0W M1W M2W]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 M0W M1W M2W M3W]

call "_finish wheel to a diamond" dontshow tag finwheeltodiamond
            reverse_means_mirror
   setup 2x2 dmd rotate
      array [0 0 3W L2S]

call "leads wheel the ocean" c2
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq leadswheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelocean [inherit_reverse inherit_3x3 inherit_4x4]

call "leads wheel the sea" c2
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq leadswheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelsea [inherit_reverse inherit_3x3 inherit_4x4]

call "leads wheel to a diamond" c4
            reverse_means_mirror visible_fractions
   seq leadswheel [inherit_reverse]
   seq finwheeltodiamond [inherit_reverse]

call "wheel the ocean" c2
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq everyonewheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelocean [inherit_reverse inherit_3x3 inherit_4x4]

call "wheel the sea" c2
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq everyonewheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelsea [inherit_reverse inherit_3x3 inherit_4x4]

call "wheel to a diamond" c4
            reverse_means_mirror visible_fractions
   seq everyonewheel [inherit_reverse]
   seq finwheeltodiamond [inherit_reverse]

call "quarter wheel the ocean" c3a
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq quarterwheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelocean [inherit_reverse inherit_3x3 inherit_4x4]

call "quarter wheel the sea" c3a
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq quarterwheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelsea [inherit_reverse inherit_3x3 inherit_4x4]

call "quarter wheel to a diamond" c4
            reverse_means_mirror visible_fractions
   seq quarterwheel [inherit_reverse]
   seq finwheeltodiamond [inherit_reverse]

call "three quarter wheel the ocean" c3x
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq threequarterwheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelocean [inherit_reverse]

call "three quarter wheel the sea" c3x
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq threequarterwheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelsea [inherit_reverse]

call "three quarter wheel to a diamond" c4
            reverse_means_mirror visible_fractions
   seq threequarterwheel [inherit_reverse]
   seq finwheeltodiamond [inherit_reverse]

call "@gchase @eright@f" plus
            left_means_mirror
   setup 2x2 2x2
      /* The original beau cannot roll.  It is box circulate two positions.
         Callerlab plus definitions, page 1. */
      array [M2S R3N 0 0]

call "mini chase" c3a
            left_means_mirror
   setup 2x2 2x2
      array [R1E R2W 0 0]

call "fan and cross thru" c4
            rear_back_from_r_wave left_means_mirror
   setup 2x2 2x2
      array [0 0 2S 1N]

call "square chain thru" a1
            split_like_square_thru left_means_mirror grand_is_inherited
   seq touch [inherit_left]
   seq crosslockit []
   seq trade []
   seq maybegrandslip [inherit_grand]
   seq trade []
   seq natstepthru []

call "square chain thru to a wave" c1
            split_like_square_thru left_means_mirror grand_is_inherited
   seq touch [inherit_left]
   seq crosslockit []
   seq trade []
   seq maybegrandslip [inherit_grand]
   seq trade []

call "square chain the top" c1
            split_like_square_thru left_means_mirror
   seq touch [inherit_left]
   seq crosslockit []
   seq trade []
   seq fanthetop []
   seq trade []
   seq natstepthru []

call "square chain the top to a wave" c1
            split_like_square_thru left_means_mirror
   seq touch [inherit_left]
   seq crosslockit []
   seq trade []
   seq fanthetop []
   seq trade []

call "@1@7 like a @8recoil" c3a tag recoil
            singlefile_is_inherited diamond_is_legal cross_is_inherited visible_fractions
   seq splitrecycle [or_anycall inherit_singlefile inherit_diamond inherit_cross]
   seq stepnfold [inherit_cross]

call "right anchor 1/4" c3x
   setup 2x2 2x2
      array [0 0 R2E R1E]

call "right anchor 3/4" c3x
   setup 2x2 2x2
      array [R2W R1W 0 0]

call "follow your leader" c3a
   setup 2x4 2x4 restriction wave_only
      array [4W 6E 5W 7E 4E 6W 5E 7W]
            alternate_definition [3x3 12matrix] c4   /* Same as 12 matrix */
   setup 2x6 2x6 restriction wave_only
      array [6W 9E 7W 10E 8W 11E 6E 9W 7E 10W 8E 11W]
            alternate_definition [4x4 16matrix] c4   /* Same as 16 matrix */
   setup 2x8 2x8 restriction wave_only
      array [8W 12E 9W 13E 10W 14E 11W 15E 8E 12W 9E 13W 10E 14W 11E 15W]
            alternate_definition [12matrix] c4
   setup 2x6 2x6 restriction wave_only
      array [6W 9E 7W 10E 8W 11E 6E 9W 7E 10W 8E 11W]
            alternate_definition [16matrix] c4
   setup 2x8 2x8 restriction wave_only
      array [8W 12E 9W 13E 10W 14E 11W 15E 8E 12W 9E 13W 10E 14W 11E 15W]

call "3X1 follow your leader" c4    /* Sigh.... the "left" business makes this dificult. */
            left_means_mirror
   setup 2x4 2x4
      array [4W 5W 0 6W 0 0 7W 0]

call "1X3 follow your leader" c4    /* Sigh.... the "left" business makes this dificult. */
            left_means_mirror
   setup 2x4 2x4
      array [0 4W 0 0 5W 0 6W 7W]

call "gee whiz" c3
   setup 2x4 2x4 rotate
      preds "Can't do this call."
         if lines_miniwave [M5E M5E M2E M2E M0W M0W M7W M7W]
         if lines_couple [R0E R1E L6E L7E M0W M1W M7W M6W]

call "straight fire" c3x
   setup 2x4 2x4 rotate restriction 2fl_only
      array [R0E M1E M6E L7E M1W M4E M3E M6W]

call "fiddle around" c3x
   setup 2x4 2x4 rotate restriction 2fl_only
      array [R0E R1W L6W L7E M1W L4W R3W M6W]

call "lead the class" c3x
   setup 2x4 2x4 restriction wave_only
      array [R4W L6E R5W L7E L0E R6E L5W R3W]

call "scatter circulate" c3a
   simple_funny
   setup 2x4 2x4 restriction 2fl_only
      array [R1S R3S L0S L2S M3N M1N M2N M0N]
   setup 4x2 2x4
      array [M1N M5N 0 0 0 0 M2N M6N]

call "go first class" c3x
   simple_funny
   setup 2x4 2x4 restriction wave_only
      array [R2S L0S R3S L1S M3N M1N M2N M0N]
   setup 4x2 2x4
      array [M1N M5N 0 0 0 0 M2N M6N]

call "with a touch of class" c4a
   setup 2x4 2x4 restriction wave_only
      array [5S 7S 4S 6S 0S 6N 5N 3S]

call "link up" c3a
   setup 2x4 2x4 restriction 2fl_only
   array [7S 0S 3S 4S 1S 6S 5S 2S]
call "and anything" c3x          /* **** not right, need to allow for pushy cast */
   setup 2x4 2x4
   array [0S 2S 1S 3S 4S 6S 5S 7S]

call "_finish set back" dontshow tag finish_set_back
            funny_is_inherited
   conc crossback [inherit_funny] circulate [conc_demand_lines conc_force_lines endscando inherit_funny]

call "set back" c4a
            funny_is_inherited visible_fractions finish_means_skip_first_part
   seq trade []
   seq finish_set_back [inherit_funny]

call "trade the diamond" c3
   seq trade_duck []
   seq sglctrhinge []  /* Can't modify -- dancers wouldn't know
                             whether we meant this one */
   seq diamondcirc [allow_forced_mod]
   seq sglctrhinge []  /* Or this one */

call "_hinge and single centers hinge" dontshow tag hingesglctrhinge
   seq hinge []
   seq sglctrhinge []

call "_single centers hinge" dontshow tag sglctrhinge
            dont_use_in_resolve left_means_mirror
   singleconc hinge [inherit_left] nullcall []

call "you all" c4 tag youall
            left_means_mirror
   singleconc_together hinge [inherit_left] uturnback []

call "beep beep" c4
            visible_fractions finish_means_skip_first_part
   seq hinge [allow_forced_mod]
   seq youall []

call "ends cut in" c4
   setup 2x4 2x4
   array [2S 0S 3S 1S 2N 4S 7S 1N]
call "centers cut out" c4
   setup 2x4 2x4
   array [1S 3S 0S 2S 5S 3N 0N 6S]

call "relay the diamond" c4a
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fin_relay_diamond []

call "_finish relay the diamond" dontshow tag fin_relay_diamond
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
   array [5S 7N 4N 6S 1S 7S 4S 2S]

call "_gamut inner part 1" dontshow tag gamutinner1
   seq nat34thru []
   seq tradethewave [allow_forced_mod]

call "_gamut part 1" dontshow tag gamut1
   conc gamutinner1 [] dblcirc [conc_demand_lines conc_force_lines]

call "gamut" c3a
   seq gamut1 []
   seq cutdiamond [allow_forced_mod]

call "ease off" c3a
   /* The "box_ctr_couple_up" is a little bit sleazy. */
   conc box_ctr_couple_up [] zing [conc_demand_lines conc_force_columns]

call "bias circulate" c3a
   setup 2x4 2x4 restriction wave_only
      array [3S 2S 1S 0S 1N 0N 3N 2N]

call "rotary circulate" c3
   setup 2x4 2x4 restriction wave_only
   array [5N 4N 7N 6N 1N 0N 3N 2N]

call "relay the deucey" plus
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fin_relay_deucey []

call "_finish relay the deucey" dontshow tag fin_relay_deucey
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
   array [5N 4N 7N 6N 1N 0N 3N 2N]

call "twin orbit circulate" c3a
   setup 2x4 2x4 restriction wave_only
      array [AL6N AL7N CR4N CR5N ZM2N ZM3N ZM0N ZM1N]

call "orbit circulate" c3x
            left_means_mirror
   setup 2x4 2x4 restriction wave_only
      array [CR2S CR3S CR4N CR5N ZM2N ZM3N ZM0N ZM1N]

call "barrel of fun" c4a
   setup 2x4 2x4
      array [L2N R4S L1S R3S 0 R0N L5N 0]

call "roll em" c4a
            left_means_mirror
   setup 2x4 2x4
      array [CR1S CR2S CR3S CR4N 0 0 0 0]
   setup 2x3 2x3
      array [CR1S CR2S CR3N 0 0 0]
            alternate_definition [12matrix] c4a
   setup 2x6 2x6
      array [CR1S CR2S CR3S CR4S CR5S CR6N 0 0 0 0 0 0]
            alternate_definition [16matrix] c4a
   setup 2x8 2x8
      array [CR1S CR2S CR3S CR4S CR5S CR6S CR7S CR8N 0 0 0 0 0 0 0 0]

call "roll out the barrel" c4a
   setup 2x4 2x4
   array [1N 6N 7N 0N 0 0 0 0]

call "_line to line part 1" dontshow tag line_line_1
   conc turnthru [] pass_in [conc_demand_lines conc_force_columns]

call "_line to line part 2" dontshow tag line_line_2
   crossconc passthru [conc_demand_columns] clover [conc_demand_lines conc_force_columns]

call "line to line" c3
            visible_fractions finish_means_skip_first_part
   seq line_line_1 []
   seq line_line_2 []
   seq pass_in [allow_plain_mod]

call "plan ahead" c3a
            rear_back_from_r_wave left_means_mirror
   setup 2x4 2x4
   array [0 0 0 0 ACR2W R0E 3W CR5W]

call "take @9" c3
            left_means_mirror neednumber
   setup 2x4 spindle qualifier n_is_1
      array [CM0E CM1E CM2E CR3W 0 0 0 0]
   setup 2x4 2x4 qualifier n_is_2
      array [CM1E CM2E CR3W CR4W 0 0 0 0]
   setup 2x4 3dmd rotate qualifier n_is_3
      array [CM11N CR0S CR1S CR2S 0 0 0 0]
   setup 2x4 2x4 rotate qualifier n_is_4
      array [CR0S CR1S CR2S CR3S 0 0 0 0]

call "hang loose" c3x
   setup 2x4 2x4 rotate restriction wave_only
      array [AAAACR7N CR1S AL6N CCCCAL0S AACR2S CCAL0S AACR7N CCAL5N]

/* The next few items make clear how useful "criss-cross" as a heritable
   modifier will be. */

call "0 steps at a time" c3      /* Can't enter number zero!!!!  Yuk! */
   setup 4x2 2x4 restriction wave_only
      array [CR7W CR6W CR5W CR4W AL3E AL2E AL1E AL0E]

call "@9 steps at a time" c3
            neednumber
   setup 4x2 3x4 rotate restriction wave_only qualifier n_is_1
      array [CR7S CR5S CR2S AL10N CR4S AL1N AL11N AL8N]
   setup 4x2 2x4 rotate restriction wave_only qualifier n_is_2
      array [CR5S CR2S AL0N AL7N CR4S CR3S AL1N AL6N]
   setup 4x2 3x4 rotate restriction wave_only qualifier n_is_3
      array [CR5S AL0N AL10N AL9N CR6S CR4S CR3S AL11N]
   setup 4x2 2x4 restriction wave_only qualifier n_is_4
      array [AL3E AL2E AL1E AL0E CR7W CR6W CR5W CR4W]
            alternate_definition [cross] c3x
   setup 4x2 3x4 rotate restriction wave_only qualifier n_is_1
      array [CR7S CR5S CR2S CR4S AL10N AL1N AL11N AL8N]
   setup 4x2 2x4 rotate restriction wave_only qualifier n_is_2
      array [CR5S CR2S CR3S CR4S AL7N AL0N AL1N AL6N]
   setup 4x2 3x4 rotate restriction wave_only qualifier n_is_3
      array [CR5S CR3S CR4S CR6S AL9N AL10N AL0N AL11N]
   setup 4x2 2x4 restriction wave_only qualifier n_is_4
      array [CR4W CR5W CR6W CR7W AL0E AL1E AL2E AL3E]
            alternate_definition [magic] c3x
   setup 4x2 2x4 rotate restriction magic_only qualifier n_is_2
      array [AL6N CR2S CR3S AL7N CR4S AL0N AL1N CR5S]
            alternate_definition [magic cross] c3x
   setup 4x2 2x4 rotate restriction magic_only qualifier n_is_2
      array [AL6N CR2S AL0N CR4S AL7N CR3S AL1N CR5S]

call "criss-cross @9 steps at a time" c3x
   setup 4x2 3x4 rotate restriction wave_only qualifier n_is_1
      array [AL8N AL11N AL1N CR4S AL10N CR2S CR5S CR7S]
   setup 4x2 2x4 rotate restriction wave_only qualifier n_is_2
      array [AL6N AL1N CR3S CR4S AL7N AL0N CR2S CR5S]
   setup 4x2 3x4 rotate restriction wave_only qualifier n_is_3
      array [AL11N CR3S CR4S CR6S AL9N AL10N AL0N CR5S]

call "barge thru" c4
            visible_fractions split_like_square_thru
   seq square_thru_2 []
   seq trade_by []

call "square the barge" c4
            split_like_square_thru
   seq square_thru_4 []
   seq trade_by []

call "square the barge 3/4" c4
            split_like_square_thru
   seq square_thru_3 []
   seq trade_by []

call "wipe out" c4a
   setup 2x4 2x4
   array [2N 3S 0S 1N 6N 7S 4S 5N]
call "stroll down the lane" c4a
            reverse_means_mirror
   setup 2x4 2x4
   array [0 0 0 0 6N 0N 5S 3S]

call "chuck-a-luck" c3
   setup 2x4 2x4
      array [2E 7E 4W 1W 6W 0 0 5E]
            alternate_definition [cross] c3
   setup 2x4 2x4
      array [5E 4W 7E 6W 1W 0 0 2E]

call "bias trade circulate" c4
   setup 2x4 2x4 restriction wave_only
      array [2S 3S 0S 1S 0N 1N 2N 3N]

call "mix the line" c4
            left_means_mirror
   setup 2x4 2x4
      array [0 0 0 0 CR4E CR3E AL1W AL6W]
            alternate_definition [single] c4
   setup 2x2 1x4
      array [0 0 CR2E AL1W]

call "bend the line" mainstream tag bendtheline
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden couples_only
      array [CR0E CR3E AL1W AL2W]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only
      array [CR5N CR4N CR3N AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only
      array [CR7N CR6N CR4N CR5N AL0S AL1S AL3S AL2S]

call "retreat the line" c4
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden couples_only
      array [AL3W AL0W CR2E CR1E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only
      array [AL3S AL4S AL5S CR2N CR1N CR0N]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only
      array [AL4S AL5S AL7S AL6S CR3N CR2N CR0N CR1N]

call "ends bend" a1 tag endsbend
   setup 2x4 2x4 rotate
      array [R7N M6W M1W L0S 0 M2W M5W 0]
   setup 4x2 2x4 rotate
      array [0 M6W M1W 0 0 M2W M5W 0]

call "square the bases" c1
   setup 2x4 2x4 rotate
   array [0 0 0 0 AM5E AL3W CR4W CM2E]

call "square the bases plus 2" c3x
   setup 2x4 2x4 rotate
   array [0 0 0 0 AAL7E AM1W CM6W CCR0E]

call "_ends regroup" dontshow tag eregroup
   setup 2x2 2x2     /* This is quarter out and trade, but they must be leads. */
      array [A3E C2W 0 0]   /* We say that roll is ill-defined for these people. */

call "regroup" c1
   conc trade_and_roll [] eregroup [conc_demand_lines conc_force_lines endscando]

call "_ends trip the set" dontshow tag etripset
   setup 2x2 2x2     /* This is trade and roll, but they must be leads. */
      array [CR1W AL0E 0 0]

call "central trip the set" dontshow tag ctripset
   setup 2x2 2x2     /* This is quarter out and trade. */
      array [AL3E CR2W CAL1W ACR0E]

call "trip the set" c3a
   conc ctripset [] etripset [conc_demand_lines conc_force_lines endscando]

call "siamese breakdown" c4
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0E AL0E]
         if always [0 AL1E]
   setup 2x1 1x2 rotate
      array [AL0E CR1E]

call "_cross to dmd part 1" dontshow tag cross_to_dmd_1
   setup 2x4 2x4
      array [M1N R3S L0S M2N M5N M3N M0N M6N]

call "cross to a diamond" c4a
   seq cross_to_dmd_1 []
   seq sglctrhinge [roll_transparent]

call "_cross to wv part 2" dontshow tag cross_to_wv_2
   setup 2x4 2x4
      array [R2S M0N M3N L1S M2N M4N M7N M1N]

call "cross to a wave" c4
   seq sglctrhinge []
   seq cross_to_wv_2 []

call "presto" c4a
   setup 2x4 2x4 rotate restriction 2fl_only
   array [1E 2E 5E 6E 7E 4E 3E 0E]

call "follow and cross" c4
   setup 2x4 2x4 rotate restriction wave_only
      array [R6N L6S R1N L1S L0S M4S M3N R7N]

call "follow and criss-cross" c4
   setup 2x4 2x4 rotate restriction wave_only
      array [L6S R6N L1S R1N L0S M4S M3N R7N]

call "_lines walk nowhere" dontshow tag lines_walk_nowhere
   setup 2x4 2x4 rotate
      array [0 0 0 0 ZM0W ZM2W ZM5W ZM7W]

call "lines walk @h" c4
   seq lines_walk_nowhere []
   seq quarter_maybe []

call "_sort of ends bend" dontshow tag sortofendsbend
   setup 2x2 2x2
      array [R0E L1W 0 0]

call "_centers scramble" dontshow tag cscramble
            visible_fractions finish_means_skip_first_part
   seq quarterin []
   seq crosstrail []

call "_ends scramble" dontshow tag escramble
            visible_fractions finish_means_skip_first_part
   seq sortofendsbend []
   seq turnthru []

call "scramble" c3
            visible_fractions finish_means_skip_first_part
   conc cscramble [] escramble [conc_demand_lines conc_force_lines endscando]

call "ferris wheel" mainstream
   setup 2x4 2x4 rotate restriction forbidden 2fl_only
      array [R0E R7E L0E L7E L6E L1E R6E R1E]
            alternate_definition [single] c3x
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [R0E L0E L1E R1E]

call "step lively" c4
            visible_fractions finish_means_skip_first_part
   seq wave_detour []
   seq slimdown []
   seq circulate []

call "recount" c4a
   setup 2x4 2x4 rotate restriction wave_only
      array [CR0N AL6S CR1N AL7S AL1S CR3S AL4N CR6N]

call "ferris to a column" c4
   setup 2x4 2x4 rotate restriction 2fl_only
      array [C1E C0E A7E A6E Z0W A5E C2E Z7W]

call "rip saw" c4
   setup 2x4 2x4 rotate
   array [2E 0E 7E 5E 0 4W 3W 0]

call "cast a shadow" a1
   setup 2x4 2x4 rotate restriction forbidden ends_are_peelable
      array [AAM7S AL6N CR1S CCM0N CM3S AM6S CM1N AM4N]

call "criss-cross the shadow" c2
   setup 2x4 2x4 rotate restriction forbidden ends_are_peelable
      array [AACM7N AL5N CR2S CCAM0S AM3N CM1N AM6S CM4S]

call "shadow to a diamond" c4a
   setup 2x4 qtag restriction forbidden ends_are_peelable
      array [M0W L6S R2S M1E M4W L7S R3S M5E]

call "_chisel1" dontshow tag chisel1
   conc pass_in [] pass_in [conc_demand_lines conc_force_lines endscando]

call "_chisel2" dontshow tag chisel2
   conc pass_out [] pass_in [conc_demand_lines conc_force_columns endscando]

call "_chisel3" dontshow tag chisel3
   crossconc quarterin [conc_demand_columns] quarterin [conc_force_lines]

call "chisel thru" c2
            visible_fractions finish_means_skip_first_part
   seq chisel1 []
   seq chisel2 []
   seq chisel3 [allow_plain_mod]

call "load the boat" plus
            rear_back_from_r_wave
   setup 2x4 2x4
      array [0 0 0 0 L7E M6W M5E R4W]

call "_start confidence" dontshow tag startconfidence
   conc hingesglctrhinge [] half_circ []

call "_end confidence" dontshow tag endconfidence
   setup crosswave 2x4 qualifier ctrwv_end2fl
      array [M0N M1N 0 0 M3N M2N 0 0]
   setup pcrosswave 2x4 qualifier ctrwv_end2fl
      array [0 0 R3E L1E 0 0 L4W R6W]
   setup crosswave 2x4 rotate qualifier ctr2fl_endwv
      array [R7N L5N 0 0 L0S R2S 0 0]
   setup pcrosswave 2x4 rotate qualifier ctr2fl_endwv
      array [0 0 M0W M1W 0 0 M3W M2W]

call "with confidence" c3
   seq startconfidence []
   seq endconfidence []

call "criss-cross the deucey" c3
   setup 2x4 2x4 rotate restriction forbidden wave_only
   array [1N 5N 2S 6S 3S 3N 4S 4N]

call "easy does it" c4a
   setup 2x4 2x4 rotate
   array [4N 5N 2S 3S 0S 1S 6N 7N]

call "_centers 1/4 / ends half-circ" dontshow tag lilquarterdeucey2
            dont_use_in_resolve 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star armturn_14 [] half_circ [conc_demand_lines]

call "_centers 1/4 / ends move up" dontshow tag lilquarterdeucey4
            dont_use_in_resolve 12_matrix_is_inherited 16_matrix_is_inherited
   conc_diamond_line armturn_14 [] spec_drop_in [inherit_12_matrix inherit_16_matrix suppress_elongation_warnings]

call "_centers @b / ends half-circ" dontshow tag quarterdeucey2
            dont_use_in_resolve neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star armturn_n4 [] half_circ [conc_demand_lines]

call "_centers @b / ends move up" dontshow tag quarterdeucey4
            dont_use_in_resolve neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   conc_diamond_line armturn_n4 [] spec_drop_in [inherit_12_matrix inherit_16_matrix suppress_elongation_warnings]

call "quarter the deucey" c3a
            step_to_wave left_means_touch_or_check 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_14 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq lilquarterdeucey2 [inherit_12_matrix inherit_16_matrix]
   seq turnstar1_endsnothing [inherit_12_matrix inherit_16_matrix]
   seq lilquarterdeucey4 [inherit_12_matrix inherit_16_matrix]

call "@9-@9-@9-@9 quarter the deucey" c4
            step_to_wave left_means_touch_or_check need_four_numbers 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_n4 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq quarterdeucey2 [inherit_12_matrix inherit_16_matrix shift_one_number]
   seq turnstarn_endsnothing [inherit_12_matrix inherit_16_matrix shift_two_numbers]
   seq quarterdeucey4 [inherit_12_matrix inherit_16_matrix shift_three_numbers]

/* We can't be bothered with roll direction. */
call "_finish linear flow" dontshow tag fin_lin_flow
   setup 2x4 2x4
      array [C6S A7S C4S A5S A2S C3S A0S C1S]

call "_finish cross linear flow" dontshow tag fin_xlin_flow
   setup 2x4 2x4
      array [C6S C4S A7S A5S A2S A0S C3S C1S]

call "_finish criss-cross linear flow" dontshow tag fin_xxlin_flow
   setup 2x4 2x4
      array [C5S C4S A7S A6S A1S A0S C3S C2S]

call "linear flow" c3x
   seq hinge []
   seq natural_vertical_half_tag []
   seq fin_lin_flow []
   seq slip []

call "linear flow but cross it" c3x
   seq hinge []
   seq natural_vertical_half_tag []
   seq fin_xlin_flow []
   seq slip []

call "linear flow but criss-cross it" c3x
   seq hinge []
   seq natural_vertical_half_tag []
   seq fin_xxlin_flow []
   seq slip []

call "@2tagg@3er's flow" c3x
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq fin_lin_flow []
   seq slip []

call "@2tagg@3er's flow but cross it" c3x
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq fin_xlin_flow []
   seq slip []

call "@2tagg@3er's flow but criss-cross it" c3x
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq fin_xxlin_flow []
   seq slip []

call "_eroo" dontshow tag eroo
            dont_use_in_resolve
   setup 2x4 2x4 rotate
   array [0N 4N 3S 7S 2N 2S 5N 5S]

call "_the top" dontshow tag tagthetop
            dont_use_in_resolve
   /* Sorry about lack of stability info for everyone..... */
   setup 2x4 1x8 rotate
      array [CR1S L0S R0N AL1N R2N CR7S AL7N L2S]

call "_and trade" dontshow tag tagntrade
            dont_use_in_resolve
   setup 2x4 qtag
      array [CR1S CR1S AL0S AL0S AL7S AL6S CR2S CR3S]

call "_delight" dontshow tag delight
            dont_use_in_resolve
   setup 2x4 2x4 rotate
   array [3S 3S 4S 4S 1S 1N 6S 6N]

call "_dilemma" dontshow tag dilemma
            dont_use_in_resolve
   setup 2x4 2x4 rotate
   array [3N 3N 4N 4N 1S 1N 6S 6N]

call "_dream" dontshow tag dream
            dont_use_in_resolve
   setup 2x4 2x4 rotate
      preds "Unknown sex."
         if boyp [0N 0N 3S 3S 0 2S 0 1N]
         if girlp [0N 0N 3S 3S 0 2N 0 1S]

call "_nightmare" dontshow tag nightmare
            dont_use_in_resolve
   setup 2x4 2x4 rotate
      preds "Unknown sex."
         if boyp [4N 4N 7S 7S 0 2S 0 1N]
         if girlp [4N 4N 7S 7S 0 2N 0 1S]

/* same def'n as follow your leader, obviously */
call "_your leader" dontshow tag leader
            dont_use_in_resolve
   setup 2x4 2x4 restriction forbidden wave_only
   array [4W 6E 5W 7E 4E 6W 5E 7W]

/* same def'n as lead the class, obviously */
call "_the class" dontshow tag class
            dont_use_in_resolve
   setup 2x4 2x4 restriction forbidden wave_only
   array [4W 6E 5W 7E 0E 6E 5W 3W]

/* same as 1/2 box circulate */
call "_to a diamond" dontshow tag toadiamond
            dont_use_in_resolve
   setup 2x2 dmd rotate
      array [CR0N AL0S ZM1W ZM3W]

call "@2tag @3your neighbor" c2
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq neighbor []

call "@2tagg@3eroo" c4a
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq eroo []

call "@2tag @3the top" c3
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq tagthetop []

call "3/4 @2tag @3 and trade" c4
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq tagntrade []

call "@2tagg@3er's delight" c3a
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq delight []

call "@2tagg@3er's dilemma" c3a
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq dilemma []

call "@2tagg@3er's dream" c4a
            first_part_visible finish_means_skip_first_part
   seq halftag [or_anycall must_be_tag_call]
   seq dream []

call "@2tagg@3er's nightmare" c4a
            first_part_visible finish_means_skip_first_part
   seq halftag [or_anycall must_be_tag_call]
   seq nightmare []

call "@2tag @3your leader" c3a
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq leader []

call "@2tag @3the class" c4
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq class []

call "@2tag @3to a diamond" c4
            first_part_visible finish_means_skip_first_part left_means_mirror
   seq halftag [or_anycall must_be_tag_call inherit_left]
   seq toadiamond []

call "very center 2 trade" dontshow tag veryctr2trade
   conc2_6 trade [] nullcall []

call "double the wave" c4a
            step_to_wave left_means_touch_or_check visible_fractions finish_means_skip_first_part
   seq fanthetop [allow_forced_mod]
   seq veryctr2trade [allow_forced_mod]

call "hot foot spin" c4a
            step_to_wave left_means_touch_or_check visible_fractions finish_means_skip_first_part
   seq fanthetop [allow_forced_mod]
   seq veryctr2trade [allow_forced_mod]
   seq spinthetop [allow_forced_mod]

call "_finish cast a net" dontshow tag fincastanet
            dont_use_in_resolve
   setup crosswave 1x8
      array [C2S A1S 0 0 A6S C5S 0 0]
   setup pcrosswave 1x8
      array [0 0 C4E C3W 0 0 A4W A3E]

call "cast a net" c4a
            first_part_visible finish_means_skip_first_part
   seq half_circ [allow_forced_mod]
   seq fincastanet []

call "pass the top" c4a
            rear_back_from_r_wave left_means_mirror
   setup 2x4 2x4
   array [0 0 0 0 1S 7N 0S 2S]

call "in roll circulate" a2
   setup 2x4 2x4
      preds "???"
         if inroller_is_cw [CR1S CR2S CR3S    0    0 AL6S AL7S ZM0N]
         if always         [   0 AL0S AL1S AL2S ZM3N CR4S CR5S    0]
   setup 2x3 2x3
      preds "???"
         if inroller_is_cw_2x3 [CR1S CR2S    0    0 AL5S ZM0N]
         if always             [   0 AL0S AL1S ZM2N CR3S    0]
            alternate_definition [12matrix] c3
   setup 2x6 2x6
      preds "???"
         if inroller_is_cw_2x6 [CR1S CR2S CR3S CR4S CR5S    0    0 AL8S AL9S AL10S AL11S ZM0N]
         if always             [   0 AL0S AL1S AL2S AL3S AL4S ZM5N CR6S CR7S  CR8S CR9S     0]
            alternate_definition [16matrix] c3
   setup 2x8 2x8
      preds "???"
         if inroller_is_cw_2x8 [CR1S CR2S CR3S CR4S CR5S CR6S CR7S    0    0  AL10S AL11S AL12S AL13S AL14S AL15S ZM0N]
         if always             [   0 AL0S AL1S AL2S AL3S AL4S AL5S AL6S ZM7N   CR8S  CR9S CR10S CR11S CR12S CR13S    0]
            alternate_definition [magic] c3
   setup 2x4 2x4
      preds "???"
         if magic_inroller_is_cw [CR6S AL7S AL1S    0    0 CR3S CR5S ZM0N]
         if always               [   0 CR2S CR4S AL5S ZM3N AL6S AL0S    0]
   setup 2x3 2x3
      preds "???"
         if magic_inroller_is_cw_2x3 [CR4S AL5S    0    0 CR2S ZM0N]
         if always                   [   0 CR3S AL4S ZM2N AL0S    0]

call "out roll circulate" a2
   setup 2x4 2x4
      preds "???"
         if outroller_is_cw [   0 CR2S CR3S AL0S AL5S AL6S AL7S    0]
         if always          [CR3S AL0S AL1S    0    0 CR4S CR5S CR6S]
   setup 2x3 2x3
      preds "???"
         if outroller_is_cw_2x3 [   0 CR2S AL0S AL4S AL5S    0]
         if always              [CR2S AL0S    0    0 CR3S CR4S]
            alternate_definition [12matrix] c3
   setup 2x6 2x6
      preds "???"
         if outroller_is_cw_2x6 [   0 CR2S CR3S CR4S CR5S AL0S AL7S AL8S AL9S AL10S AL11S     0]
         if always              [CR5S AL0S AL1S AL2S AL3S    0    0 CR6S CR7S  CR8S  CR9S CR10S]
            alternate_definition [16matrix] c3
   setup 2x8 2x8
      preds "???"
         if outroller_is_cw_2x8 [   0 CR2S CR3S CR4S CR5S CR6S CR7S AL0S AL9S AL10S AL11S AL12S AL13S AL14S AL15S     0]
         if always              [CR7S AL0S AL1S AL2S AL3S AL4S AL5S    0    0 CR8S  CR9S  CR10S CR11S CR12S CR13S CR14S]
            alternate_definition [magic] c3
   setup 2x4 2x4
      preds "???"
         if magic_outroller_is_cw [   0 AL7S AL1S AL0S AL2S CR3S CR5S    0]
         if always                [CR3S CR2S CR4S    0    0 AL6S AL0S CR1S]
   setup 2x3 2x3
      preds "???"
         if magic_outroller_is_cw_2x3 [   0 AL5S AL0S AL1S CR2S    0]
         if always                    [CR2S CR3S    0    0 AL0S CR1S]

call "zoom roll circulate" c4
   setup 2x4 2x4
      preds "???"
         if outroller_is_cw [   0 CR2S CR3S CR4N AL5S AL6S AL7S    0]
         if always          [AL7N AL0S AL1S    0    0 CR4S CR5S CR6S]
   setup 2x3 2x3
      preds "???"
         if outroller_is_cw_2x3 [   0 CR2S CR3N AL4S AL5S    0]
         if always              [AL5N AL0S    0    0 CR3S CR4S]
            alternate_definition [12matrix] c3
   setup 2x6 2x6
      preds "???"
         if outroller_is_cw_2x6 [    0 CR2S CR3S CR4S CR5S CR6N AL7S AL8S AL9S AL10S AL11S     0]
         if always              [AL11N AL0S AL1S AL2S AL3S    0    0 CR6S CR7S  CR8S  CR9S CR10S]
            alternate_definition [16matrix] c3
   setup 2x8 2x8
      preds "???"
         if outroller_is_cw_2x8 [    0 CR2S CR3S CR4S CR5S CR6S CR7S CR8N AL9S AL10S AL11S AL12S AL13S AL14S AL15S     0]
         if always              [AL15N AL0S AL1S AL2S AL3S AL4S AL5S    0    0 CR8S  CR9S  CR10S CR11S CR12S CR13S CR14S]
            alternate_definition [magic] c4
   setup 2x4 2x4
      preds "???"
         if magic_outroller_is_cw [   0 AL7S AL1S CR4N AL2S CR3S CR5S    0]
         if always                [AL7N CR2S CR4S    0    0 AL6S AL0S CR1S]
   setup 2x3 2x3
      preds "???"
         if magic_outroller_is_cw_2x3 [   0 AL5S CR3N AL1S CR2S    0]
         if always                    [AL5N CR3S    0    0 AL0S CR1S]

call "trade circulate" a2
            take_right_hands
   setup 2x4 2x4
      preds "Can't determine whether waves or two-faced lines."
         if lines_miniwave [CR2S CR3S AL0S AL1S ZM2N ZM3N ZM0N ZM1N]
         if lines_couple   [CR1S AL0S CR3S AL2S ZM1N ZM0N ZM3N ZM2N]
            alternate_definition [12matrix] c3
   setup 3x4 3x4
      preds "Can't determine whether waves or two-faced lines."
         if lines_miniwave [CR2S CR3S AL0S AL1S ZM2N ZM3N ZM5N ZM4N ZM10N ZM11N ZM1N ZM0N]
         if lines_couple   [CR1S AL0S CR3S AL2S ZM1N ZM0N ZM11N ZM10N ZM4N ZM5N ZM2N ZM3N]

call "outpost" c3x
            left_means_mirror
   setup 2x4 2x4 rotate
      preds "Can't determine outpost direction."
         if outposter_is_cw  [M7N L2N M4S L5N M3S L6S M0N   0]
         if outposter_is_ccw [R2S M3N R5S M0S   0 M7S R1N M4N]

call "chip off" c3x
            left_means_mirror
   setup 2x4 2x4
      preds "Can't determine direction to go."
         if outposter_is_cw [M1N R2S R3S 4S M5N L6S 0 0]
         if outposter_is_ccw [7S L0S L1S M2N 0 0 R5S M6N]

call "ship ahoy" c3x
   setup 2x4 2x4 rotate
      preds "???"
         if outroller_is_cw [0 R1E L0E L7E M2W L5E L4W 0]
         if always [R0E R7E L6E 0 0 R3W R2E M5W]

call "extend" mainstream tag extend
   setup 4x1 dmd qualifier 2fl_only  /* 0/4 tag to 1/4 tag */
      array [0N 1N 0 0]
   setup 2x2 dmd rotate qualifier miniwaves
      array [0W 0W 1W 3W]            /* 1/2 tag to 3/4 tag */
   setup pmd 1x4 qualifier 3_4_tag   /* 3/4 tag to 4/4 tag */
      array [0 3N 2N 3N]
   setup pmd 2x2
      preds "???"                    /* 1/4 tag to 1/2 tag */
         if dmd_ctrs_rh [0N 1N 0 2N]
         if always [3N 1N 0 2N]
   setup 2x1 1x2 rotate
      array [0W 0]         /* People facing: touch. */
   setup 1x2 1x2 rotate qualifier miniwaves
      array [0W 0W]        /* Lone miniwave: step thru. */

call "cross town roll" c4a
   setup 2x2 dmd rotate restriction forbidden wave_only
      array [R1E L3E L2E R2E]
   setup pmd 2x2
      preds "???"
         if dmd_ctrs_rh [M0N R3S 0 0]
         if always [M3N 0 0 L0S]

call "inlet" c2
            diamond_is_legal
   setup 2x4 qtag restriction forbidden wave_only
      array [CR1S AL6S CR2S AL0S AL3S CR4N AL5N CR7S]
            alternate_definition [diamond] c4
   setup 2x4 qtag restriction forbidden wave_only
      array [CR1E AL6S CR2S AL0W AL3S CR4W AL5E CR7S]

call "outlet" c2
            diamond_is_legal
   setup qtag 2x4 restriction forbidden wave_only
      preds "Must be in quarter tag setup."
         if q_tag_front [0 0 AL2S CR4S ZM7N ZM4N CR1S AL7S]
         if q_tag_back  [0 0 AL2S CR4S AL5S CR6S CR1S AL7S]
            alternate_definition [diamond] c4
   setup qtag 2x4 restriction forbidden wave_only
      preds "Must be in diamonds."
         if q_tag_front [0 0 AL2S CR4S 0 0 CR1S AL7S]
         if q_tag_back  [0 0 AL2S CR4S 0 0 CR1S AL7S]
   setup pqtag 2x4 restriction forbidden wave_only
      preds "Must be in diamonds."
         if q_tag_front [CR3E  0   0 0  0   AL4W 0 0]
         if q_tag_back  [ 0   CR2W 0 0 AL5E  0   0 0]

/* **** not really right */
call "sets in motion" c2
   setup 2x4 qtag
   array [2S 5N 5N 6S 3S 4N 4N 3S]

call "trade by" mainstream tag trade_by
   setup 4x2 2x4
      array [0 ZM2N 0 CR4S AL3S 0 ZM5N 0]
   setup 2x4 2x4
      array [0 0 0 0 0 ZM2N ZM1N 0]

call "roll out to a column" c4a
            left_means_mirror
   setup 4x2 2x4 restriction unusual 2fl_only
      array [0 CA5N C6S C4S C5S C7S CA4N 0]
            alternate_definition [3x3 12matrix] c4
   setup 4x3 2x6
      /* We assume the third part has to be "circulate 1-1/2". */
      array [0 CA8N C9S C6S C7S C10S C8S C11S CA6N 0 0 CA7N]
            alternate_definition [4x4 16matrix] c4
      /* We assume the third part has to be "circulate 2". */
   setup 4x4 2x8 rotate
      array [C3E C7E CA0W C6E 0 0 0 CA1W 0 CA3W C4E CA2W C0E C1E C2E C5E]

call "2/3 roll out to a column" c4a
            left_means_mirror
   setup 4x2 2x6
      array [0 CA9N CR8S CR6S CR7S CR9S CA8N 0]
            /* No 3x3 -- can't do 2x9 setup. */
            alternate_definition [4x4 16matrix] c4
   setup 4x4 2x8 rotate
      /* Some people just can't be handled.  Sorry. */
      array [C1E C5E 2W C4E 0 0 0 3W 0 5W C2E 4W 0 0 C0E C3E]

call "hit the wall" c4a
   setup 4x2 2x4
   array [7E 2W 0 4E 3W 0 5E 0W]

call "centers trade" dontshow tag ctrstrade
   conc trade [] nullcall []

call "@6 advance to a column" c4a
            visible_fractions finish_means_skip_first_part
   seq starthopping []
   /* Q: Why use "column circulate" instead of just "circulate"?  Wouldn't
      it be more general and creative to allow any circulate?
      A: It would be way too general.  It would have no defense against
      "beaus advance to a column" from facing lines. */
   seq realcolcirc []
   seq ctrstrade []
   seq realcolcirc []

/* We make this explicitly visible because "finish beaus advance to a column"
   is really stupid. */
call "finish advance to a column" c4a
            visible_fractions
   seq realcolcirc []
   seq ctrstrade []
   seq realcolcirc []

call "swing to a column" c4a
   setup qtag 2x4
      array [0E 5W 0 6W 4W 1E 7W 0]

call "grand chain 8" c2
            rear_back_from_r_wave rear_back_from_qtag left_means_mirror
   setup 2x4 2x4 rotate
   array [0 0 0 0 L7E L6W L1W L0E]
   setup 4x2 2x4
      preds "Can't tell which version of grand chain 8 to do."
         if columns_tandem [L1E L3E 0 0 0 0 L4W L6W]
         if columns_antitandem [L2E 0 L4S 0 0 L3S 0 L5W]

call "chain the square" c2
            rear_back_from_r_wave left_means_mirror
   setup 4x2 2x4 rotate
      array [0W 0 3E 0 0 2E 0 5E]
            alternate_definition [magic] c3
   setup 4x2 2x4 rotate
      array [5E 0 2E 0 0 3E 0 0W]

call "turn away" c4a
            left_means_mirror
   setup 4x2 2x4 rotate
      array [CR5E CR4E CR2E CR3E CM4E CM5E CR7W CR6W]
            alternate_definition [single] c4
   setup 2x2 2x2
      array [CR1S CM2S CR3N CR2S]
            alternate_definition [1x3] c4
   setup 4x2 2x4 rotate
      array [0 CR1E CR2E CR3E CM4E 0 0 0]
            alternate_definition [3x1] c4
   setup 4x2 2x4 rotate
      array [0 0 0 CR3E CM4E CM5E CM6E 0]
            alternate_definition [3x3] c4
   setup 6x2 2x6 rotate
      array [CR8E CR7E CR6E CR3E CR4E CR5E CM6E CM7E CM8E CR11W CR10W CR9W]
            alternate_definition [4x4] c4
   setup 8x2 2x8 rotate
      array [CR11E CR10E CR9E CR8E CR4E CR5E CR6E CR7E CM8E CM9E CM10E CM11E CR15W CR14W CR13W CR12W]

call "@ghang a @eright@f" c4
            left_means_mirror
   setup 4x2 2x4 rotate
      array [0 0 R3E M4E M5E R2E 0 0]
            alternate_definition [single] c4
   setup 4x1 2x2
      array [0 0 M3S R2S]

call "_the axle part 1" dontshow tag axle1
            rear_back_from_qtag
   setup 4x2 2x4 rotate
      array [0 ZM1W ZM1W CR3E AL0E ZM2W ZM2W 0]

call "the axle" c1
            visible_fractions
            /* Finish doesn't mean skip first part.  Maybe it should, but callers
               often say "finish the axle" when they mean "finish pass the axle"
               or just "the axle".  Sigh. */
   seq axle1 []
   seq trade [allow_forced_mod]
   seq slip [allow_forced_mod roll_transparent]

call "@2pass @3the axle" c1
            visible_fractions finish_means_skip_first_part
   seq passthru [or_anycall]
   seq axle1 []
   seq trade [allow_forced_mod]
   seq slip [allow_forced_mod roll_transparent]

call "centers cast off 3/4" dontshow tag ctrmaybecast3
            dont_use_in_resolve single_is_inherited
   maybesingleconc armturn_34 [or_anycall] nullcall []

call "_rotary nothing" dontshow tag rotary
            dont_use_in_resolve left_means_mirror single_is_inherited
   setup 4x2 qtag rotate
      array [M7W 0 L1N 0 0 L0N 0 M2W]
            alternate_definition [single] c3a
   setup 4x1 dmd
      array [M3N 0 0 L2E]
            alternate_definition [magic] c4
   setup 4x2 qtag rotate
      array [M2W 0 L0N 0 0 L1N 0 M7W]

call "rotary @2spin@3" c1
            rear_back_from_r_wave left_means_mirror single_is_inherited magic_is_inherited
   seq rotary [inherit_left inherit_single inherit_magic]
   seq ctrmaybecast3 [inherit_single]

call "_the plank" dontshow tag plank
   conc walkndodge [] leadrun [conc_demand_columns conc_force_columns]

call "@2walk @3the plank" c4
            magic_is_inherited
   seq colcirc [or_anycall inherit_magic]
   seq plank []

call "cut across" c4a
   setup 4x2 2x4
      array [M0W L5W M2W R7W L0E M5E R2E M7E]
   setup 2x4 2x4
      array [R4W R5W L6E L7E M4E M5E M6W M7W]

call "pass and roll your neighbor" a2
            rear_back_from_r_wave left_means_mirror
   setup 4x1 1x4
      array [R0E 0 0 R3E]

call "double your pleasure" c3x
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [L4W R6W R1W M7E M4E L2W L5W R7W]
   setup 3x2 bone6 rotate restriction forbidden wave_only
      array [L3W R5W M4E M3E L2W R4W]
            alternate_definition [magic] c3x
   setup 4x2 2x4 rotate restriction forbidden magic_only
      array [4W 5W 2W 7E 4E 1W 6W 7W]
            alternate_definition [cross] c3x
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [R7W R6W R1W M4E M7E L2W L5W L4W]
   setup 3x2 bone6 rotate restriction forbidden wave_only
      array [R4W R5W M3E M4E L2W L3W]

call "criss-cross double your pleasure" c3x
            take_right_hands
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [L4W R6W R1W M4E M7E L2W L5W R7W]

call "mini pleasure" c4
   setup 4x2 qtag rotate restriction forbidden wave_only
      array [4W 2E 1E 7E 3E 0E 6E 5W]
            alternate_definition [cross] c4
   setup 4x2 qtag rotate
      array [4W 2E 1E 3E 7E 0E 6E 5W]

call "cheerio" c4a
   setup 4x2 2x4 rotate
      preds "???"
         if columns_miniwave [5W 4W 3E 2E 1E 0E 7W 6W]
         if columns_couple   [6W 4W 3E 2E 1E 0E 7W 5W]
         if always            [0 4W 3E 2E 1E 0E 7W 0]

call "something new" c3a
   setup 4x2 qtag rotate
      array [6W 7E 0E 1E 0E 1E 3E 2W]
            alternate_definition [magic] c3
   setup 4x2 qtag rotate
      array [2W 7E 1E 1E 0E 0E 3E 6W]
call "jam thru" c4a
   setup 4x2 2x4 rotate
   array [2N 0 3S 0 0 0N 0 1S]

call "_ride the tide part 2" dontshow tag ridetide2
   conc square_thru_2 [] clover [conc_force_columns conc_demand_columns]

call "ride the tide" c4a
            visible_fractions finish_means_skip_first_part
   seq crosstrail []
   seq ridetide2 []
   seq slidethru []

call "change-O" c4a
   setup 4x2 2x4
      array [6N 5N 3N 4S 3S 4N 2N 1N]
            alternate_definition [reverse] c4
   setup 4x2 2x4
      array [1N 5N 4N 4S 3S 3N 2N 6N]

call "quick step" c3a
   setup 4x2 2x4 restriction forbidden quarterbox_or_magic_col
      preds "Must be in quarter box setup."
         if columns_tandem     [ZM1N ZM2N    0 0 0    0 ZM5N ZM6N]
         if columns_antitandem [AL0S ZM2N CR4S 0 0 AL3S ZM5N CR7S]
         if always             [   0 ZM2N    0 0 0    0 ZM5N    0]  /* This could happen if lots of phantoms. */
/* *** can't do this yet!!!!
   setup 3x2 2x3
      preds "Must be in 2X3 quarter box setup."
             if columns_tandem [1N 3S 0 0 2S 4N]
         if columns_antitandem [0S 3S 0 0 2S 5S]
*/

/* ***** Of course, we really want to do these right!!!! */
call "quick recycle" c3a
   setup 4x2 2x4 restriction forbidden quarterbox_or_magic_col
      preds "Must be in quarter box setup."
         if columns_tandem     [ZM1N ZM2N    0 0 0    0 ZM5N ZM6N]
         if columns_antitandem [AL0N ZM2N CR4S 0 0 AL3S ZM5N CR7N]
         if always             [   0 ZM2N    0 0 0    0 ZM5N    0]  /* This could happen if lots of phantoms. */

call "quick 2/3 recycle" c3a
   setup 4x2 2x4 restriction forbidden quarterbox_or_magic_col
      preds "Must be in quarter box setup."
         if columns_tandem     [ZM1N ZM2N    0 0 0    0 ZM5N ZM6N]
         if columns_antitandem [AL0E ZM2N CR4E 0 0 AL3W ZM5N CR7W]
         if always             [   0 ZM2N    0 0 0    0 ZM5N    0]  /* This could happen if lots of phantoms. */

call "make magic" c1
   setup 4x2 2x4 restriction quarterbox_or_magic_col
      preds "???"
         if columns_tandem      [0N 5N 2N 3N 4N 5N 2N 7N]
         if columns_antitandem  [1N 5N 3N 3N 4N 4N 2N 6N]
         if always              [ 0 5N  0 3N 4N  0 2N  0]  /* This could happen if lots of phantoms. */

call "open up the column" c3a tag openup
   setup 4x2 2x4 restriction forbidden wave_only
   array [0W 2W 3E 5W 2E 4W 5E 7E]
            alternate_definition [magic] c4
   setup 4x2 2x4
   array [7E 2W 5W 4W 3E 2E 5E 0W]

call "_replace the column 1" dontshow tag replacecol1
            dont_use_in_resolve
   setup 4x2 qtag rotate restriction forbidden wave_only
      array [7W AL6E AL5N AL4N CR5S CR4S CR2E 3W]
            alternate_definition [cross] c3x
   setup 4x2 qtag rotate restriction forbidden wave_only
      array [7W CR2E CR4S CR5S AL4N AL5N AL6E 3W]

call "_replace the column 2" dontshow tag replacecol2
            dont_use_in_resolve cross_is_inherited
   conc 23recycle [or_anycall inherit_cross] nullcall []

call "replace the column@7 but @8" c3x
            cross_is_inherited
   seq replacecol1 [inherit_cross]
   seq replacecol2 [inherit_cross]

call "quick wrap" c3x
   setup 4x2 2x4 restriction wave_only
      array [L2W L1E R3E R4E L3W L4W R6W R5E]
            alternate_definition [magic] c3x
   setup 4x2 2x4 restriction magic_only
      array [R5E L1E L4W R4E L3W R3E R6W L2W]
            alternate_definition [2x1] c3x
   setup 3x2 2x3 restriction wave_only
      array [AL1E CR2E CR3E AL2W AL3W CR4W]
            alternate_definition [magic 2x1] c3x
   setup 3x2 2x3 restriction magic_only
      array [CR4W AL3W CR3E AL2W CR2E AL1E]
            alternate_definition [1x2] c3x
   setup 3x2 short6 rotate restriction wave_only
      array [AL0S AL5N CR1N AL1S CR3S CR2N]
            alternate_definition [magic 1x2] c3x
   setup 3x2 short6 rotate restriction magic_only
      array [CR2N AL5N CR1N AL1S CR3S AL0S]

call "dive thru" mainstream
   setup 4x2 2x4
      array [ZM1N 0 CR4S 0 0 AL3S 0 ZM6N]

call "pass to the center" mainstream
            rear_back_from_r_wave
   setup 4x2 2x4
      array [ZM1N 0 CR4S 0 0 AL3S 0 ZM6N]

call "square out" c4a
            rear_back_from_r_wave left_means_mirror
   setup 4x2 2x4
      array [4E 0 2W 0 0 5E 0 3W]

call "cross chain thru" c1
            rear_back_from_r_wave left_means_mirror
   setup 4x2 2x4
      array [5N 0 4S 0 0 3S 0 2N]
            alternate_definition [magic] c3
   setup 4x2 2x4
      array [2N 0 3S 0 0 4S 0 5N]

call "cross chain and roll" c1
            rear_back_from_r_wave left_means_mirror
   setup 4x2 2x4
      array [L5W 0 L4E 0 0 L3E 0 L2W]
            alternate_definition [magic] c3
   setup 4x2 2x4
      array [L2W 0 L3E 0 0 L4E 0 L5W]

call "checkover" c3a
   setup 4x2 2x4 restriction forbidden wave_only
   array [0W 1W 6W 7W 0E 1E 6E 7E]

call "turnover" c4
   setup 2x2 1x4 rotate restriction wave_only
      array [3S 3N 2N 2S]

call "turn by" c4
   setup 4x1 1x4
      array [M1N M3N R2S M2N]

call "turn by 1-1/2" c4
   setup 4x1 dmd
      array [M1N 0 0 R2E]

call "triple play" c3a
   setup 4x2 2x4 restriction forbidden wave_only
   array [1E 0W 2W 7W 0E 5E 7E 6W]

call "double play" c4
   setup 3x2 2x3 restriction forbidden wave_only
   array [0E 1W 5W 0E 4E 5W]

/* We do not allow the 2x2 (box/split transfer) to be called "transfer the
   column".  It just looks stupid to have a card say "transfer the column"
   when in waves.  So the 2x2 version can be called "transfer", "split
   transfer", or "box transfer", but not "transfer the column.  All
   others are "transfer the column". */

call "transfer the column" a1 tag transfer
   setup 4x2 2x4 restriction forbidden wave_only
      array [M0W M2W R5W R7W L0E L2E M5E M7E]
            alternate_definition [magic] c1
   setup 4x2 2x4 restriction forbidden magic_only
      array [M7E M2W L3E R6W L1E R4W M5E M0W]
            alternate_definition [1x2] c4
   setup 3x2 2x3 restriction forbidden wave_only
      array [M0W M2W R4W L1E M3E M5E]
            alternate_definition [magic 1x2] c4
   setup 3x2 2x3 restriction forbidden magic_only
      array [M0W M3E R4W L1E M2W M5E]
            alternate_definition [2x1] c4
   setup 3x2 2x3 restriction forbidden wave_only
      array [M1W R3W R5W L0E L2E M4E]
            alternate_definition [magic 2x1] c4
   setup 3x2 2x3 restriction forbidden magic_only
      array [M4E L2E R5W L0E R3W M1W]
            alternate_definition [1x3] c2
   setup 4x2 2x4 restriction forbidden wave_only
      array [M0W M1W M3W R6W L1E M4E M6E M7E]
            alternate_definition [magic 1x3] c2
   setup 4x2 2x4 restriction forbidden magic_only
      array [M7E M1W M3W R5W L2E M4E M6E M0W]
            alternate_definition [3x1] c2
   setup 4x2 2x4 restriction forbidden wave_only
      array [M1W R4W R6W R7W L0E L1E L3E M6E]
            alternate_definition [magic 3x1] c2
   setup 4x2 2x4 restriction forbidden magic_only
      array [M6E L3E L2E R7W L0E R5W R4W M1W]
            alternate_definition [12matrix] c4
   setup 6x2 2x6 restriction forbidden wave_only
      array [M0W M2W M4W R7W R9W R11W L0E L2E L4E M7E M9E M11E]
            alternate_definition [16matrix] c4
   setup 8x2 2x8 restriction forbidden wave_only
      array [M0W M2W M4W M6W R9W R11W R13W R15W L0E L2E L4E L6E M9E M11E M13E M15E]
            alternate_definition [3x3 12matrix] c4   /* same as 12 matrix */
   setup 6x2 2x6 restriction forbidden wave_only
      array [M0W M2W M4W R7W R9W R11W L0E L2E L4E M7E M9E M11E]
            alternate_definition [4x4 16matrix] c4   /* same as 16 matrix */
   setup 8x2 2x8 restriction forbidden wave_only
      array [M0W M2W M4W M6W R9W R11W R13W R15W L0E L2E L4E L6E M9E M11E M13E M15E]

/* We would prefer that people say "transfer the column" rather than
   just "transfer" while in 4x2 columns.  Hence, we are tempted to omit
   the 4x2 definition here.  However, that would mean that, if someone did
   say "transfer" while in a 4x2 column, it would do a split transfer,
   an outcome more horrible than any of the linguistic crimes we are
   trying to prevent.  So we leave the 4x2 definition here. */

call "transfer" a2
   setup 4x2 2x4 restriction forbidden wave_only
      array [M0W M2W R5W R7W L0E L2E M5E M7E]
   setup 2x2 2x2 restriction forbidden wave_only
      array [R2W L3E M2E M3W]

call "box transfer" a2
   setup 2x2 2x2 restriction forbidden wave_only
      array [R2W L3E M2E M3W]

/* Both "split" and "box" are legal on Callerlab lists. */
call "split transfer" a2
   setup 2x2 2x2 restriction forbidden wave_only
      array [R2W L3E M2E M3W]

call "_transfer and part 1" dontshow tag transf1
   /* we would like to say "restriction wave_only" (and similar things elsewhere),
      but the restrictions are not defined for calls that accept T-bone setups. */
   setup 4x2 2x4 rotate
      array [ZM6W ZM1W CR3S CR4S AL7N AL0N ZM2W ZM5W]
   setup 2x4 qtag
      array [0 0 0 0 ZM2N ZM3N ZM7N ZM6N]
            alternate_definition [magic] c1
   setup 4x2 2x4 rotate
      array [ZM5W ZM1W AL0N CR4S AL7N CR3S ZM2W ZM6W]
   setup 2x4 qtag
      array [0 0 0 0 ZM2N ZM3N ZM7N ZM6N]

call "_transfer and @1 part 2" dontshow tag transf2
   conc nullcall [mandatory_anycall] nullcall [conc_demand_columns conc_force_columns]

call "transfer and @0" a2
            magic_is_inherited
   seq transf1 [inherit_magic]
   seq transf2 []

/* See nomenclatural comment above for transfer the column. */

call "checkmate the column" a2
   setup 4x2 2x4 restriction wave_only
      array [M5E M4E R6W R7W L0E L1E M3W M2W]
            alternate_definition [2x1] c4
   setup 3x2 2x3 restriction wave_only
      array [M3E R4W R5W L0E L1E M2W]
            alternate_definition [1x2] c4
   setup 3x2 2x3 restriction wave_only
      array [M4E M3E R5W L0E M2W M1W]
            alternate_definition [3x1] c2
   setup 4x2 2x4 restriction wave_only
      array [M4E R5W R6W R7W L0E L1E L2E M3W]
            alternate_definition [1x3] c2
   setup 4x2 2x4 restriction wave_only
      array [M6E M5E M4E R7W L0E M3W M2W M1W]

/* See nomenclatural comment above for transfer the column. */

call "checkmate" a2
   setup 4x2 2x4 restriction wave_only
      array [M5E M4E R6W R7W L0E L1E M3W M2W]
   setup 2x2 2x2 restriction wave_only
      array [CR2W AL3E AM0W CM1E]

call "box checkmate" c3a
   setup 2x2 2x2 restriction wave_only
      array [CR2W AL3E AM0W CM1E]

/* This name is legal on Callerlab lists. */
call "split checkmate" c3a
   setup 2x2 2x2 restriction wave_only
      array [CR2W AL3E AM0W CM1E]

call "three square two and 1" c4
   setup 2x3 2x3
   array [0 0 0 1W 2E 0N]

call "push off" c4a
   setup 4x2 2x4
   array [5S 0N 3N 0 0 4S 7S 6S]

call "countershake" c4
            left_means_mirror
   setup 4x2 2x4
      array [0 0 C1W C6W C7W C0W 0 0]
            alternate_definition [single] c4
   setup 4x1 2x2
      array [0 0 C3W C0W]
            alternate_definition [3x3 12matrix] c4
   setup 4x3 2x6
      array [0 0 C2W C9W C10W C1W C11W C0W 0 0 0 0]
            alternate_definition [4x4 16matrix] c4
   setup 4x4 2x8 rotate
      array [C7S C8S 0 C9S 0 0 0 0 0 0 C11S 0 C4S C5S C6S C10S]

/* This has the unfortunate property that a modifier like "single" or
   "3x3" will come before the fraction "2/3".  We should really do this
   right by fractionalizing it properly.  But that will require a
   "maybe12matrixconc" schema, which the world isn't yet ready for. */
call "2/3 countershake" c4
            left_means_mirror
   setup 4x2 qtag
      array [0 0 C7W C4S C5S C6W 0 0]
            alternate_definition [single] c4
   setup 4x1 dmd rotate
      array [0 0 C2W C3S]
            alternate_definition [3x3 12matrix] c4
   setup 4x3 3dmd
      array [0 0 C11W C6S C7S C10W C8S C9W 0 0 0 0]
            alternate_definition [4x4 16matrix] c4
   setup 4x4 4dmd rotate
      array [C3E C4S 0 C5S 0 0 0 0 0 0 C7S 0 C0E C1E C2E C6S]

call "triple scoot" plus
   setup 4x2 2x4 restriction forbidden wave_only
   array [7S 6S 5S 4S 3S 2S 1S 0S]

call "triple cross" c1 tag triplecross
   setup 4x2 2x4 restriction quarterbox_or_col
      preds "Don't know whether to cross."
         if columns_magic_tandem     [0N 5N 2N 3N 4N 5N 2N 7N]
         if columns_magic_antitandem [6N 5N 4N 3N 4N 3N 2N 1N]

call "scoot and fancy" c3a
   setup 4x2 2x4 restriction forbidden wave_only
   array [0N 7N 1N 6N 1N 6N 0N 7N]

call "@k tie" c4a
   setup 4x2 2x4
      preds "Tandems must be selected/deselected together."
         if select_near_select     [L7W L6W L1E L0E R7W R6W R1E R0E]
         if unselect_near_unselect [M6E M7E M4E M5E M2W M3W M0W M1W]
            alternate_definition [cross] c4a
   setup 4x2 2x4
      preds "Tandems must be selected/deselected together."
         if select_near_select     [R0E R1E R6W R7W L0E L1E L6W L7W]
         if unselect_near_unselect [M1W M0W M3W M2W M5E M4E M7E M6E]

call "circle to a line" mainstream
   setup 4x2 2x4 rotate
      array [5W 0 3E 0 0 2E 0 4W]

call "expand the column" c3a
   setup 4x2 2x4 rotate
      array [M1W L7E L0E M2E M1E R3E R4E M2W]
            alternate_definition [magic] c3
   setup 4x2 2x4 rotate
      array [M2W L7E L0E M1E M2E R3E R4E M1W]

call "file to a line" c2
   setup 4x2 2x4 rotate
      array [ZM7W ZM1W CR2E ZM0W ZM3W AL1E ZM2W ZM4W]
            alternate_definition [magic] c2
   setup 4x2 2x4 rotate
      array [ZM7W ZM2W AL1E ZM0W ZM3W CR2E ZM1W ZM4W]

call "walk out to a wave" c2
   /* We can't be bothered to figure out roll info.  People would flame
      incessantly on electronic mailing lists if we even considered it. */
   setup 4x2 2x4 rotate restriction wave_only
      array [Z0W C1E C3E C2W A1W A0E A2E Z3W]
            alternate_definition [magic] c2
   setup 4x2 2x4 rotate restriction magic_only
      array [Z0W A2E A0E C2W A1W C3E C1E Z3W]

call "walk out to a column" c3x
   /* **** Do roll/stability stuff! */
   setup 2x4 2x4 rotate restriction wave_only
   array [6E 1E 5E 2E 0E 0W 7W 7E]
            alternate_definition [magic] c3x
   setup 2x4 2x4 rotate restriction wave_only
   array [6E 1E 5E 2E 7E 7W 0W 0E]

call "_disband part 1" dontshow tag disbp1
            dont_use_in_resolve
   /* By not putting a "conc_demand_columns" or "conc_demand_lines"
      on this, we allow the call to be done from either setup. */
   conc boxctrrot [] strict_peel_and_nothing []

call "_disband part 2" dontshow tag disband2
            dont_use_in_resolve
   crossconc 23recycle [] uturnback [conc_force_lines]

call "disband" c3
   seq disbp1 []
   seq disband2 []

call "wind the bobbin" c4a
   setup 4x2 2x4 rotate restriction forbidden wave_only
   array [5E 3W 6W 4W 7W 5W 0W 6E]
            alternate_definition [cross] c4a
   setup 4x2 2x4 rotate restriction forbidden wave_only
   array [5E 0W 6W 7W 4W 5W 3W 6E]

call "criss-cross wind the bobbin" c4a
   setup 4x2 2x4 rotate restriction forbidden wave_only
   array [6E 0W 5W 7W 4W 6W 3W 5E]

call "explosion" c4a
   setup 4x2 2x4 rotate restriction wave_only
   array [0W 5E 3E 2E 1E 0E 6E 3W]
call "explode the clover" c4
   setup 4x2 2x4 rotate
   array [0 5S 2S 0N 3S 1N 6N 0]

call "press for time" c4
   setup 4x2 2x4 rotate restriction wave_only
      /* Since no one can roll, we don't even specify that.  We make roll simply illegal. */
      array [Z7W Z0W C5E C2E A1E A6E Z3W Z4W]

call "_horseshoe centers" dontshow tag horsey
   setup 1x2 1x2           /* This is partner tag, of course. */
      array [M1E M0W]
            alternate_definition [cross] c3x
   setup 2x2 2x2
      array [2E 3W 0W 1E]

call "horseshoe turn" a1
            cross_is_inherited
   conc horsey [inherit_cross] clover [inherit_cross conc_demand_columns conc_force_columns]

call "with finesse" c4a
   setup 4x2 1x8
      array [0W 7E 1E 6W 6E 1W 7W 0E]
   setup 3x2 1x6
      array [0W 1E 5W 5E 1W 0E]

call "polly wally" c3a
            reverse_means_mirror
   setup 4x2 2x4 rotate
      array [CR5E CAL2W AL7E AL0E AL1E AL6E CAL3W CR4E]
            alternate_definition [single] c3a
   setup 4x1 2x2
      array [CR3S CAL2N AL1S AL0S]
            alternate_definition [grand single] c4
   setup 8x1 2x4
      array [CR7S CAL6N CAL5N AL0S AL3S AL2S AL1S CAL4N]
   setup 6x1 2x3
      array [CR5S CAL4N AL0S AL2S AL1S CAL3N]

call "_sidetrack part 1" dontshow tag sidetrack1
            reverse_means_mirror
   /* We put this in to give the "unusual" warning if called from lines. */
   setup 2x4 2x4 restriction unusual alwaysfail
      array [CR0E CR1E CR2E CR3E AL4W AL5W AL6W AL7W]
   /* Having done that, we need this (without the warning) to
      keep things happy in a T-boned 2x4. */
   setup 4x2 2x4
      array [AL0W CR1E AL2W CR3E CR4E AL5W CR6E AL7W]
   setup 2x2 2x2        /* This is just zig zag, of course. */
      array [CR0E CR1E AL2W AL3W]
   setup 2x1 1x2        /* This is just zig zag, of course. */
      array [AL0W CR1E]

call "sidetrack" c3
            reverse_means_mirror visible_fractions
   seq sidetrack1 [inherit_reverse]
   seq ctr_rot []
   seq roll []

call "slim down" c3x tag slimdown
   setup 2x4 2x4 rotate
      array [M6W M7W M0W M1W M2W M3W M4W M5W]
   setup 4x2 2x4 rotate
      array [M6W M7W M0W M1W M2W M3W M4W M5W]

call "step and slide" a1
   setup 1x4 2x3 rotate
      array [4W 5W 1W 0W]

call "lickety split" c3
   simple_funny
   setup 2x4 2x4
      array [CR1S AL0W CR3E AL2S ZM3N CR2E AL1W ZM0N]
   setup 4x2 2x4
      array [ZM1N CR6E CR3E CR4S AL3S AL4W AL1W ZM6N]

call "circulate" mainstream tag circulate
            take_right_hands no_cutting_through
   simple_funny
   setup 2x4 2x4
      array [CR3S CR2S AL1S AL0S ZM3N ZM2N ZM1N ZM0N]
   setup 4x2 2x4
      array [ZM1N ZM2N ZM3N CR4S AL3S ZM4N ZM5N ZM6N]
   setup 2x3 2x3
      array [CR2S 0 AL0S ZM2N ZM1N ZM0N]
   setup 3x2 2x3
      array [ZM1N ZM2N CR3S AL2S ZM3N ZM4N]
   setup 2x2 2x2
      array [CR1S AL0S ZM1N ZM0N]
   setup star star
      array [CR1E 0 AL1W 0]
   setup short6 short6
      array [CR1E 0 AL1W ZM2N 0 ZM0N]
   setup pshort6 short6
      preds "???"
         if next62spot_is_tboned [ZM1N CR2E CR3S AL2S AL3W ZM4N]
         if always [ZM1N ZM2N CR3S AL2S ZM3N ZM4N]
   setup spindle spindle
      array [0 0 0 AL2W 0 0 0 CR0E]
   setup pspindle spindle
      array [ZM1N ZM2N CR3E 0 AL3W ZM4N ZM5N 0]
            alternate_definition [magic] c1
   simple_funny
   setup 4x2 2x4
      array [ZM6N ZM2N ZM4N CR4S AL3S ZM3N ZM5N ZM1N]
   setup 3x2 2x3
      array [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
   setup pshort6 short6
      preds "???"
         if next_magic62spot_is_tboned [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
         if always [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
   setup spindle spindle
      array [0 0 0 AL2W 0 0 0 CR0E]
   setup pspindle spindle
      array [ZM5N ZM4N CR3E 0 AL3W ZM2N ZM1N 0]
            alternate_definition [12matrix] c3a
   simple_funny
   setup 3x4 3x4
      array [CR3S CR2S AL1S AL0S ZM3N ZM2N ZM4N ZM5N ZM11N ZM10N ZM0N ZM1N]
   setup 2x6 2x6
      array [CR5S CR4S CR3S AL2S AL1S AL0S ZM5N ZM4N ZM3N ZM2N ZM1N ZM0N]
   setup 6x2 2x6
      array [ZM1N ZM2N ZM3N ZM4N ZM5N CR6S AL5S ZM6N ZM7N ZM8N ZM9N ZM10N]
            alternate_definition [16matrix] c3a
   simple_funny
   setup 4x4 4x4
      array [AL12S ZM0N ZM1N ZM14N ZM2N ZM7N ZM11N ZM3N ZM9N ZM10N ZM12N ZM15N CR0S CR14S AL13S ZM13N]
   setup 2x8 2x8
      array [CR7S CR6S CR5S CR4S AL3S AL2S AL1S AL0S ZM7N ZM6N ZM5N ZM4N ZM3N ZM2N ZM1N ZM0N]
   setup 8x2 2x8
      array [ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N CR8S AL7S ZM8N ZM9N ZM10N ZM11N ZM12N ZM13N ZM14N]



call "couples circulate" mainstream
   /* The "as couples" concept is illegal at mainstream, so we include this. */
   setup 2x4 2x4 restriction 2fl_only
      array [CR3S CR2S AL1S AL0S ZM3N ZM2N ZM1N ZM0N]

call "cross over circulate" a1
   setup 2x4 2x4
      array [CR2S CR3S AL0S AL1S ZM2N ZM3N ZM0N ZM1N]
   setup 4x2 2x4
      array [6N 5N 4N 0 0 3N 2N 1N]
            alternate_definition [12matrix] c3a
   setup 3x4 3x4
      array [CR2S CR3S AL0S AL1S ZM2N ZM3N ZM5N ZM4N ZM10N ZM11N ZM1N ZM0N]

call "column circulate" mainstream tag colcirc
            take_right_hands
   simple_funny
   setup 4x2 2x4
      array [ZM1N ZM2N ZM3N CR4S AL3S ZM4N ZM5N ZM6N]
   setup 3x2 2x3
      array [ZM1N ZM2N CR3S AL2S ZM3N ZM4N]
            alternate_definition [magic] c1
   simple_funny
   setup 4x2 2x4 restriction magic_only
      array [ZM6N ZM2N ZM4N CR4S AL3S ZM3N ZM5N ZM1N]
   setup 3x2 2x3
      array [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
            alternate_definition [12matrix] c3a
   simple_funny
   setup 6x2 2x6
      array [ZM1N ZM2N ZM3N ZM4N ZM5N CR6S AL5S ZM6N ZM7N ZM8N ZM9N ZM10N]
            alternate_definition [16matrix] c3a
   simple_funny
   setup 8x2 2x8
      array [ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N CR8S AL7S ZM8N ZM9N ZM10N ZM11N ZM12N ZM13N ZM14N]

call "real column circulate" dontshow tag realcolcirc
   /* Used in advance to a column.  The restriction will make it get unhappy if
      we call so-and-so advance to a column for inappropriate
      designees or in an inappropriate setup for them. */
   setup 4x2 2x4 restriction forbidden wave_only
      array [ZM1N ZM2N ZM3N CR4S AL3S ZM4N ZM5N ZM6N]

call "1/2 circulate" mainstream tag half_circ
            dont_use_in_resolve take_right_hands no_cutting_through
   setup 2x4 crosswave rotate
      array [CR0N CR1N AL1S AL0S ZM2W ZM3W ZM7W ZM6W]
   setup 2x2 dmd rotate
      array [CR0N AL0S ZM1W ZM3W]
   setup 3x2 short6 rotate
      array [ZM5W ZM0W CR1N AL1S ZM2W ZM3W]
   setup 4x2 spindle
      array [ZM0N ZM1N ZM2N CR3E AL3W ZM4N ZM5N ZM6N]

call "tag circulate" c4
   setup 2x4 2x4 restriction 2fl_only
      array [R2S R3S R0N R1N M3N M2N M1N M0N]

call "box circulate" mainstream tag box_circ
            take_right_hands no_cutting_through
   simple_funny
   setup 2x2 2x2
      array [CR1S AL0S ZM1N ZM0N]

call "_maybe magic box circulate" dontshow tag maybe_magic_box_circ
   /* For magic hocus-pocus.  Unfortunately, the sleazy way we do this
      does not allow us to specify roll information reliably, so we have
      taken it out.  Someday, of course, we will code hocus pocus correctly.
      So little time; so much to do. */
   simple_funny
   setup 2x2 2x2
      array [C1S A0S Z1N Z0N]
            alternate_definition [magic] c3
   /* This is cross back. */
   simple_funny
   setup 2x2 2x2 restriction wave_only
      array [C0S A1S Z0N Z1N]

call "1/2 box circulate" mainstream
            dont_use_in_resolve take_right_hands no_cutting_through
   setup 2x2 dmd rotate
      array [CR0N AL0S ZM1W ZM3W]

call "_1/2 box circulate in miniwaves" dontshow tag halfboxcirc_miniwaves
            dont_use_in_resolve take_right_hands no_cutting_through
   setup 2x2 dmd rotate qualifier miniwaves  /* A restriction would be better, but this is good enough. */
      array [CR0N AL0S ZM1W ZM3W]

call "1-1/2 box circulate" mainstream tag box_circ_15
            dont_use_in_resolve take_right_hands no_cutting_through
   setup 2x2 dmd rotate
      array [ZM1E ZM3E AL0S CR0N]

call "_box circulate and trade" dontshow tag box_circ_and_trade
            no_cutting_through
   setup 2x2 2x2
      array [CR0N AL1N AL0S CR1S]

call "double down" c3x
   setup 2x4 2x4
      preds "Can't tell which way my adjacent end is facing."
         if inner_active_lines [0 7S 4S 0 2S 3S 0S 1S]
         if outer_active_lines [3S 2S 1S 0S 0 2N 1N 0]
   setup 4x2 2x4
      preds "Can't tell which way my adjacent end is facing."
         if column_double_down [6S 2N 3N 5S 2S 4N 5N 1S]
            alternate_definition [cross] c3x
   setup 2x4 2x4
      preds "Can't tell which way my adjacent end is facing."
         if inner_active_lines [0 7S 4S 0 2S 3S 0S 1S]
         if outer_active_lines [2S 3S 0S 1S 0 3N 0N 0]
   setup 4x2 2x4
      preds "Can't tell which way my adjacent end is facing."
         if column_double_down [6S 5N 4N 5S 2S 3N 2N 1S]

call "_finish clear out" dontshow tag finclearout
   setup 2x4 2x4
      array [R0S R2S L1S L3S M4N L2S R1S M7N]
   setup 4x2 2x4
      array [M0N R2S R5S R3S L4S L2S L5S M7N]

call "@1clear out" c4a
            visible_fractions
   seq circulate [or_anycall]
   seq finclearout [roll_transparent]

call "lift off" c3
            reverse_means_mirror
   setup 2x4 2x4 rotate
      array [0 3S 5S 0 0 0 0 0]
   setup 4x2 2x4 rotate
      array [0W 0 0 0 0 0 0 2E]

call "_start wave the whomever" dontshow tag startwave
   /* This is just a press ahead, but legal only in a "liftoff" setup. */
   setup 2x4 2x4 rotate
      array [0 7W 0W 0 0 0 0 0]
   setup 4x2 2x4 rotate
      array [6W 0 0 0 0 0 0 5W]

call "finish wave the @6" c3 tag finishwave
   /* Selector identities *do* get re-evaluated for the new centers and ends,
      which makes this work.  Compare patch the <anyone>. */
   conc starthopping [] designeeskick [conc_demand_columns conc_force_lines]

call "wave the @6" c3
   seq startwave []
   seq finishwave []

call "split grand chain 8" c2
            sequence_starter
   setup 2x4 2x4
      array [0 0 0 0 0 L3S L0S 0]
   setup 4x2 2x4
      array [L1E 0 0 0 0 0 0 L6W]

call "_spin the pulley but" dontshow tag spinpulleybut
   setup 2x4 2x4
      array [0 0 0 0 0 M1W M0W 0]
   setup 4x2 2x4
      array [M6N 0 0 0 0 0 0 M7N]

call "spin the pulley@7 but @8" c3a
            sequence_starter
   seq spinpulleybut []
   seq peeloff [or_anycall]

call "the pulley@7 but @8" c3a
   seq triplecross []
   seq peeloff [or_anycall]

call "curli-pass" c3x
            sequence_starter
   setup 2x4 2x4
      preds "Must be facing opposite sex."
         if x22_boy_facing_girl [0 0 0 0 0 3E 1E 0]
         if x22_girl_facing_boy [0 0 0 0 0 3E 1E 0]
   setup 4x2 2x4
      array [0N 0 0 0 4N 0 0 6N]

call "_split mixed up and nothing" dontshow tag mixedup
            sequence_starter
   setup 2x4 2x4
   array [0 0 0 0 0 4S 7S 0]
   setup 4x2 2x4
   array [1E 0 0 0 0 0 0 6W]

call "_finish mixed" dontshow tag finmixedup
   conc nullcall [mandatory_anycall] nullcall []

call "split mixed up, new ctrs @0" c3x
            sequence_starter dont_use_in_resolve
   seq mixedup []
   seq finmixedup []

call "hocus pocus" c2
            magic_is_inherited
   conc trade [] maybe_magic_box_circ [inherit_magic conc_force_otherway endscando]

call "_wheel and" dontshow tag wheel
            reverse_means_mirror
   setup 2x2 2x2
      array [L0E L3E 0 0]

call "_8by" dontshow tag 8by
            rear_back_from_r_wave left_means_mirror
   setup 2x2 2x2
      array [0 0 AL0E AL1E]

call "wheel and @0" c1
            reverse_means_mirror dont_use_in_resolve
   conc nullcall [mandatory_anycall] wheel [inherit_reverse conc_demand_columns conc_force_columns]

call "buckle and @0" c4a
            dont_use_in_resolve
   conc nullcall [mandatory_anycall] coupleup [conc_demand_lines conc_force_columns]

call "cloverleaf" mainstream
   setup 4x2 2x4 rotate
      array [0 0 0N 1N 2S 3S 0 0]
            alternate_definition [cross] c1
   setup 4x2 2x4 rotate
      array [0 0 3S 2S 1N 0N 0 0]

call "cloverflow" c4
   setup 4x2 2x4 rotate
      array [0 AL0N 0 CM2N AM1S 0 CR3S 0]

call "cloverleaf turn" c4
   setup 4x2 2x4 rotate
      array [0 7N 0 1S 2N 0 4S 0]

call "_clover and" dontshow tag clover
   setup 2x2 2x2
      array [AL0E CR1W 0 0]
            alternate_definition [cross] a1
   setup 2x2 2x2
      array [CR1W AL0E 0 0]

call "clover and @0" a1
            dont_use_in_resolve cross_is_inherited
   conc nullcall [mandatory_anycall] clover [inherit_cross conc_demand_columns conc_force_columns]

call "eight by @0" c3a
            dont_use_in_resolve left_means_mirror
   conc nullcall [mandatory_anycall] 8by [inherit_left conc_demand_lines conc_force_lines]

call "_fly away ctrs" dontshow tag flyback
   setup 2x2 2x2
      array [R3N R2N 0 0]

call "_fly away ends" dontshow tag flyend
   seq trade []
   seq nullcall [mandatory_anycall]

call "fly away, new centers @0" c3x
            dont_use_in_resolve
   crossconc flyend [conc_demand_lines] flyback [conc_demand_lines conc_force_columns]

call "_chain react part 2" dontshow tag chreact_2
            dont_use_in_resolve left_means_mirror
   ckpt_star nullcall [] hinge [inherit_left]

call "_ends detour" dontshow tag endsdetour
   setup 2x2 2x2 restriction forbidden peelable_box
      array [AL3E CR2W CR1E AL0W]

call "detour" c2 tag detour
   conc ctr_rot [] endsdetour [conc_demand_lines conc_force_columns endscando]

call "detour from waves" dontshow tag wave_detour
   setup 2x4 2x4 restriction wave_only
      array [AL7E CR2E AL1W CR4W CR3E AL2W CR1E AL0W]

call "team up" c3a
   conc beaurun [] half_circ_and_hinge [conc_force_columns endscando]   /* the "force columns" makes the hingers stay together */

call "_tunnel part 1" dontshow tag tunnel1
           single_is_inherited
   maybesinglecrossconc verticalhalftag [inherit_single conc_demand_columns] partnertagbypairs [inherit_single conc_force_columns]

call "_tunnel thru part 1" dontshow tag tunnelthru1
           single_is_inherited
   maybesinglecrossconc verticaltag [inherit_single conc_demand_columns] partnertagbypairs [inherit_single conc_force_columns]

call "_tunnel @h part 2" dontshow tag tunnel2
           single_is_inherited
   maybesingleconc quarter_maybe [] maybesingletrade [inherit_single]

call "_tunnel thru @h part 2" dontshow tag tunnelthru2
           single_is_inherited
   maybesingleconc face_dir [] maybesingletrade [inherit_single]

call "tunnel @h" c4a
           single_is_inherited
   seq tunnel1 [inherit_single]
   seq tunnel2 [inherit_single]

call "tunnel thru @h" c4a
           single_is_inherited
   seq tunnelthru1 [inherit_single]
   seq tunnelthru2 [inherit_single]

call "_start zip" dontshow tag startzip
   setup 2x2 2x2
      array [R0E L1W R2W L3E]

call "_extend zip" dontshow tag extendzip
   setup 2x2 2x2
      array [R0E L1W M1N M0N]

call "_zipn" dontshow tag zipn
   seq startzip []
   seq extendzip [repeat_nm1]

call "zip code @9, new centers @0" c2
            dont_use_in_resolve neednumber
   crossconc nullcall [mandatory_anycall] zipn [conc_demand_columns conc_force_lines]

call "_finish hoop-de-do" dontshow tag hoopdedo
   seq startzip []
   seq star_thru []

call "hoop-de-do, new centers @0" c4
            dont_use_in_resolve
   crossconc nullcall [mandatory_anycall] hoopdedo [conc_demand_columns conc_force_columns]

call "acey deucey" plus tag aceydeucey
   conc trade [] circulate []

call "mix the deucey" c4a
   seq mix []
   seq aceydeucey []

call "trade the deucey" c3a tag trade_duck
   setup 2x4 2x4
      array [CR2S CR3S AL0S AL1S ZM2N AM7S CM4S ZM1N]
   setup 4x2 2x4 rotate
      array [ZM5W CM4E CM3E 0 0 AM0E AM7E ZM6W]
   setup qtag ptpd
      array [0 0 AM6S CM4S 0 0 CM2S AM0S]
   setup pqtag ptpd
      array [ZM7N CR5S 0 0 AL7S ZM5N 0 0]

call "mix the deal" c4a
            single_is_inherited
   maybesingleconc wheelanddeal [inherit_single] wheelanddeal [inherit_single]

call "mix the turn and deal" c4
            single_is_inherited
   maybesingleconc turnanddeal [inherit_single] natturnanddeal [inherit_single]

call "_o-late" dontshow tag olate
            dont_use_in_resolve
   setup 2x4 2x4
      array [CM6S ZM0N ZM3N AM5S R6N ZM4N ZM7N L5N]

call "@2swing@3-o-late" c3
   seq swingslip [or_anycall]
   seq olate []

call "snap the lock" c3a
   setup 2x4 2x4
   array [5S 7S 4S 6S 1N 3N 0N 2N]

call "_ctrs fan chain thru" dontshow tag ctrs_fanchainthru
   seq cast_off_34 []
   seq slip []
   seq cast_off_34 []

call "_ends fan tag the deucey part 2" dontshow tag ends_fantag2
   seq partnertag []
   seq quarter_right []
   seq circulate []

call "_ends fan tag the deucey @h part 2" dontshow tag ends_fantag2dir
   seq partnertag []
   seq quarter_maybe []
   seq circulate []

call "_fan tag the deucey part 2" dontshow tag fantag2
   conc ctrs_fanchainthru [] ends_fantag2 [conc_demand_lines conc_force_spots]

call "_fan tag the deucey @h part 2" dontshow tag fantag2dir
   conc ctrs_fanchainthru [] ends_fantag2dir [conc_demand_lines conc_force_spots]

call "fan tag the deucey" c4 tag fantagduck
            step_to_wave left_means_touch_or_check
   seq check1x4 []
   seq fantag2 []

call "fan tag the deucey @h" c4 tag fantagduckdir
            step_to_wave left_means_touch_or_check
   seq check1x4 []
   seq fantag2dir []

call "spin tag the deucey" c4       /* Andy B. loves this call. */
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fantagduck []

call "spin tag the deucey @h" c4
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fantagduckdir []

call "rims trade @2back@3" c2
   seq trade []
   seq check1x4 [roll_transparent]
   seq rims_trade_2 []

call "hubs trade @2back@3" c2
   seq trade []
   seq check1x4 [roll_transparent]
   seq hubs_trade_2 []

call "_rims trade part 2" dontshow tag rims_trade_2
            dont_use_in_resolve
   singleconc_together circulate [or_anycall] nullcall []

call "_hubs trade part 2" dontshow tag hubs_trade_2
            dont_use_in_resolve
   singleconc_together nullcall [] circulate [or_anycall]

call "round off" c3x
   setup 2x4 2x4
   array [1E 0E 3W 2W 0 0 0 0]
call "round & cross" c3x
   setup 2x4 2x4
   array [6E 7E 4W 5W 0 0 0 0]
call "round the horn" c3x
   setup 2x4 2x4
   array [2E 7S 4S 1W 0 0 0 0]

call "fan chain thru" c3 tag fan_chain_thru
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction forbidden wave_only
      /* **** This can be improved when we get better stability encodings. */
      array [ZM0N R6N L5N ZM3N ZM4N AAL6S CCR5S ZM7N]

call "spin chain thru" mainstream
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fan_chain_thru []

call "swing chain thru" c3a
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
   array [6S 0S 3S 5S 6N 4S 7S 5N]

call "counter rotate" c1 tag ctr_rot
            parallel_conc_end       /* This makes it win if we tell the ends only to do it */
   simple_funny
   setup 2x4 2x4 rotate
      array [CR0N CR1N AL6S AL7S AL0S AL1S CR6N CR7N]
   setup 4x2 2x4 rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]
   setup 2x3 2x3 rotate
      array [CR0N 0 AL5S AL0S 0 CR5N]
   setup 3x2 2x3 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
   setup 2x2 2x2
      array [CR1E AL0W AL1W CR0E]
   setup 2x6 2x6 rotate
      array [CR0N CR1N CR2N AL9S AL10S AL11S AL0S AL1S AL2S CR9N CR10N CR11N]
   setup 6x2 2x6 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N AL0S AL1S AL2S AL3S AL4S AL5S]
   setup 2x8 2x8 rotate
      array [CR0N CR1N CR2N CR3N AL12S AL13S AL14S AL15S AL0S AL1S AL2S AL3S CR12N CR13N CR14N CR15N]
   setup 8x2 2x8 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N CR6N CR7N AL0S AL1S AL2S AL3S AL4S AL5S AL6S AL7S]
   setup 3x4 3x4 rotate
      array [CR0N CR1N AL8S AL9S AL10S AL11S AL0S AL1S CR8N CR9N CR10N CR11N]
   setup 4x3 3x4 rotate
      array [CR0N CR1N CR2N CR3N 0 0 AL0S AL1S AL2S AL3S 0 0]
   setup 4x4 4x4
      array [AL12W AL13W AL14W AL15W AL0W AL1W CR10E AL3W CR12E CR13E CR14E CR15E CR0E CR1E AL10W CR3E]
   setup c1phan c1phan
      array [CR4E CR5E CR6E CR7E AL0W AL1W AL2W AL3W AL4W AL5W AL6W AL7W CR0E CR1E CR2E CR3E]
   setup thar thar
      array [CR2E CR3E 0 0 AL2W AL3W 0 0]
   setup short6 short6 rotate
      array [CR0N 0 AL5S AL0S 0 CR5N]
   setup pshort6 short6 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
   setup bone6 bone6 rotate
      array [CR0N AL4S AL5S AL0S CR4N CR5N]
   setup pbone6 bone6 rotate
      array [CR0N CR1N    0 AL0S AL1S    0]
   setup bone bone rotate
      array [CR0N AL5S AL6S AL7S AL0S CR5N CR6N CR7N]
   setup pbone bone rotate
      array [CR0N CR1N    0    0 AL0S AL1S    0    0]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1N 0 AL1S]
   setup star star
      array [CR1E 0 AL1W 0]
   setup galaxy galaxy
      array [CR2E CR3E 0 AL1W AL2W AL3W 0 CR1E]
   setup hrglass hrglass rotate
      array [CR0N AL5S AL6S 0 AL0S CR5N CR6N 0]
   setup phrglass hrglass rotate
      array [CR0N CR1N 0 CR3N AL0S AL1S 0 AL3S]
   setup qtag qtag rotate
      array [CR0N AL5S AL6S AL7S AL0S CR5N CR6N CR7N]
   setup pqtag qtag rotate
      array [CR0N CR1N 0 0 AL0S AL1S 0 0]
   setup rigger rigger rotate
      array [CR0N AL5S AL6S AL7S AL0S CR5N CR6N CR7N]
   setup prigger rigger rotate
      array [CR0N CR1N    0    0 AL0S AL1S    0    0]
   setup spindle spindle rotate
      array [CR0N    0 AL6S AL7S AL0S    0 CR6N CR7N]
   setup pspindle spindle rotate
      array [CR0N CR1N CR2N    0 AL0S AL1S AL2S    0]
   setup crosswave crosswave rotate
      array [CR0N CR1N    0    0 AL0S AL1S    0    0]
   setup pcrosswave crosswave rotate
      array [   0    0 CR2N CR3N    0    0 AL2S AL3S]
   setup 1x2 1x2 rotate
      array [CR0N AL0S]
   setup 1x4 1x4 rotate
      array [CR0N CR1N AL0S AL1S]
   setup 1x6 1x6 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
   setup 1x8 1x8 rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]
   setup 1x10 1x10 rotate
      array [CR0N CR1N CR2N CR3N CR4N AL0S AL1S AL2S AL3S AL4S]
   setup 1x12 1x12 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N AL0S AL1S AL2S AL3S AL4S AL5S]
   setup 1x14 1x14 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N CR6N AL0S AL1S AL2S AL3S AL4S AL5S AL6S]
   setup 1x16 1x16 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N CR6N CR7N AL0S AL1S AL2S AL3S AL4S AL5S AL6S AL7S]
   setup ptpd ptpd rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]
   setup pptpd ptpd rotate
      array [0 CR1N 0 AL7S 0 AL1S 0 CR7N]

call "_counteract part 1" dontshow tag counteract1
   conc ctr_rot [] trade [conc_demand_columns conc_force_columns]

call "_counteract part 2" dontshow tag counteract2
/*
   setup 4x2 4x4
      array [CR15E CR15S CR5S CR2E AL1W AL14S AL11S AL11W]
*/
   setup 4x2 c1phan
      array [CR2E CR3S CR9S CR8E AL5W AL4S AL14S AL15W]
   setup 2x4 2x4
      array [0 CR3S AL0S 0 0 AL5S CR6S 0]

call "counteract" c3x
            visible_fractions finish_means_skip_first_part
   seq counteract1 []
   seq counteract2 []

call "_centers 3/4 / ends half-circ" dontshow tag motivate2
            dont_use_in_resolve 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star armturn_34 [] half_circ [conc_demand_lines]

call "_check_1x4" dontshow tag check1x4
            12_16_matrix_means_split
   setup 1x4 1x4
      array [ZM0N ZM1N ZM2N ZM3N]

call "@1motivate" a2
            12_matrix_is_inherited first_part_visible
   seq circulate [inherit_12_matrix or_anycall]
   seq motivate2 [inherit_12_matrix]
   seq turnstar2_endstrade [inherit_12_matrix]
   seq finishnomod [inherit_12_matrix]   /* Can't allow the cast off 3/4 to be replaced, because there are two of them. */

call "relay the top" c1
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part 12_matrix_is_inherited 16_matrix_is_inherited
   seq trade [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq motivate2 [inherit_12_matrix inherit_16_matrix]
   seq turnstar1_endstrade [inherit_12_matrix inherit_16_matrix]
   seq finishnomod [inherit_12_matrix inherit_16_matrix]      /* Can't allow the cast off 3/4 to be replaced, because there are two of them. */

call "relay the yo-yo" c4    /* Leave this in until the text fudging is done. */
            step_to_wave left_means_touch_or_check first_part_visible finish_means_skip_first_part 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_34 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq motivate2 [inherit_12_matrix inherit_16_matrix]
   seq turnstar1_endstrade [inherit_12_matrix inherit_16_matrix]
   seq finishnomod [inherit_12_matrix inherit_16_matrix]      /* Can't allow the cast off 3/4 to be replaced, because there are three of them. */

call "@9-@9-@9-@9 relay the top" c4
            step_to_wave left_means_touch_or_check need_four_numbers 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_n4 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq quarterdeucey2 [inherit_12_matrix inherit_16_matrix shift_one_number]
   seq turnstarn_endstrade [inherit_12_matrix inherit_16_matrix shift_two_numbers]
   seq quarterdeucey4 [inherit_12_matrix inherit_16_matrix shift_three_numbers]

call "@b cast and relay" c3
            step_to_wave left_means_touch_or_check neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_n4 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq motivate2 [inherit_12_matrix inherit_16_matrix]
   seq turnstarn_endstrade [inherit_12_matrix inherit_16_matrix]
   seq finishnomod [inherit_12_matrix inherit_16_matrix]      /* Can't allow the cast off 3/4 to be replaced, because there are two of them. */

call "_finish spin chain the gears" dontshow tag fan_chain_gears
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
      /* The final ends roll inward, since their last part was turn away,
         not U-turn back.  Callerlab plus definitions, page 6. */
      array [L2N L7S R4S R1N R2S R7N L4N L1S]

call "spin chain the gears" plus
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fan_chain_gears []

call "_finish spin chain and exchange the gears" dontshow tag fan_chain_exch_gears
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
      array [R5N L0S R3S L6N L1N R0N L3N R2N]

call "spin chain and exchange the gears" plus
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fan_chain_exch_gears []

call "_finish spin chain and circulate the gears" dontshow tag fan_chain_circ_gears
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
      array [L1S L4N R7N R2S R5S M0N M3N L6S]

call "spin chain and circulate the gears" c3x
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq trade []
   seq fan_chain_circ_gears []

call "scoot back" mainstream tag scootback
            fudge_to_q_tag
   setup 2x2 2x2 restriction wave_only
      array [CR1S AL0S AM3S CM2S]
   setup pmd dmd qualifier miniwaves
      array [0S 3S 0 1S]
               alternate_definition [interlocked] c3a
   setup qtag qtag
      preds "Must be in quarter line setup."
         if q_line_front [0 0 7S 6S 4S 5S 3S 2S]
         if q_line_back [0 0 7S 6S 4S 5S 3S 2S]

/* This call requires the "left" modifier to be given if called from
   a left-handed setup.  The purpose is to avoid losing if we call
   "scoot and little" from a leftie.  The official rules require that
   people go left on the outside, even though we didn't say "left",
   since they observed the handedness of the setup during the scoot back.
   The way we address this problem is to forbid the scoot back from a leftie
   unless the word "left" is explicitly used.  This way, both the dancers
   and the program know to go left on the outside.  The calls little/little
   more/plenty/rally by themselves are legal from either handedness and
   always go right, in accordance with the rules. */
call "right scoot back" dontshow tag rtqtagscootback
            left_means_mirror fudge_to_q_tag
   setup pmd dmd qualifier miniwaves
      array [0S 3S 0 0]
               alternate_definition [interlocked] c3a
   setup qtag qtag
      preds "Must be in quarter line setup."
         if q_line_front [0 0 0 0 4S 5S 3S 2S]
         if q_line_back  [0 0 0 0 4S 5S 3S 2S]

call "scoot and dodge" a1
   setup 2x2 2x2 restriction forbidden wave_only
      array [Z1N Z0N A3S C2S]

call "scoot the diamond" c3a
            fudge_to_q_tag
   setup pmd dmd
      preds "???"
         if dmd_ctrs_rh [CR1N CR0W 0    0]
         if always      [AL3N    0 0 AL0E]

call "scatter scoot" c1 tag scatscoot
   setup 2x4 2x4 restriction forbidden wave_only
      array [CR3S CR2S AL1S AL0S AM5S CM4S AM7S CM6S]

call "scoot chain thru" a2 tag scootchainthru
   setup 2x4 2x4 restriction forbidden wave_only
      array [CR1S AL0S CR3S AL2S 7S CM2N AM1N 4S]
   setup qtag qtag
      preds "Must be in quarter tag setup."
         if q_tag_front [0 0 6S 1N 3N 7N 2S 0N]
         if q_tag_back [0 0 6S 1N 5S 4S 2S 0N]

call "scoot chain thru and dodge" c4 tag scootchainthrundodge
   setup 2x4 2x4 restriction forbidden wave_only
      array [ZM1N ZM0N ZM3N ZM2N 7S CM2N AM1N 4S]

call "scatter scoot chain thru" c1 tag scatscootchainthru
   setup 2x4 2x4 restriction forbidden wave_only
      array [CR3S CR2S AL1S AL0S 7S CM2N AM1N 4S]

call "quick change" c4
   /* The "box_ctr_couple_up" is a little bit sleazy. */
   conc trade_and_roll [] box_ctr_couple_up [conc_demand_lines conc_force_columns]

call "deuces wild" c4
   setup 2x4 2x4
      array [AL7N CR2S AL1S CR4N ZM3N AL6S CR5S ZM0N]

call "nice and easy" c4
   conc trade_and_roll [] zing [conc_demand_lines conc_force_columns]

call "drift apart" c3a
   setup 2x4 2x4
      array [CM6S CM4S AM7S AM5S AL2S AL0S CR3S CR1S]
   setup 4x2 2x4
      array [CR6S ZM4N AL3S CM5S AM2S CR4S ZM3N AL1S]
            alternate_definition [12matrix] c3a
   setup 3x4 3x4
      array [CM11S CM4S AM10S AM5S AL2S AL0S ZM3N ZM3N ZM0N ZM0N CR1S CR3S]

call "drift around" c4
            reverse_means_mirror
   setup 2x2 2x2
      array [CR1S CR2N 0 0]

call "change your image" c3
   setup 2x4 2x4 rotate
      array [M5E R0E L7E M2E L1E M0W M7W R6E]
   setup 4x2 2x4
      array [R6S M3N R4S M5S M2S L3S M4N L1S]

call "turntable" c4a
   setup 2x4 2x4
      array [5E 4W 7W 6E 1W 0W 3W 2W]
   setup 4x2 2x4
      array [5W 4W 7W 6E 1E 0W 3W 2W]

call "switch to an hourglass" a2
   setup 2x4 hrglass rotate
      array [R6N L5E R0E L6S M3W R1E L4E M7W]

call "hourglass circulate" a2
            fudge_to_q_tag
   simple_funny
   setup hrglass hrglass
      array [0 0 L1W 0 0 0 R0E 0]
   setup phrglass hrglass
      array [M3N R2E 0 M1N L2W M7N 0 M4N]

call "squeeze the hourglass" c1
   setup hrglass galaxy
      array [0 0 M4N 0 0 0 M0N 0]
   setup phrglass galaxy
      array [R7S R5S 0 R6S L3S L1S 0 L2S]

call "squeeze the galaxy" c1
   setup galaxy hyperglass
      preds "???"
         if next_galaxyspot_is_tboned [M0N R5S 0 L2S M6N L11S 0 R8S]
                            if always [R7S R5S 0 L2S L1S L11S 0 R8S]

call "squeeze the butterfly" c1
   setup 4x4 4x4
      array [AL13S 0 0 AL10S AL6S 0 0 AL9S CR5S 0 0 CR2S CR14S 0 0 CR1S]

call "squeeze the 'O'" c1
   setup 4x4 4x4
      array [0 AL15S AL11S 0 0 AL8S CR4S 0 0 CR7S CR3S 0 0 CR0S AL12S 0]

/* Beware!  This call isn't really right. */
call "@6 squeeze" c1
            dont_use_in_resolve
   setup 4x2 4x4
      preds "???"
         if select [CR8S CR6S CR5S CR4S AL0S AL14S AL13S AL12S]
         if always [ZM10N ZM15N ZM3N ZM1N ZM2N ZM7N ZM11N ZM9N]
   setup 4x4 4x4
      preds "???"
         if select [AL13S AL15S AL11S AL10S AL6S AL8S CR4S AL9S CR5S CR7S CR3S CR2S CR14S CR0S AL12S CR1S]
         if always [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N ZM8N ZM9N ZM10N ZM11N ZM12N ZM13N ZM14N ZM15N]

call "flip the hourglass" a2
            fudge_to_q_tag take_right_hands
   setup hrglass 2x4 rotate
      array [0 0 L0S 0 0 0 R7N 0]
   setup phrglass 2x4 rotate
      array [R6E R1E 0 M0W L2E L5E 0 M3W]

call "cut the hourglass" a2
            fudge_to_q_tag take_right_hands
   setup hrglass 2x4 rotate
      array [0 0 L0S 0 0 0 R7N 0]
   setup phrglass 2x4 rotate
      array [R5E R2E 0 M0W L1E L6E 0 M3W]

call "galaxy circulate" c1
   simple_funny
   setup galaxy galaxy
      preds "???"
         if next_galaxyspot_is_tboned [R1E R2E 0 L2W L3W M4N 0 M0N]
         if always [M1N R2E 0 L2W M3N M4N 0 M0N]

call "flip the galaxy" c2
   setup galaxy thar
      array [CR1S CR2E 0 AL2W AL5S ZM4N 0 ZM0N]
            alternate_definition [reverse] c2
   setup galaxy 2x4
      preds "???"
         if next_galaxyspot_is_tboned [R1E L0S 0 R3S L2W R4S 0 L7S]
         if always                    [M1N L0S 0 R3S M2N R4S 0 L7S]

call "cut the galaxy" c2
   setup galaxy thar
      array [CR5S CR2E 0 AL2W AL1S ZM4N 0 ZM0N]
            alternate_definition [reverse] c2
   setup galaxy 2x4
      preds "???"
         if next_galaxyspot_is_tboned [R1E R3S 0 L0S L2W L7S 0 R4S]
         if always                    [M1N R3S 0 L0S M2N L7S 0 R4S]

call "_the K" dontshow tag the_k
   setup 1x4 1x4
      array [AL0S CR3S CR2S AL1S]

call "@2cross @3the K" c2
            visible_fractions finish_means_skip_first_part
   seq crosstrail [or_anycall]
   seq the_k []

call "counterpoint" c4a
            reverse_means_mirror singlefile_is_inherited diamond_is_legal cross_is_inherited
   conc recycle [inherit_reverse inherit_singlefile inherit_diamond inherit_cross] ctr_rot [conc_force_otherway]

call "@2turn @3the key" c3
            visible_fractions finish_means_skip_first_part
   seq trade [or_anycall]
   seq ctr_rot [allow_forced_mod]
   seq hinge [allow_forced_mod]

call "_clear the way ends to centers" dontshow tag clearwayec
   seq hinge []
   seq hinge []
   seq verticalhalftag []
   seq ctr_rot []

call "_clear the way centers to ends" dontshow tag clearwayce
   setup 1x4 2x2 restriction wave_only
      array [0W 2W 1E 3E]
            alternate_definition [cross] c3x
   setup 1x4 2x2 restriction wave_only
      array [3W 1W 2E 0E]

call "clear the way" c3x
            cross_is_inherited
   crossconc clearwayec [conc_demand_columns] clearwayce [conc_force_lines inherit_cross suppress_elongation_warnings]

call "create a column" c3x
   setup 4x4 2x4 rotate
      array [M6E L7E M0W L7E M1W M1W M6W M0W M6W M7W R0E M7W M1E M1E M6E R0E]

call "_twist part 1" dontshow tag twist1
   setup 2x4 2x4 rotate
      array [6N R0E L7E 1S 2S 0 0 5N]

call "_twist part 2" dontshow tag twist2
   conc star_thru [or_anycall] nullcall []

call "twist @4the line @5@7and @8@1" c1
   seq twist1 []
   seq twist2 []

call "_ctrs pass thru/ends slide thru" dontshow tag pass_thru_slide_thru
   conc passthru [] slidethru [conc_demand_lines conc_force_columns]

call "push open the gate" c4a
   seq centersin [allow_forced_mod]
   seq cast_off_34 [allow_forced_mod]
   seq endsbend []
   seq pass_thru_slide_thru []

call "centers thru and close the gate" c4
   seq centersin []
   seq twist1 []
   seq twist2 []

call "mini busy" a2
   setup 2x4 qtag
      array [R0S R1S L0S L1S L3S L6S R2S R7S]

call "2/3 mini busy" c3
   setup 2x4 hrglass
      array [R0E R1E L0W L1W M2N L3W R3E M6N]

call "_busy nothing" dontshow tag busy_nothing
            dont_use_in_resolve
   setup 2x4 normal_concentric restriction 2fl_only
            concendsetup 1x4 2x2 0
   array [6S 5S 4S 7S 2N 3N 1N 0N]

call "_busy_part_2" dontshow tag busy_part_2
            dont_use_in_resolve
   conc hngflpstpnfld [or_anycall] nullcall [suppress_elongation_warnings]

call "@4keep @5busy@1" c3a
   seq busy_nothing []
   seq busy_part_2 []

call "hinge/flip/stepnfold" dontshow tag hngflpstpnfld
            dont_use_in_resolve
   setup 1x4 2x2
   array [3S 2N 2S 3N]

call "_make a pass part 1" dontshow tag makepass_1
            dont_use_in_resolve
   setup qtag qtag
      preds "Must be in quarter tag setup."
         if q_tag_front  [0N 1N 2N 1N 4N 5N 6N 0N]
         if q_line_back  [0N 1N 2N 1N 4N 5N 6N 0N]
         if q_tag_back   [0N 1N 2N 1N 3N 7N 6N 0N]
         if q_line_front [0N 1N 2N 1N 3N 7N 6N 0N]
            /* We make this C3 so that cross nuclear reaction will be C3. */
            alternate_definition [cross] c3
   setup qtag qtag
      preds "Must be in quarter tag setup."
         if q_tag_front  [0N 1N 2N 0N 7N 3N 6N 1N]
         if q_line_back  [0N 1N 2N 0N 7N 3N 6N 1N]
         if q_tag_back   [0N 1N 2N 0N 4N 5N 6N 1N]
         if q_line_front [0N 1N 2N 0N 4N 5N 6N 1N]

call "_finish make a pass" dontshow tag finmakepass
            dont_use_in_resolve
   conc cast_off_34 [or_anycall] trade_and_roll [conc_force_lines]

call "make a pass@7 but@8@1" c4a
            cross_is_inherited
   seq makepass_1 [inherit_cross]
   seq finmakepass []

call "_chain react part 1" dontshow tag chreact_1
            dont_use_in_resolve
   setup qtag spindle rotate
      preds "Must be in quarter tag setup."
         if q_tag_front  [6W 0W 7S 0W 2W 4W 7N 6W]
         if q_tag_back   [6W 0W 7S 0W 1W 5W 7N 6W]
         if q_line_front [6W 0W 7S 0W 1W 5W 7N 6W]
         if q_line_back  [6W 0W 7S 0W 2W 4W 7N 6W]
            alternate_definition [cross] c3a
   setup qtag spindle rotate
      preds "Must be in quarter tag setup."
         if q_tag_front  [6W 0W 7S 6W 5W 1W 7N 0W]
         if q_tag_back   [6W 0W 7S 6W 2W 4W 7N 0W]
         if q_line_front [6W 0W 7S 6W 2W 4W 7N 0W]
         if q_line_back  [6W 0W 7S 6W 5W 1W 7N 0W]

call "_wave chain react part 1" dontshow tag wvchreact_1
            dont_use_in_resolve
   setup 2x4 spindle rotate
      array [7N 6W 0W 7S 1W 2W 4W 5W]
            alternate_definition [cross] c3a
   setup 2x4 spindle rotate
      array [7N 0W 6W 7S 2W 5W 1W 4W]

call "_fix spindle" dontshow tag spindlefudge
            dont_use_in_resolve
   setup spindle galaxy
      array [1N 2N 3N 4N 5N 6N 7N 0N]
   setup pspindle galaxy
      array [1N 2N 3N 4N 5N 6N 7N 0N]

call "_nuclear reaction part 2" dontshow tag nuclear_nucleus
            dont_use_in_resolve
   crossconc verticalhalftag [] cast_1_4_roll [conc_force_lines suppress_elongation_warnings]

call "_reactivate part 2" dontshow tag reactivate2
            dont_use_in_resolve take_right_hands
   setup galaxy 4x4
      preds "???"
         if next_galaxyspot_is_tboned [R13E R3S 0 L15S L14W L11S 0 R7S]
         if always                    [2S   R3S 0 L15S 9S   L11S 0 R7S]

call "_backemup" dontshow tag backemup
   setup 2x4 qtag restriction forbidden wave_only
      array [6N 7N 3N 2N 4N 4N 5N 5N]

call "chain reaction" a1
            left_means_mirror cross_is_inherited
   seq chreact_1 [inherit_cross]
   seq chreact_2 [inherit_left]
   seq turnstar1_endstrade []
   seq finish []

/* We don't put in "inherit_left" in the hinge of the chain reaction of these
   compound calls, because, in the case of tag reaction, left applies to the
   tag, and in the case of scoot reaction is it just too weird.  Also,
   we don't allow the final cast off 3/4 in scoot reaction to be replaced,
   because we might change it to a revert the tag reaction, which has another
   cast off 3/4. */

call "@iscoot @j cross @lreaction" c3
            cross_is_inherited
   seq scootback []
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@iscatter scoot @j cross @lreaction" c3
            cross_is_inherited
   seq scatscoot []
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@iscoot chain thru @j cross @lreaction" c3
            cross_is_inherited
   seq scootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@iscatter scoot chain thru @j cross @lreaction" c3
            cross_is_inherited
   seq scatscootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@i@2tag @3@j cross @lreaction" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootback []
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@i@2tag @3and scatter @j cross @lreaction" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scatscoot []
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@i@2tag @3chain thru @j cross @lreaction" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@i@2tag @3chain thru and scatter @j cross @lreaction" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scatscootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@itrans@j cross chain re@laction" c3x
            magic_is_inherited cross_is_inherited
   seq transfer [inherit_magic]
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "@iopen up @jcross chain @lreaction" c4
            magic_is_inherited cross_is_inherited
   seq openup [inherit_magic]
   seq wvchreact_1 [inherit_cross]
   seq chreact_2 []
   seq turnstar1_endstrade []
   seq finishnomod []

call "reactivate" c3
            cross_is_inherited
   seq chreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@iscoot @j cross @lreactivate" c3
            cross_is_inherited
   seq scootback []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@iscatter scoot @j cross @lreactivate" c3
            cross_is_inherited
   seq scatscoot []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@iscoot chain thru @j cross @lreactivate" c3
            cross_is_inherited
   seq scootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@iscatter scoot chain thru @j cross @lreactivate" c3
            cross_is_inherited
   seq scatscootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@i@2tag @3@j cross @lreactivate" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootback []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@i@2tag @3and scatter @j cross @lreactivate" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scatscoot []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@i@2tag @3chain thru @j cross @lreactivate" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@i@2tag @3chain thru and scatter @j cross @lreactivate" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scatscootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@itrans@j cross re@lactivate" c4
            magic_is_inherited cross_is_inherited
   seq transfer [inherit_magic]
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@iopen up @jcross @lreactivate" c4
            magic_is_inherited cross_is_inherited
   seq openup [inherit_magic]
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "nuclear reaction" c3
            cross_is_inherited
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@iscoot @j cross @lnuclear reaction" c3x
            cross_is_inherited
   seq scootback []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@iscatter scoot @j cross @lnuclear reaction" c3x
            cross_is_inherited
   seq scatscoot []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@iscoot chain thru @j cross @lnuclear reaction" c3x
            cross_is_inherited
   seq scootchainthru []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@iscatter scoot chain thru @j cross @lnuclear reaction" c3x
            cross_is_inherited
   seq scatscootchainthru []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@i@2tag @3@j cross @lnuclear reaction" c3x
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootback []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@i@2tag @3and scatter @j cross @lnuclear reaction" c3x
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scatscoot []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@i@2tag @3chain thru @j cross @lnuclear reaction" c3x
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scootchainthru []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@i@2tag @3chain thru and scatter @j cross @lnuclear reaction" c3x
            left_means_mirror cross_is_inherited first_part_visible
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq scatscootchainthru []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@itrans @j cross @lnuclear reaction" c4a
            magic_is_inherited cross_is_inherited
   seq transfer [inherit_magic]
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@iopen up @jcross @lnuclear reaction" c4
            magic_is_inherited cross_is_inherited
   seq openup [inherit_magic]
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "first @2choice@3" c4a
   seq first_nothing []
   seq first_part_2 []

call "_first nothing" dontshow tag first_nothing
            dont_use_in_resolve
   setup 2x4 normal_concentric restriction wave_only
            concendsetup 1x4 2x2 0
   array [5S 7S 6S 4S 2N 3N 1N 0N]

call "_first part 2" dontshow tag first_part_2
            dont_use_in_resolve
   conc lock_the_hinge [or_anycall] nullcall [suppress_elongation_warnings]

call "lock the hinge" c3a tag lock_the_hinge
            cross_is_inherited visible_fractions
                  /* We must not allow modifications, even forced ones, on this
                     part, because this is invoked under locker's choice, which
                     also has a modifiable lockit.  We can't allow the same base
                     call to be modified in two different places in the definition
                     of a compound call.  In any case, it doesn't make much sense
                     to say "lock the hinge, but replace the lockit with a ... " */
   seq lockit [inherit_cross]
   seq hinge []

call "hinge the lock" c3a tag hinge_the_lock
            visible_fractions
   seq hinge []
   seq lockit []

call "lock 'em up" c3x
   seq lockit []
   seq hinge []
   seq finlockemup []

call "_finish lock em up" dontshow tag finlockemup
            dont_use_in_resolve
   conc hinge_the_lock [] coupleup [conc_force_otherway]

call "@2split @3the difference" c4a
            visible_fractions finish_means_skip_first_part funny_is_inherited
   seq box_circ [or_anycall inherit_funny]
   seq cast_off_34 []
   seq slip [allow_forced_mod]
   seq cast_off_34 []

call "contour the line" c4
            visible_fractions finish_means_skip_first_part
   seq hinge []
   seq box_circ []
   seq box_circ []
   seq hinge []

call "_hinge/half circ" dontshow tag hinge_and_half_circ
            dont_use_in_resolve
   seq hinge []
   seq half_circ []

call "_half circ/hinge" dontshow tag half_circ_and_hinge
            dont_use_in_resolve
   seq half_circ []
   seq hinge []

call "_finish right on" dontshow tag finish_right_on
            dont_use_in_resolve
   setup 1x2 1x2 rotate
      array [R1W L1W]

call "_finish explode top" dontshow tag plodetop
            dont_use_in_resolve
   setup 2x4 2x4
   array [0 0 0 0 1S 7N 2S 0S]

call "explode the top" c3a
   seq explode []
   seq plodetop []

call "_central bits and pieces" dontshow tag ctr_bits_pieces
   setup 2x2 2x2 qualifier wave_only
      array [L2N R3N R0N L1N]
   setup 2x2 2x2 qualifier in_or_out
      array [R0N R3N R0N R3N]

call "bits and pieces" c4a
   conc ctr_bits_pieces [] box_circ_and_trade [conc_demand_lines conc_force_columns endscando]

call "_fascinate part 1" dontshow tag fascinate1
            dont_use_in_resolve
   conc nat34thru [] box_circ_15 [conc_demand_lines]

call "_finish fascinat@pe@q@ning@o@t" dontshow tag fascinate2
            dont_use_in_resolve
   conc diamond_ends_isolate [] 2facedwheelanddeal [or_secondary_call conc_concentric_rules suppress_elongation_warnings]

call "fascinat@pe@q@ning@o@t" c2
   seq fascinate1 []
   seq fascinate2 []

call "_fan the gate part 1" dontshow tag fanthegate1
            dont_use_in_resolve
   conc nat34_34 [] box_circ_15 [conc_demand_lines]

call "_finish fan the gat@pe@q@ning@o@t" dontshow tag fanthegate2
            dont_use_in_resolve
   conc nullcall [] bendtheline [or_secondary_call conc_force_spots]

call "fan the gat@pe@q@ning@o@t" c4a
   seq fanthegate1 []
   seq fanthegate2 []

call "_do yellow brick stuff" dontshow tag do_yellow_brick
            dont_use_in_resolve
   setup 2x4 3x1dmd rotate restriction forbidden wave_only
      array [M2N M3E M7E M2S M5S L0S R0N M5N]

call "follow the yellow brick@ning@o@r road@s" c4
   seq neighbor []
   seq do_yellow_brick []
   seq fascinate2 []

call "@2tag @3the yellow brick@ning@o@r road@s" c4
            first_part_visible
   seq halftag [or_anycall must_be_tag_call]
   seq neighbor []
   seq do_yellow_brick []
   seq fascinate2 []

call "snap" c4 tag snap
   seq partnertag []

call "crackle" c4 tag crackle
   conc pass_ocean [] hinge []

call "pop" c4 tag pop
   seq explodeline []

call "snap, crackle, and pop" c4
            visible_fractions finish_means_skip_first_part
   seq partnertag []
   seq crackle []
   seq explodeline []

call "single scoot and trade" c4a
            left_means_mirror
   setup pmd 1x4 rotate
      array [R0W R1W 0 0]

call "_slant touch and nothing" dontshow tag slant_touch_nothing1
            dont_use_in_resolve
   setup 2x4 1x8
   array [0N 1N 5N 4N 6N 3N 6N 3N]

call "_outers maybe wheel and deal" dontshow tag slant_touch_nothing2
            dont_use_in_resolve
   conc nullcall [] wheelanddeal [or_anycall]

call "slant touch and @2wheel@3" c3a
   seq slant_touch_nothing1 []
   seq slant_touch_nothing2 []

call "_centers slip" dontshow tag ctrs_slip
            dont_use_in_resolve
   /* This call, and the one following, create serious problems for
      the concentric call mechanism.  If we are doing diamond chain thru
      in, say, split phantom diamonds with only the points as real people
      (that is, we physically have columns far apart), then the outsides
      will all be phantoms when the setup is concentrified.  The concentric
      call mechanism has a hard time figuring out the result setup in such
      a case.  Special code has been added to look for the case of outsides
      being phantoms and the call being "nullcall", in which case it make
      the outsides hold the setup that the phantoms were occupying, and
      forces the "conc_force_spots" flag to be obeyed. */
   conc slip [allow_forced_mod] nullcall []

call "_centers cast 3/4" dontshow tag ctrs_cast_3_4
            dont_use_in_resolve
   /* See the previous call. */
   singleconc_together cast_off_34 [allow_forced_mod] nullcall []

call "_start sterling chain thru" dontshow tag startsterl
            dont_use_in_resolve
   setup 2x4 qtag rotate
   array [6N 1E 4E 6S 3S 1W 4W 3N]

call "@2diamond @3chain thru" a2
            intlk_is_inherited magic_is_inherited funny_is_inherited visible_fractions finish_means_skip_first_part
   seq diamondcirc [or_anycall inherit_intlk inherit_magic inherit_funny]
   seq ctrs_slip []
   seq ctrs_cast_3_4 []

call "sterling chain thru" c3x
   seq startsterl []
   seq ctrs_slip []
   seq ctrs_cast_3_4 []

call "_double circulate" dontshow tag dblcirc
            dont_use_in_resolve
   seq circulate []
   seq circulate []

call "_start @b chain and circ in" dontshow tag startchcircin
            dont_use_in_resolve neednumber
   conc armturn_n4 [] dblcirc [conc_demand_lines]

call "_start 3/4 chain and circ in" dontshow tag start34chcircin
   /* It would be nice if there were an invocation modifier that would pass a number. */
            dont_use_in_resolve
   conc armturn_34 [] dblcirc [conc_demand_lines conc_force_lines]

call "@b chain and circulate in" c4
            neednumber
   seq startchcircin []
   seq ctrs_slip []
   seq ctrs_cast_3_4 []
   seq spread []

call "spin chain and circulate in" c4
            step_to_wave can_be_fan_or_yoyo left_means_touch_or_check first_part_visible finish_means_skip_first_part
   seq swing []
   seq start34chcircin []
   seq ctrs_slip []
   seq ctrs_cast_3_4 []
   seq spread []

call "scoot and weave" a2
            fudge_to_q_tag
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [CCCAL3N AAACR3S AL2N CR2S]
   /* I'm not surethat the use of precise stability stuff is tasteful
      for scoot and weave from a 1/4 tag, but here it is anyway. */
   setup pmd 1x4 qualifier right_wave
      array [CR0W CCCAL1E 0 0]
   setup pmd 1x4 qualifier left_wave
      array [AL0E 0 0 AAACR1W]

call "scoot and weave (by parts)" a2
            visible_fractions
   seq scootback []
   seq weave []

call "turn and weave" c3x
            step_to_wave left_means_mirror
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [L3N R3S L2N R2S]
/* ***** not right: need predicate so can do it from leftie. */
   setup pmd 1x4
      array [L3W R0W 0 0]

call "_fold to face" dontshow tag foldtoface
   setup 1x2 1x2 rotate restriction wave_only
      array [CR0E AL0E]
               alternate_definition [cross] c2
   setup 1x4 2x2 restriction wave_only
      array [CR1S CR1S AL0S AL0S]
               alternate_definition [interlocked] c3
   setup 1x4 2x2 restriction 2fl_only
      array [CR0S CR1S AL1S AL0S]

call "_ctrs ramble" dontshow tag ctrsramble
            cross_is_inherited intlk_is_inherited
   seq foldtoface [inherit_cross inherit_intlk]
   seq slidethru []

call "_ends ramble" dontshow tag endsramble
            cross_is_inherited
   seq leads_div_move_along [inherit_cross]
   seq slidethru []

call "ramble" c1 tag ramble
            fudge_to_q_tag cross_is_inherited intlk_is_inherited
   conc ctrsramble [inherit_cross inherit_intlk] endsramble [inherit_cross conc_demand_columns conc_force_columns endscando]

call "_check ctrs cross counter" dontshow tag check_cross_counter
   setup 1x2 1x2
      array [ZM0N ZM1N]
               alternate_definition [cross] c3a
   setup 1x4 1x4 restriction forbidden wave_only
      array [CR3S CR2S AL1S AL0S]

call "_ctrs counter" dontshow tag ctrscounter
            cross_is_inherited intlk_is_inherited
   seq check_cross_counter [inherit_cross]
   seq cast_off_34 [inherit_intlk]
   seq splitctrrot []

call "_ends counter" dontshow tag endscounter
/* Might actually like for this to have 3 parts. */
            left_means_mirror cross_is_inherited
   setup 2x2 2x2
      array [R0S M1N 0 0]
               alternate_definition [cross] c3a
   setup 2x2 2x2
      array [M1N R0S 0 0]

call "counter" c2 tag counter
            fudge_to_q_tag left_means_mirror cross_is_inherited intlk_is_inherited
   conc ctrscounter [inherit_cross inherit_intlk] endscounter [inherit_left inherit_cross conc_demand_columns conc_force_lines endscando]

call "_ctrs rally" dontshow tag ctrsrally
            visible_fractions intlk_is_inherited
   seq stepnfold [inherit_intlk]
   seq peelntrail [allow_plain_mod]

call "_ends rally" dontshow tag endsrally
            left_means_mirror
   setup 2x2 1x4
      array [CR2S CR3N 0 0]

call "rally" c3a tag rally
            fudge_to_q_tag left_means_mirror intlk_is_inherited
   conc ctrsrally [inherit_intlk] endsrally [inherit_left conc_demand_columns endscando]

call "little" c1 tag little
            fudge_to_q_tag left_means_mirror
   setup qtag 2x4 restriction wave_only
      array [CR3S CR4S AL2S ZM2N 0 0 CR1S ZM1N]
            alternate_definition [interlocked] c3a
   setup qtag 2x4 restriction 2fl_only
      array [CR3S CR4S AL1S ZM2N 0 0 CR2S ZM1N]

call "little, ends go as you are" c1 tag little_ends_as_are
            fudge_to_q_tag
   setup qtag 2x4 restriction wave_only
      array [0 0 AL2S ZM2N 0 0 CR1S ZM1N]
   setup pqtag 2x4 restriction wave_only
      array [CR3E CR4E 0 0 AL3W AL4W 0 0]
            alternate_definition [interlocked] c3a
   setup qtag 2x4 restriction 2fl_only
      array [0 0 AL1S ZM2N 0 0 CR2S ZM1N]
   setup pqtag 2x4 restriction 2fl_only
      array [CR3E CR4E 0 0 AL3W AL4W 0 0]

call "_finish plenty" dontshow tag finishplenty
            dont_use_in_resolve
   setup 2x4 qtag
      array [1S 6S 2S 0S 1S 3N 7N 0S]
            alternate_definition [interlocked] c3a
   setup 2x4 qtag
      array [1S 6S 2S 0S 1S 3N 7N 0S]

call "plenty" c1 tag plenty
            left_means_mirror intlk_is_inherited
   seq little [inherit_left inherit_intlk]
   seq turnstar2 [allow_forced_mod]
   seq finishplenty []

call "plenty, ends go as you are" c1
            intlk_is_inherited
   seq little_ends_as_are [inherit_intlk]
   seq turnstar2 [allow_forced_mod]
   seq finishplenty []

call "@2scoot @3and little" c1
            left_means_mirror intlk_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk]
   seq little [inherit_left inherit_intlk]

call "_centers circ" dontshow tag centers_circ
   conc circulate [] nullcall []

call "little more" c2
            left_means_mirror intlk_is_inherited
   seq little [inherit_left inherit_intlk]
   seq centers_circ []

call "@2scoot @3and little more" c2
            left_means_mirror intlk_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk]
   seq little [inherit_left inherit_intlk]
   seq centers_circ []

call "@2scoot @3and plenty" c1
            left_means_mirror intlk_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk]
   seq plenty [inherit_left inherit_intlk]

call "_start good and plenty" dontshow tag start_good_and
            dont_use_in_resolve
   conc recoil [] dblcirc [conc_demand_lines conc_force_lines]

call "good and plenty" c3x
   seq start_good_and []
   seq turnstar2 [allow_forced_mod]
   seq finishplenty []

call "@i@2scoot @3and @jcross @lramble" c1
            intlk_is_inherited cross_is_inherited
   seq scootback [or_anycall inherit_intlk]
   seq ramble [inherit_intlk inherit_cross]

call "@i@2scoot @3and @jcross @lcounter" c2
            left_means_mirror cross_is_inherited intlk_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk]
   seq counter [inherit_left inherit_cross inherit_intlk]

call "@2scoot @3and rally" c3a
            left_means_mirror intlk_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk]
   seq rally [inherit_left inherit_intlk]

call "LINES @0 THRU" c2
            dont_use_in_resolve
   conc nullcall [mandatory_anycall] circulate [conc_force_spots]

call "spin a wheel" c4
   seq hinge [cpls_unless_single]
   seq tripletrade []
   seq hinge [cpls_unless_single]

call "stack the wheel" c4a
            single_is_inherited visible_fractions finish_means_skip_first_part
   seq hinge [cpls_unless_single]
   seq roll []

call "cross and wheel" c2
            single_is_inherited visible_fractions finish_means_skip_first_part
   seq hinge [cpls_unless_single]
   seq stepnfold [cpls_unless_single]

/* **** When we have "force_single" and "central", we won't need this. */
call "_central strike out" dontshow tag sngcrossnwheel
   seq hinge []
   seq stepnfold []

call "_cross trade and wheel part 2" dontshow tag crosstradewheel2
   setup 1x8 1x8           /* very center 2 trade */
      array [M0N M1N R6S M3N M4N M5N L2S M7N]
            alternate_definition [single] c2
   setup 1x4 1x4           /* center 2 trade */
      array [M0N R3S M2N L1S]
            alternate_definition [grand] c2
   setup 1x8 1x8           /* center 6 trade */
      array [M0N R3S R6S L1S M4N L7S L2S R5S]
            alternate_definition [grand single] c2
   setup 1x8 1x8           /* center 6 trade */
      array [M0N R3S R6S L1S M4N L7S L2S R5S]

call "_cross trade and wheel part 3" dontshow tag crosstradewheel3
   setup 1x4 2x2 qualifier miniwaves
      array [R0S M0N L1S M1N]
   setup 1x4 2x2
      array [R0S M3N L1S M2N]
            alternate_definition [single] c2
   setup 1x4 2x2 qualifier miniwaves           /* same */
      array [R0S M0N L1S M1N]
   setup 1x4 2x2
      array [R0S M3N L1S M2N]
            alternate_definition [grand] c2
   setup 1x4 2x2           /* same */
      array [R0S M0N L1S M1N]
            alternate_definition [grand single] c2
   setup 1x8 2x4           /* 6 step; 2 fold */
      array [R0S M0N M1N M1N L3S M3N M2N M2N]

call "cross trade and wheel" c2
            grand_is_inherited single_is_inherited
   seq hinge [cpls_unless_single]
   seq crosstradewheel2 [inherit_grand inherit_single]
   seq crosstradewheel3 [cpls_unless_single inherit_grand inherit_single]

call "hinge and trade" c4
            single_is_inherited
   seq hinge [cpls_unless_single]
   seq slip [cpls_unless_single roll_transparent]
   seq roll [cpls_unless_single]

call "_hinge & circ part 2" dontshow tag hc2
   setup 1x4 dmd rotate
      array [CR0N CR1E AL0S AL3E]

call "hinge and circulate @h" c4
            single_is_inherited
   seq hinge [cpls_unless_single]
   seq hc2 [cpls_unless_single]
   seq quarter_maybe [cpls_unless_single]

call "_finish stimulate" dontshow tag finstim
            dont_use_in_resolve
   setup 4x2 2x4 rotate restriction forbidden wave_only
   array [6E 1E 3E 4E 7E 0E 2E 5E]

call "@1stimulate the column" c4a
            first_part_visible finish_means_skip_first_part
   seq colcirc [or_anycall]
   seq finstim []

call "_finish coordinate" dontshow tag fincoord
            dont_use_in_resolve
   setup 4x2 2x4 rotate
   array [5E 4E 2E 3E 0E 1E 7E 6E]

call "@1coordinate" plus
            first_part_visible finish_means_skip_first_part
   seq colcirc [or_anycall]
   seq fincoord []

call "_cooperate 2" dontshow tag coop2
            dont_use_in_resolve
   conc6_2 invert_2_3 [allow_forced_mod] nullcall []

call "_cooperate 3" dontshow tag coop3
            dont_use_in_resolve
   conc dropin [allow_forced_mod] nullcall []

call "@1cooperate" c4
            first_part_visible finish_means_skip_first_part
   seq colcirc [or_anycall]
   seq half_circ []
   seq coop2 []
   seq coop3 []

call "_set your pace 2" dontshow tag pace2
            dont_use_in_resolve
   conc6_2 grandflwthru [] nullcall []

call "_set your pace 3" dontshow tag pace3
            dont_use_in_resolve
   conc cyclewheel [] cyclewheel []

call "@2set @3your pace" c4
   seq colcirc [or_anycall]
   seq half_circ []
   seq pace2 []
   seq pace3 []

call "_finish percolate" dontshow tag finpercolate
            dont_use_in_resolve
   conc nicely [] natturnthru [suppress_elongation_warnings]

call "@1percolate" c1
            first_part_visible finish_means_skip_first_part
   seq circulate [or_anycall]
   seq half_circ []
   seq finpercolate []

call "turn up" dontshow tag hinge_circ_trade
            dont_use_in_resolve visible_fractions
   seq hinge []
   seq circulate []
   seq trade []

call "_finish perk up" dontshow tag finperk
            dont_use_in_resolve
   conc hinge_circ_trade [] dblcirc []

call "@1perk up" c2
            first_part_visible finish_means_skip_first_part
   seq circulate [or_anycall]
   seq halfboxcirc_miniwaves []
   seq finperk []

call "_finish cover up" dontshow tag fincover
            dont_use_in_resolve
   conc recycle [] about [suppress_elongation_warnings]

call "@1cover up" c4a
            first_part_visible finish_means_skip_first_part
   seq circulate [or_anycall]
   seq half_circ []
   seq fincover []

call "choice" c3x tag choice
            visible_fractions finish_means_skip_first_part dont_use_in_resolve
   conc lock_the_hinge [allow_forced_mod] tradestpnfld [allow_forced_mod suppress_elongation_warnings]

call "@2lock@3er's choice" c3a
            cross_is_inherited
   seq lockit [inherit_cross or_anycall]
   seq choice []

call "cy-kick" c4a
      /* ***** make sure we do a "fudge to 3/4 tag" */
            cross_is_inherited
   conc 23recycle [inherit_cross] beaukick [endscando]

call "_ctrs scamper" dontshow tag ctrs_scamper
            step_to_wave
   seq armturn_14 []
   seq circulate []

call "_ends scamper" dontshow tag ends_scamper
   seq div_move_along []
   seq touch_1_4 []

call "scamper" c4
      /* ***** make sure we do a "fudge to 3/4 tag" */
   conc ctrs_scamper [] ends_scamper [conc_demand_columns conc_force_columns endscando]

call "divvy up" c3x
      /* ***** make sure we do a "fudge to 3/4 tag" */
   conc single_wheel [] div_move_along [conc_demand_columns conc_force_lines]

call "lead the way, part 1" dontshow tag leadtheway_1
   conc peeloff [] trade []

call "lead the way, part 2" dontshow tag leadtheway_2
   conc bendtheline [] roll []

call "lead the way" c4
            visible_fractions finish_means_skip_first_part
   seq leadtheway_1 []
   seq leadtheway_2 []

call "6X2 acey deucey" a1
            fudge_to_q_tag
            magic_is_inherited funny_is_inherited
   conc2_6 trade [or_anycall] circulate [inherit_magic inherit_funny]

call "3X2 acey deucey" c1
            fudge_to_q_tag
            funny_is_inherited
   conc2_6 trade [] trngle_circ [or_anycall inherit_funny]

call "kick the habit" c4a
   conc leadkick [] ctr_rot [conc_force_otherway allow_forced_mod]

call "_shuttle @h part 2" dontshow tag shuttle2d
   singleconc_together slidethru [] quarter_maybe []

call "_shuttle @0 part 2" dontshow tag shuttle2c
   singleconc_together slidethru [] nullcall [mandatory_anycall]

call "shuttle @h" c3x
            visible_fractions finish_means_skip_first_part
   seq passthru []
   seq shuttle2d []

call "shuttle @0" c3x
            visible_fractions finish_means_skip_first_part
   seq passthru []
   seq shuttle2c []

call "_tag and spin @h part 2" dontshow tag tagnspin2d
   singleconc_together armturn_34 [] quarter_maybe []

call "_tag and spin @m part 2" dontshow tag tagnspin2c
   singleconc_together armturn_34 [] nullcall [mandatory_secondary_call]

call "@2tag @3and spin @h" c4
            left_means_mirror first_part_visible
   /* We pass "left" only to the tag, so we can say "left vertical tag
      and spin right".  The direction part is invariant. */
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq extend []
   seq tagnspin2d []

call "@2tag @3and spin @m" c4
            left_means_mirror first_part_visible
   /* We pass "left" only to the tag, so we can say "left vertical tag
      and spin right".  The direction part is invariant. */
   seq halftag [or_anycall inherit_left must_be_tag_call]
   seq extend []
   seq tagnspin2c []

call "turnstyle" c3
            left_means_mirror
   singleconc_together touch_3_4 [inherit_left] quarter_right [inherit_left conc_force_spots]

call "relocate the setup" c2
            fudge_to_q_tag
            funny_is_inherited
   conc fanthetop [] ctr_rot [inherit_funny]

call "_tally ho part 2" dontshow tag tally_ho_part_2
            dont_use_in_resolve
   conc hinge_and_half_circ [] trade []

call "tally ho" c1
   seq half_circ []
   seq tally_ho_part_2 []
   seq finishwithmod []

call "_touchngo part 2" dontshow tag touchngo2
            dont_use_in_resolve neednumber
   conc6_2 armturn_n4 [] armturn_14 []

call "_touchngo anything part 2" dontshow tag touchngo2c
            dont_use_in_resolve
   conc6_2 armturn_14 [mandatory_anycall] armturn_14 []

call "_touchngo part 3" dontshow tag touchngo3
            dont_use_in_resolve neednumber
   conc_diamond_line armturn_n4 [] spec_drop_in [suppress_elongation_warnings]

call "_touchngo anything part 3" dontshow tag touchngo3c
            dont_use_in_resolve
   conc_diamond_line armturn_34 [mandatory_secondary_call] spec_drop_in [suppress_elongation_warnings]

call "touch and go @b X @b" c4
            need_two_numbers
   seq half_circ []
   seq touchngo2 []
   seq touchngo3 [shift_one_number]

call "touch and go @b X @m" c4
            neednumber
   seq half_circ []
   seq touchngo2 []
   seq touchngo3c []

call "touch and go @0 X @m" c4
   seq half_circ []
   seq touchngo2c []
   seq touchngo3c []

call "_leftable 1/2 swap" dontshow tag half_swap
            dont_use_in_resolve left_means_mirror
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 ZM1W CR2N]
            alternate_definition [cross] c3a
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 ZM3W CR2N]

call "_leftable 1/2 reverse swap" dontshow tag half_rev_swap
            dont_use_in_resolve left_means_mirror
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 AL2S ZM3W]
            alternate_definition [cross] c3a
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 AL2S ZM1W]

call "_start action" dontshow tag startaction
            dont_use_in_resolve left_means_mirror
   conc half_rev_swap [inherit_left] hinge [inherit_left conc_demand_columns]

call "the action" c4
            left_means_mirror
   seq startaction [inherit_left]
   seq turnstar1_endstrade []
   seq finishwithmod []

call "barge the action" c4
            split_like_square_thru left_means_mirror
   seq square_thru_2 []
   seq startaction [inherit_left]
   seq turnstar1_endstrade []
   seq finishwithmod []

call "_centers windmill, no modify" dontshow tag ctrwindmillnomod
            dont_use_in_resolve
   seq swingslip []
   seq cast_off_34 []

call "spin the windmill, outsides as you are" dontshow tag swapwindmill4
            dont_use_in_resolve
   conc ctrwindmillnomod [] dblcirc [conc_demand_lines conc_force_lines]

call "_fudge to parallel diamonds" dontshow tag fudge_to_parallel_diamonds
            dont_use_in_resolve
   setup qtag qtag
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup pqtag qtag
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup ptpd qtag
      array [ZM6N ZM0N ZM7N ZM5N ZM2N ZM4N ZM3N ZM1N]
   setup pptpd qtag
      array [ZM6N ZM0N ZM7N ZM5N ZM2N ZM4N ZM3N ZM1N]

call "swap the windmill" c4
            reverse_means_mirror cross_is_inherited
   /* Note that, like circle by, we magically turn "reverse" into "left". */
   seq half_swap [inherit_left inherit_cross]
   seq fudge_to_parallel_diamonds []
   seq swapwindmill4 []

call "_start breaker" dontshow tag startbreaker
            dont_use_in_resolve
   setup 4x2 normal_concentric rotate
            concendsetup dmd 1x4 0
      preds "Can't tell how to cast off 3/4."
         if columns_couple   [4W 0  0  7W 6E 0  0  5E]
         if columns_miniwave [4W 1N 2E 7W 7E 0E 1S 4E]

call "_finish it with forced modify" dontshow tag finishforcemod
            dont_use_in_resolve
   conc_diamond_line nullcall [mandatory_anycall] spec_drop_in [suppress_elongation_warnings]

call "breaker @0" c3a
   seq startbreaker []
   seq finishforcemod []

call "_finish it with cast @9" dontshow tag finish_with_cast_n
            dont_use_in_resolve neednumber
   conc_diamond_line cast_off_n4 [] spec_drop_in [suppress_elongation_warnings]

call "breaker @9" c3a
            neednumber
   seq startbreaker []
   seq finish_with_cast_n []

call "_start linear action" dontshow tag startlinact
            dont_use_in_resolve
   setup qtag normal_concentric
            concendsetup dmd 1x4 1
      preds "Can't tell how to cast off 3/4."
         /* **** We are abusing these predicates.  Used from a qtag, they test coupleness. */
         if lines_couple   [5S 4N 0N 3W 7N 6S 2S 1E]
         if lines_miniwave [5S 5N 0S 3W 6N 6S 2S 3E]

call "linear action" c1
   seq startlinact []
   seq finishwithmod []

/* This one allows syntactically easy modify, for "tally ho but flip back" and "breaker flip back". */

call "_finish it with modify" dontshow tag finishwithmod
            dont_use_in_resolve 12_matrix_is_inherited
   conc_diamond_line cast_off_34 [or_anycall] spec_drop_in [inherit_12_matrix suppress_elongation_warnings]

/* This one allows difficult modify, for "chain reaction, replace cast off 3/4 with flip back". */

call "_finish it" dontshow tag finish
            dont_use_in_resolve 12_matrix_is_inherited
   conc_diamond_line cast_off_34 [allow_forced_mod] spec_drop_in [inherit_12_matrix suppress_elongation_warnings]

/* This one forbids modify, for relay the top and motivate.  There are two instances of cast off 3/4 in those calls. */

call "_finish it, no modify" dontshow tag finishnomod
            dont_use_in_resolve 12_matrix_is_inherited 16_matrix_is_inherited
   conc_diamond_line cast_off_34 [] spec_drop_in [inherit_12_matrix inherit_16_matrix suppress_elongation_warnings]

call "good show" c3
   setup 2x4 2x4
      array [M1N L0S R3S M2N M3N R2S L1S M0N]
   setup 4x2 2x4
      array [M1N R6S R3S M4N M3N L4S L1S M6N]
            alternate_definition [magic] c3x
   setup 4x2 2x4
      array [6N 6S 4S 4N 3N 3S 1S 1N]

call "snag circulate" c4a
   conc half_circ [] circulate []

call "turn on" c4
            visible_fractions finish_means_skip_first_part
   splitseq ctr_rot []
   seq extend []

call "tickle" c3x
            visible_fractions finish_means_skip_first_part
   seq hinge []
   seq splitctrrot []

call "_central walk the clover" dontshow tag cwalkclv
   seq touch_1_4 []
   seq walkndodge []

/* **** Isn't this legal from waves -- they just step through and do it? */

call "walk the clover" c4
   conc cwalkclv [] clover [conc_demand_columns conc_force_columns]

