/* calls database source for Sd -- square dance caller's helper.

    Copyright (C) 1990-1996  William B. Ackerman.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 1, or (at your option)
    any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.

    -----------------------------------------------------------------

    The `mkcalls' program must be run once to compile `sd_calls.txt',
    this file, into `sd_calls.dat', the binary file used by Sd.

    -----------------------------------------------------------------

    The version of this file is as shown immediately below.  This
    string gets encoded into the database file and then displayed
    at program startup, as the "db" part of the complete version.

    ATTENTION!  If you modify the database, we recommend that
    you change the version string below to identify the change.
    This will facilitate tracking errors, since the database version
    will be written onto every sequence.  Changing the version
    string is also required by paragraphs 2(a) and 2(c) of the GNU
    General Public License if you distribute the file.
*/

version "31.65"

call "nothing" mainstream tag nullcall
            dont_use_in_resolve
   nulldefine

call "(nothing)" mainstream
            dont_use_in_resolve
   nulldefine

/* We make these distinct calls so they won't get confused
   with any other call that gets replaced. */

call "(base ATC call 0)" dontshow tag tagnullcall0
   nulldefine

call "(base ATC call 1)" dontshow tag tagnullcall1
   nulldefine

call "(base ATC call 2)" dontshow tag tagnullcall2
   nulldefine

call "(base ATC call 3)" dontshow tag tagnullcall3
   nulldefine

call "(base circ call)" dontshow tag circnullcall
   nulldefine

/* *************************** START OF TAG CALLS *************************** */

/*   Note!  The base tag calls are not alphabetized.  They appear in the
   menu in the order in which we list them here. */

call "tag" mainstream
            left_means_mirror base_tag_call_1
   setup 1x4 2x2 no_cutting_through restriction awkward_centers
      array [C0E C1E A2W A3W]
            alternate_definition [3x3] c4
   setup 1x6 2x3
      array [C0E C1E C2E A3W A4W A5W]
            alternate_definition [4x4] c4
   setup 1x8 2x4
      array [C0E C1E C3E C2E A4W A5W A7W A6W]

call "flip" c1
            base_tag_call_1
   setup 1x4 2x2 restriction forbidden wave_only
      array [C1E A3E A0W C2W]

call "cross flip" c3
            base_tag_call_1
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [C1E C2W A0W A3E]

call "vertical tag" c1
            left_means_mirror base_tag_call_1
   setup 2x2 2x2 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C1S A2S Z0N Z3N]
         if vert2 [0 A1S 0 Z0N]
            alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [ZM0W 1E]

call "vertical left tag" c2
            base_tag_call_1
   setup 2x2 2x2 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C0S A3S Z1N Z2N]
         if vert2 [0 A0S 0 Z1N]
             alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [ZM1W 0E]

call "chase" c1
            left_means_mirror base_tag_call_3
   setup 2x2 2x2
      array [C1S C2S 0 0]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [C0E C1E C2E 0 0 0]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [C0E C1E C2E C3E 0 0 0 0]

call "double pass" c4
            left_means_mirror base_tag_call_3
   setup 4x1 2x2
      array [ZM0N ZM1N 0 0]

call "tag the star" c4a
            left_means_mirror base_tag_call_2
   setup 2x2 2x2 restriction not_tboned
      array [0 0 ACR1S CR2S]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [ACR2S CR3S 0 0]

call "circle the tag" c4
            left_means_mirror base_tag_call_2
   setup 2x2 2x2 restriction not_tboned
      array [0 0 C0E C1E]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [C1E C2E 0 0]

call "snap the tag" c4
            left_means_mirror base_tag_call_2
   setup 1x4 2x2
      array [1E 0E 3W 2W]

call "loop and tag" c3
            left_means_mirror base_tag_call_2
   setup 2x2 2x2        restriction peelable_box
      array [A1E C3W C2W A0E]
            alternate_definition [cross] c3
   setup 2x2 2x2        restriction peelable_box
      array [C3W A1E A0E C2W]

call "cross loop and tag" c3
            left_means_mirror base_tag_call_2
   setup 2x2 2x2        restriction peelable_box
      array [C3W A1E A0E C2W]

call "invert" c2
            base_tag_call_0
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [ZM6W ZM1W AL0E AM7E CM4E CR3E ZM2W ZM5W]

call "magic cross invert" c4
            base_tag_call_0
   setup 4x2 2x4 rotate restriction forbidden magic_only
      array [ZM5W ZM1W AL0E CM4E AM7E CR3E ZM2W ZM6W]

call "continue to invert" c4
            base_tag_call_0
   setup qtag 2x4 restriction forbidden wave_only
      array [AL0S CR3S ZM3N ZM2N ZM5N ZM6N ZM0N ZM1N]

call "continue to magic cross invert" c4
            base_tag_call_0
   setup qtag 2x4 restriction forbidden wave_only
      array [CR3S AL0S ZM3N ZM2N ZM6N ZM5N ZM0N ZM1N]

call "track" c3
            left_means_mirror base_tag_call_0
   setup 4x2 2x4 rotate
      array [0 0 3E 4E 6E 1E 0 0]

call "revert @v" c3
            base_tag_call_0
   seq tagnullcall0 []
   seq revert []

call "reflected @v" c3
            base_tag_call_0
   seq tagnullcall0 []
   seq reflect []

call "revert and then reflect @v" c4
            base_tag_call_0
   seq tagnullcall0 []
   seq revert []
   seq reflect []

call "reflect and then revert @v" c4
            base_tag_call_0
   seq tagnullcall0 []
   seq reflect []
   seq revert []

call "revert, then reflect, then revert @v" c4
            base_tag_call_0
   seq tagnullcall0 []
   seq revert []
   seq reflect []
   seq revert []

call "reflect, then revert, then reflect @v" c4
            base_tag_call_0
   seq tagnullcall0 []
   seq reflect []
   seq revert []
   seq reflect []

/* **************************** END OF TAG CALLS **************************** */

/* *************************** START OF CIRC CALLS *************************** */

/*   Note!  The base circulate calls are not alphabetized.  They appear in the
   menu in the order in which we list them here. */

call "split@O circulate@P" mainstream
            base_circ_call take_right_hands
   simple_funny
   setup 2x2 2x2 no_cutting_through
      array [CR1S AL0S ZM1N ZM0N]
            alternate_definition [half] mainstream
   setup 2x2 dmd rotate
      array [CR0N AL0S ZM1W ZM3W]

call "trade@O circulate@P" a2
            base_circ_call take_right_hands
   /* We use qualifiers to be sure this isn't called from, for example, inverted lines.
      (In that case, the "lines_miniwave" predicate would be satisfied and everyone
      would do a cross over circulate, which is wrong.)  We additionally use predicates
      in order to be sufficiently strict.  The qualifiers simply check that the live
      people are consistent with the indicated setup -- they don't check that there
      are enough live people for the dancers to be able to tell unambiguously which
      version of the call they should do. */
   setup 2x4 2x4 qualifier wave_only
      preds "Can't determine whether waves or two-faced lines."
         if lines_miniwave [CR2S CR3S AL0S AL1S ZM2N ZM3N ZM0N ZM1N]
   setup 2x4 2x4 qualifier 2fl_only
      preds "Can't determine whether waves or two-faced lines."
         if lines_couple   [CR1S AL0S CR3S AL2S ZM1N ZM0N ZM3N ZM2N]
   setup 2x4 2x4 qualifier 1fl_only
      preds "Can't determine whether waves or two-faced lines."
         if lines_couple   [CR1S AL0S CR3S AL2S ZM1N ZM0N ZM3N ZM2N]
            alternate_definition [12matrix] c3
   setup 3x4 3x4      /* T'would be nice to have qualifiers that worked for this, and 16 matrix. */
      preds "Can't determine whether waves or two-faced lines."
         if lines_miniwave [CR2S CR3S AL0S AL1S ZM2N ZM3N ZM5N ZM4N ZM10N ZM11N ZM1N ZM0N]
         if lines_couple   [CR1S AL0S CR3S AL2S ZM1N ZM0N ZM11N ZM10N ZM4N ZM5N ZM2N ZM3N]

call "cross over@O circulate@P" a1
            base_circ_call
   setup 2x4 2x4
      array [CR2S CR3S AL0S AL1S ZM2N ZM3N ZM0N ZM1N]
   setup 4x2 2x4
      array [6N 5N 4N 0 0 3N 2N 1N]
            alternate_definition [12matrix] c3a
   setup 3x4 3x4
      array [CR2S CR3S AL0S AL1S ZM2N ZM3N ZM5N ZM4N ZM10N ZM11N ZM1N ZM0N]

call "in roll@O circulate@P" a2
            base_circ_call
   setup 2x4 2x4
      preds "???"
         if inroller_is_cw [CR1S CR2S CR3S    0    0 AL6S AL7S ZM0N]
         if always         [   0 AL0S AL1S AL2S ZM3N CR4S CR5S    0]
   setup 2x3 2x3
      preds "???"
         if inroller_is_cw_2x3 [CR1S CR2S    0    0 AL5S ZM0N]
         if always             [   0 AL0S AL1S ZM2N CR3S    0]
            alternate_definition [half] c1
   setup 2x4 spindle
      preds "???"
         if inroller_is_cw [CR0E CR1E CR2E    0    0 AL5W AL6W ZM7N]
         if always         [   0 AL0W AL1W AL2W ZM3N CR4E CR5E    0]
   setup 2x3 short6 rotate
      preds "???"
         if inroller_is_cw_2x3 [CR5N CR0N    0    0 AL3S ZM4W]
         if always             [   0 AL5S AL0S ZM1W CR2N    0]
            alternate_definition [12matrix] c3
   setup 2x6 2x6
      preds "???"
         if inroller_is_cw_2x6 [CR1S CR2S CR3S CR4S CR5S    0    0 AL8S AL9S AL10S AL11S ZM0N]
         if always             [   0 AL0S AL1S AL2S AL3S AL4S ZM5N CR6S CR7S  CR8S CR9S     0]
            alternate_definition [16matrix] c3
   setup 2x8 2x8
      preds "???"
         if inroller_is_cw_2x8 [CR1S CR2S CR3S CR4S CR5S CR6S CR7S    0    0  AL10S AL11S AL12S AL13S AL14S AL15S ZM0N]
         if always             [   0 AL0S AL1S AL2S AL3S AL4S AL5S AL6S ZM7N   CR8S  CR9S CR10S CR11S CR12S CR13S    0]
            alternate_definition [magic] c3
   setup 2x4 2x4
      preds "???"
         if magic_inroller_is_cw [CR6S AL7S AL1S    0    0 CR3S CR5S ZM0N]
         if always               [   0 CR2S CR4S AL5S ZM3N AL6S AL0S    0]
   setup 2x3 2x3
      preds "???"
         if magic_inroller_is_cw_2x3 [CR4S AL5S    0    0 CR2S ZM0N]
         if always                   [   0 CR3S AL4S ZM2N AL0S    0]

call "out roll@O circulate@P" a2
            base_circ_call
   setup 2x4 2x4
      preds "???"
         if outroller_is_cw [   0 CR2S CR3S AL0S AL5S AL6S AL7S    0]
         if always          [CR3S AL0S AL1S    0    0 CR4S CR5S CR6S]
   setup 2x3 2x3
      preds "???"
         if outroller_is_cw_2x3 [   0 CR2S AL0S AL4S AL5S    0]
         if always              [CR2S AL0S    0    0 CR3S CR4S]
            alternate_definition [half] c1
   setup 2x4 qtag rotate
      preds "???"
         if outroller_is_cw [   0 CR7N CR0N AL6S AL1S AL3S AL4S    0]
         if always          [CR6N AL5S AL7S    0    0 CR1N CR3N CR4N]
   setup 2x3 short6
      preds "???"
         if outroller_is_cw_2x3 [   0 CR2E AL1W AL3W AL5W    0]
         if always              [CR1E AL0W    0    0 CR3E CR5E]
            alternate_definition [12matrix] c3
   setup 2x6 2x6
      preds "???"
         if outroller_is_cw_2x6 [   0 CR2S CR3S CR4S CR5S AL0S AL7S AL8S AL9S AL10S AL11S     0]
         if always              [CR5S AL0S AL1S AL2S AL3S    0    0 CR6S CR7S  CR8S  CR9S CR10S]
            alternate_definition [16matrix] c3
   setup 2x8 2x8
      preds "???"
         if outroller_is_cw_2x8 [   0 CR2S CR3S CR4S CR5S CR6S CR7S AL0S AL9S AL10S AL11S AL12S AL13S AL14S AL15S     0]
         if always              [CR7S AL0S AL1S AL2S AL3S AL4S AL5S    0    0 CR8S  CR9S  CR10S CR11S CR12S CR13S CR14S]
            alternate_definition [magic] c3
   setup 2x4 2x4
      preds "???"
         if magic_outroller_is_cw [   0 AL7S AL1S AL0S AL2S CR3S CR5S    0]
         if always                [CR3S CR2S CR4S    0    0 AL6S AL0S CR1S]
   setup 2x3 2x3
      preds "???"
         if magic_outroller_is_cw_2x3 [   0 AL5S AL0S AL1S CR2S    0]
         if always                    [CR2S CR3S    0    0 AL0S CR1S]

call "zoom roll@O circulate@P" c4
            base_circ_call
   setup 2x4 2x4
      preds "???"
         if outroller_is_cw [   0 CR2S CR3S CR4N AL5S AL6S AL7S    0]
         if always          [AL7N AL0S AL1S    0    0 CR4S CR5S CR6S]
   setup 2x3 2x3
      preds "???"
         if outroller_is_cw_2x3 [   0 CR2S CR3N AL4S AL5S    0]
         if always              [AL5N AL0S    0    0 CR3S CR4S]
            alternate_definition [12matrix] c3
   setup 2x6 2x6
      preds "???"
         if outroller_is_cw_2x6 [    0 CR2S CR3S CR4S CR5S CR6N AL7S AL8S AL9S AL10S AL11S     0]
         if always              [AL11N AL0S AL1S AL2S AL3S    0    0 CR6S CR7S  CR8S  CR9S CR10S]
            alternate_definition [16matrix] c3
   setup 2x8 2x8
      preds "???"
         if outroller_is_cw_2x8 [    0 CR2S CR3S CR4S CR5S CR6S CR7S CR8N AL9S AL10S AL11S AL12S AL13S AL14S AL15S     0]
         if always              [AL15N AL0S AL1S AL2S AL3S AL4S AL5S    0    0 CR8S  CR9S  CR10S CR11S CR12S CR13S CR14S]
            alternate_definition [magic] c4
   setup 2x4 2x4
      preds "???"
         if magic_outroller_is_cw [   0 AL7S AL1S CR4N AL2S CR3S CR5S    0]
         if always                [AL7N CR2S CR4S    0    0 AL6S AL0S CR1S]
   setup 2x3 2x3
      preds "???"
         if magic_outroller_is_cw_2x3 [   0 AL5S CR3N AL1S CR2S    0]
         if always                    [AL5N CR3S    0    0 AL0S CR1S]

call "bias@O circulate@P" c3a
            base_circ_call
   setup 2x4 2x4 restriction wave_only
      array [3S 2S 1S 0S 1N 0N 3N 2N]

call "bias trade@O circulate@P" c4
            base_circ_call
   setup 2x4 2x4 restriction wave_only
      array [2S 3S 0S 1S 0N 1N 2N 3N]

call "orbit@O circulate@P" c3x
            base_circ_call left_means_mirror
   setup 2x4 2x4 restriction wave_only
      array [CR2S CR3S CR4N CR5N ZM2N ZM3N ZM0N ZM1N]

call "twin orbit@O circulate@P" c3x
            base_circ_call
   setup 2x4 2x4 restriction wave_only
      array [AL6N AL7N CR4N CR5N ZM2N ZM3N ZM0N ZM1N]

call "rotary@O circulate@P" c3
            base_circ_call
   setup 2x4 2x4 restriction wave_only
   array [5N 4N 7N 6N 1N 0N 3N 2N]

call "scatter@O circulate@P" c3a
            base_circ_call
   simple_funny
   setup 2x4 2x4 restriction 2fl_only
      array [R1S R3S L0S L2S M3N M1N M2N M0N]
   setup 4x2 2x4
      array [M1N M5N 0 0 0 0 M2N M6N]

call "split trade@O circulate@P" c2
            base_circ_call
   simple_funny
   setup 2x2 2x2 restriction magic_only
      array [CR1S AL0S ZM0N ZM1N]

call "counter@O rotate@P" c1 tag ctr_rot
            base_circ_call
            parallel_conc_end       /* This makes it win if we tell the ends only to do it */
   simple_funny
   setup 2x4 2x4 rotate
      array [CR0N CR1N AL6S AL7S AL0S AL1S CR6N CR7N]
   setup 4x2 2x4 rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]
   setup 2x3 2x3 rotate
      array [CR0N 0 AL5S AL0S 0 CR5N]
   setup 3x2 2x3 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
   setup 2x2 2x2
      array [CR1E AL0W AL1W CR0E]
   setup 2x6 2x6 rotate
      array [CR0N CR1N CR2N AL9S AL10S AL11S AL0S AL1S AL2S CR9N CR10N CR11N]
   setup 6x2 2x6 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N AL0S AL1S AL2S AL3S AL4S AL5S]
   setup 2x8 2x8 rotate
      array [CR0N CR1N CR2N CR3N AL12S AL13S AL14S AL15S AL0S AL1S AL2S AL3S CR12N CR13N CR14N CR15N]
   setup 8x2 2x8 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N CR6N CR7N AL0S AL1S AL2S AL3S AL4S AL5S AL6S AL7S]
   setup 3x4 3x4 rotate
      array [CR0N CR1N AL8S AL9S AL10S AL11S AL0S AL1S CR8N CR9N CR10N CR11N]
   setup 4x3 3x4 rotate
      array [CR0N CR1N CR2N CR3N 0 0 AL0S AL1S AL2S AL3S 0 0]
   setup 4x4 4x4
      array [AL12W AL13W AL14W AL15W AL0W AL1W CR10E AL3W CR12E CR13E CR14E CR15E CR0E CR1E AL10W CR3E]
   setup c1phan c1phan
      array [CR4E CR5E CR6E CR7E AL0W AL1W AL2W AL3W AL4W AL5W AL6W AL7W CR0E CR1E CR2E CR3E]
   setup thar thar
      array [CR2E CR3E 0 0 AL2W AL3W 0 0]
   setup short6 short6 rotate
      array [CR0N 0 AL5S AL0S 0 CR5N]
   setup pshort6 short6 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
   setup bone6 bone6 rotate
      array [CR0N AL4S AL5S AL0S CR4N CR5N]
   setup pbone6 bone6 rotate
      array [CR0N CR1N    0 AL0S AL1S    0]
   setup bone bone rotate
      array [CR0N AL5S AL6S AL7S AL0S CR5N CR6N CR7N]
   setup pbone bone rotate
      array [CR0N CR1N    0    0 AL0S AL1S    0    0]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1N 0 AL1S]
   setup star star
      array [CR1E 0 AL1W 0]
   setup galaxy galaxy
      array [CR2E CR3E 0 AL1W AL2W AL3W 0 CR1E]
   setup hrglass hrglass rotate
      array [CR0N AL5S AL6S 0 AL0S CR5N CR6N 0]
   setup phrglass hrglass rotate
      array [CR0N CR1N 0 CR3N AL0S AL1S 0 AL3S]
   setup dhrglass dhrglass rotate
      array [CR0N AL5S AL6S 0 AL0S CR5N CR6N 0]
   setup pdhrglass dhrglass rotate
      array [CR0N CR1N 0 CR3N AL0S AL1S 0 AL3S]
   setup qtag qtag rotate
      array [CR0N AL5S AL6S AL7S AL0S CR5N CR6N CR7N]
   setup pqtag qtag rotate
      array [CR0N CR1N 0 0 AL0S AL1S 0 0]
   setup rigger rigger rotate
      array [CR0N AL5S AL6S AL7S AL0S CR5N CR6N CR7N]
   setup prigger rigger rotate
      array [CR0N CR1N    0    0 AL0S AL1S    0    0]
   setup 3x1dmd 3x1dmd rotate
      array [CR0N CR1N CR2N    0 AL0S AL1S AL2S    0]
   setup p3x1dmd 3x1dmd rotate
      array [   0    0    0 CR3N    0    0    0 AL3S]
   setup 1x3dmd 1x3dmd rotate
      array [CR0N CR1N CR2N    0 AL0S AL1S AL2S    0]
   setup p1x3dmd 1x3dmd rotate
      array [   0    0    0 CR3N    0    0    0 AL3S]
   setup 2x1dmd 2x1dmd rotate
      array [CR0N CR1N    0 AL0S AL1S    0]
   setup p2x1dmd 2x1dmd rotate
      array [   0    0 CR2N    0    0 AL2S]
   setup 1x2dmd 1x2dmd rotate
      array [CR0N CR1N    0 AL0S AL1S    0]
   setup p1x2dmd 1x2dmd rotate
      array [   0    0 CR2N    0    0 AL2S]
   setup spindle spindle rotate
      array [CR0N    0 AL6S AL7S AL0S    0 CR6N CR7N]
   setup pspindle spindle rotate
      array [CR0N CR1N CR2N    0 AL0S AL1S AL2S    0]
   setup crosswave crosswave rotate
      array [CR0N CR1N    0    0 AL0S AL1S    0    0]
   setup pcrosswave crosswave rotate
      array [   0    0 CR2N CR3N    0    0 AL2S AL3S]
   setup bigdmd bigdmd rotate
      array [CR0N CR1N 0 0 AL10S AL11S AL0S AL1S 0 0 CR10N CR11N]
   setup pbigdmd bigdmd rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N AL0S AL1S AL2S AL3S AL4S AL5S]
   setup 1x2 1x2 rotate
      array [CR0N AL0S]
   setup 1x4 1x4 rotate
      array [CR0N CR1N AL0S AL1S]
   setup 1x6 1x6 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
   setup 1x8 1x8 rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]
   setup 1x10 1x10 rotate
      array [CR0N CR1N CR2N CR3N CR4N AL0S AL1S AL2S AL3S AL4S]
   setup 1x12 1x12 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N AL0S AL1S AL2S AL3S AL4S AL5S]
   setup 1x14 1x14 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N CR6N AL0S AL1S AL2S AL3S AL4S AL5S AL6S]
   setup 1x16 1x16 rotate
      array [CR0N CR1N CR2N CR3N CR4N CR5N CR6N CR7N AL0S AL1S AL2S AL3S AL4S AL5S AL6S AL7S]
   setup ptpd ptpd rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]
   setup pptpd ptpd rotate
      array [0 CR1N 0 AL7S 0 AL1S 0 CR7N]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]

call "split counter@O rotate@P" a2 tag splitctrrot
            base_circ_call funny_is_inherited 3x3_is_inherited 4x4_is_inherited
   /* This does the trick, and does it the RIGHT WAY!  The old way, if we had
      a 2x6, if we did "triple boxes working together split counter rotate",
      the warning about setups not interacting with each other won't be raised,
      because it was an 8 person call. */
   splitseq ctr_rot [inherit_funny inherit_3x3 inherit_4x4]

/* **************************** END OF CIRC CALLS **************************** */

call "_1/2 flip" dontshow tag half_flip
   setup 1x4 2x2 restriction forbidden wave_only
      array [C1E A3E A0W C2W]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [C1E C2W A0W A3E]

call "slip the clutch" mainstream tag slipclutch
            imprecise_rotation
   setup thar thar restriction forbidden wave_only
      array [0N 3E 0 0 4N 3W 0 0]
   setup crosswave thar restriction forbidden wave_only
      array [0N 3E 0 0 4N 3W 0 0]
   setup pcrosswave thar restriction forbidden wave_only
      array [0 0 2N 5E 0 0 6N 5W]
   /* We wish this were legal from waves, so that we could print
      "slip the clutch, left allemande" as a resolve, instead of
      "extend".  Alas, it is not legal.  It seems that its use
      prior to a left allemande is a common figure of speech, but
      not a real call.  If it were a real call, this is what
      it would be:
   setup 2x4 thar restriction forbidden wave_only
      array [CR2E CR3E AL3W AL2W ZM4N ZM5N ZM1N ZM0N] */

call "cross by" c1
            imprecise_rotation
   setup thar thar restriction forbidden wave_only
      array [1N 2E 0 0 5N 2W 0 0]
   setup crosswave thar restriction forbidden wave_only
      array [1N 2E 0 0 5N 2W 0 0]
   setup pcrosswave thar restriction forbidden wave_only
      array [0 0 3N 4E 0 0 7N 4W]
   setup 2x4 thar restriction forbidden wave_only   /* This one *is* legal. */
      array [CR3E CR2E AL2W AL3W ZM5N ZM4N ZM0N ZM1N]

call "remake the thar" plus
   setup thar thar restriction forbidden wave_only
      array [3W 2W 0 0 3E 2E 0 0]
   setup crosswave thar restriction forbidden wave_only
      array [3W 2W 0 0 3E 2E 0 0]
   setup pcrosswave thar restriction forbidden wave_only
      array [0 0 5W 4W 0 0 5E 4E]

call "all 8 spin the top" plus
   setup thar thar restriction forbidden wave_only
      array [L3W L6E 0 0 R3E R6W 0 0]
   setup crosswave thar restriction forbidden wave_only
      array [L3W L6E 0 0 R3E R6W 0 0]
   setup pcrosswave thar restriction forbidden wave_only
      array [0 0 L5W L0E 0 0 R5E R0W]

call "@b top" a1
            neednumber imprecise_rotation
   seq trade []
   seq slipclutch [repeat_n]

call "_centers back away" dontshow tag cba
   setup 2x4 2x4 rotate
      array [0    0    0    0    0    ZM3W ZM4W 0]
   setup 4x2 2x4 rotate
      array [ZM6W 0    0    0    0    0    0    ZM5W]

call "_centers promanade 1/2" dontshow tag ctrsprom
   setup 2x4 2x4
      array [0    0    0    0    0    A1S A2S 0]
   setup 4x2 2x4
      array [ZM0N 0    0    0    0    0   0   ZM7N]

call "centers back away, others come in and @0" mainstream
   seq cba []
   seq centers_mandatory_call []

call "promenade halfway, come in to the middle and @0" mainstream
            sequence_starter
   seq ctrsprom []
   seq centers_mandatory_call []

call "promenade halfway, while the others @0" mainstream
            sequence_starter
   seq ctrsprom []
   seq cba []
   seq centers_mandatory_call []

call "like a rigger" c4
   setup 2x6 rigger
      array [ZM6N ZM7N ZM0N ZM1N ZM3N ZM2N ZM2N ZM3N ZM4N ZM5N ZM7N ZM6N]
   setup 6x2 rigger
      array [ZM6N ZM7N ZM0N ZM1N ZM3N ZM2N ZM2N ZM3N ZM4N ZM5N ZM7N ZM6N]
   setup 3x4 qtag
      array [ZM0N ZM1N ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM4N ZM5N ZM6N ZM7N]
   setup 4x3 qtag
      array [ZM0N ZM1N ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM4N ZM5N ZM6N ZM7N]

call "flip your lid" c3
   setup qtag qtag qualifier right_wave
      array [0 0   0 C4N C5N C2S C7S   0]
   setup qtag qtag qualifier left_wave
      array [0 0 A3S   0 A6S A4N   0 A5N]

call "ping-pong circulate" plus
   setup qtag qtag qualifier right_wave
      array [0 0 AL0S AL0S ZM3N ZM6N CR1S CR1S]
   setup qtag qtag qualifier left_wave
      array [0 0 AL0S AL0S ZM2N ZM7N CR1S CR1S]
   setup bone bone rotate
      array [0 0 0 AL5E 0 0 CR0E 0]   /* We only allow right hands here .... */
   setup pbone bone rotate
      array [ZM6W 0 0 0 0 ZM3W 0 0]   /* or else we would be hypocritical here. */
         /* Unless, of course, you think the outsides should look at the handedness
            of a wave that is T-boned to them???? */

call "fall into a column" c4a
            fudge_to_q_tag
   setup qtag 2x4 rotate
      preds "Must be in quarter tag setup."
         if q_tag_front [0 0 0W 2E 4W 3W 7W 5E]
         if q_tag_back [0 0 0W 2E 2W 5W 7W 5E]

call "_ctrs stampede" dontshow tag ctrsstampede
            visible_fractions
   seq tradethewave []
   seq hinge []
   seq and_cross []

call "_ends stampede" dontshow tag endsstampede
            parallel_conc_end
   setup 2x2 2x2
      array [CR2W AL3E 0 0]

call "stampede" c3a tag stampede
            fudge_to_q_tag
   conc ctrsstampede [] endsstampede [conc_demand_columns conc_force_columns endscando]

call "@2scoot @3and stampede" c3a
            yoyo_is_inherited
   seq qtagscootback [or_anycall inherit_yoyo]
   seq stampede []

call "stroll part 1" dontshow tag stroll1
            fudge_to_q_tag
   setup qtag 3x4 restriction unusual 2fl_only
      preds "???"
         if q_line_front [ZM1N ZM2N ZM3N AL11S ZM7N  ZM8N ZM0N CR5S]
         if q_line_back  [   0    0 ZM3N AL11S ZM4N ZM10N ZM0N CR5S]
         if always       [   0    0 ZM3N AL11S    0     0 ZM0N CR5S]

call "stroll part 2" dontshow tag stroll2
   in_out_triple_squash waverecycle [or_anycall] nullcall []

call "stroll part 3" dontshow tag stroll3
   setup qtag 2x4
      preds "???"
         if q_line_front [ZM2N ZM1N ZM3N ZM2N ZM6N ZM5N ZM0N ZM1N]
         if q_line_back  [ZM0N ZM3N ZM3N ZM2N ZM4N ZM7N ZM0N ZM1N]
         if always       [   0    0 ZM3N ZM2N    0    0 ZM0N ZM1N]
   setup pqtag 2x4
      preds "???"
         if q_line_front [ZM2N ZM1N 0 0 ZM6N ZM5N 0 0]
         if q_line_back  [ZM0N ZM3N 0 0 ZM4N ZM7N 0 0]

call "stroll @2and cycle@3" c4a
   seq stroll1 []
   seq stroll2 []
   seq stroll3 []

call "_centers maybe slip" dontshow tag ctrmaybeslip
            left_means_mirror
   conc slip [inherit_left or_anycall] nullcall []

call "_single bring us together" dontshow tag sgl_bring_together
            reverse_means_mirror
   setup dmd 2x2
      array [0 0 0 CM1S]
   setup pmd 2x2
      array [AL2W 0 AL0E 0]

call "_1/4 circle single bring us together" dontshow tag 1_4_sgl_bring_together
            reverse_means_mirror
   setup 4x1 2x2
      array [AL2W CM1E AL0E 0]

call "_3/4 circle single bring us together" dontshow tag 3_4_sgl_bring_together
            reverse_means_mirror
   setup 4x1 2x2
      array [AL2W CM3W AL0E 0]

call "bring us together" c4a
            sequence_starter single_is_inherited left_means_mirror reverse_means_mirror
   seq sgl_bring_together [cpls_unless_single inherit_reverse]

call "1/4 circle bring us together" c4a
            single_is_inherited left_means_mirror reverse_means_mirror
   seq 1_4_sgl_bring_together [cpls_unless_single inherit_reverse]

call "3/4 circle bring us together" c4a
            single_is_inherited left_means_mirror reverse_means_mirror
   seq 3_4_sgl_bring_together [cpls_unless_single inherit_reverse]

call "exchange the boxes @a" c3a
/*  We can't do "take_right_hands" yet. */
            neednumber
   setup 2x4 2x4 nqualifier 1 none
      array [R1S L0S R3S L2S M3N M1N M2N M0N]
   setup 4x2 2x4 nqualifier 1 none
      array [M1N M5N M3N R4S L3S M4N M2N M6N]
   setup 2x4 2x4 nqualifier 2 none
      array [M5S M7S M4S M6S L2S L0S R3S R1S]
   setup 4x2 2x4 nqualifier 2 none
      array [M5N M4N R4S M5S M2S L3S M3N M2N]
   setup 2x4 2x4 nqualifier 3 none
      array [L4N L6N R5N R7N M6S M7S M4S M5S]
   setup 4x2 2x4 nqualifier 3 none
      array [M4N L3S M5S M1S M6S M2S R4S M3N]
   setup 2x4 2x4 nqualifier 4 none
      array [M3N M2N M1N M0N R7N L6N R5N L4N]
   setup 4x2 2x4 nqualifier 4 none
      array [L3S M2S M1S M0S M7S M6S M5S R4S]

call "exchange the boxes" c3a
/*  We can't do "take_right_hands" yet. */
   setup 2x4 2x4
      array [M3N M2N M1N M0N R7N L6N R5N L4N]
   setup 4x2 2x4
      array [L3S M2S M1S M0S M7S M6S M5S R4S]

call "exchange the diamonds @a" c2
            fudge_to_q_tag take_right_hands neednumber
   setup qtag bigdmd rotate nqualifier 1 none restriction forbidden diamond_like
      array [0 0 AL1S AL11S 0 0 CR10N CR0N]
   setup pqtag bigdmd rotate nqualifier 1 none restriction forbidden diamond_like
      array [CR9N CR2N 0 0 AL2S AL9S 0 0]
   setup qtag bigdmd rotate nqualifier 2 none restriction forbidden diamond_like
      array [0 0 AL3E AL8E 0 0 CR9E CR2E]
   setup pqtag bigdmd rotate nqualifier 2 none restriction forbidden diamond_like
      array [CAL5W CR4E 0 0 AL1E ACR0W 0 0]
   setup qtag bigdmd rotate nqualifier 3 none restriction forbidden diamond_like
      array [0 0 AACR6S AL6N 0 0 CCAL5N CR5S]
   setup pqtag bigdmd rotate nqualifier 3 none restriction forbidden diamond_like
      array [CAL2S CR3S 0 0 AL3N ACR2N 0 0]
   setup qtag qtag nqualifier 4 none restriction forbidden diamond_like
      array [0 0 6N 7N 0 0 2N 3N]
   setup pqtag qtag nqualifier 4 none restriction forbidden diamond_like
      array [1S 0S 0 0 5S 4S 0 0]

call "exchange the diamonds" c2
            fudge_to_q_tag take_right_hands
   setup qtag qtag restriction forbidden diamond_like
      array [0 0 6N 7N 0 0 2N 3N]
   setup pqtag qtag restriction forbidden diamond_like
      array [1S 0S 0 0 5S 4S 0 0]
   setup ptpd ptpd restriction forbidden diamond_like
      array [4N 0 6N 0 0N 0 2N 0]
   setup pptpd ptpd restriction forbidden diamond_like
      array [0 7S 0 5S 0 3S 0 1S]

call "exchange the triangles" c3a
   setup bone6 bone6
      array [M1N M0N L5N R4N L3N R2N]
   setup pbone6 bone6
      array [L1S L0S 0 R4S R3S 0]
   setup short6 short6
      array [5S 0 3S R2S 0 L0S]
   setup pshort6 short6
      array [R5N L4N 3N 2N R1N L0N]

call "convert the triangle" c4a
   setup trngl trngl qualifier miniwaves
      preds "???"
         if trngl_pt_rh [0 R3E L3W 0 R1E R1E]
         if always      [0 R3E L3W 0 L2W L2W]
   setup ptrngl trngl qualifier miniwaves
      array [M4N 0 0 M2N 0 0]

call "unwrap the@M@I diamonds" c2
            fudge_to_q_tag take_right_hands
   setup qtag 2x4
      array [0 0 AM1W CR4W 0 0 CM2E AL7E]
   setup pqtag 2x4
      array [ZM3N CM5S 0 0 AM2S ZM4N 0 0]
            alternate_definition [interlocked] c2
   setup qtag 2x4
      array [0 0 AM1W AL7E 0 0 CM2E CR4W]
   setup pqtag 2x4
      array [ZM3N CM5S 0 0 AM2S ZM4N 0 0]
            alternate_definition [magic] c3
   setup qtag 2x4
      array [0 0 AL7E CM2E 0 0 CR4W AM1W]
   setup pqtag 2x4
      array [ZM3N CM5S 0 0 AM2S ZM4N 0 0]

call "wrap to a@I diamond" c3a
   setup 4x2 qtag
      array [ZM1N CR2E CR4S CR3W AL3E AL1S AL2W ZM4N]
            alternate_definition [interlocked] c3a
   setup 4x2 qtag
      array [ZM1N CR2E CR4S CR7W AL7E AL1S AL2W ZM4N]

call "unwrap the hourglass" c2
            take_right_hands
   setup hrglass 2x4
      array [0 0 AM1W 0 0 0 CM2E 0]
   setup phrglass 2x4
      array [ZM3N CM5S 0 CR4S AM2S ZM4N 0 AL3S]

call "wrap to an hourglass" c3a
   setup 4x2 hrglass
      array [ZM1N CR2E CR4S CM7S AM3S AL1S AL2W ZM4N]

call "unwrap the galaxy" c2
            take_right_hands
   setup galaxy 4x4
      preds "???"
         if next_galaxyspot_is_tboned [ZM3E  ZM3S 0 ZM15S ZM15W ZM14N 0 ZM13N]
         if always                    [CR14S ZM3S 0 ZM15S AL13S ZM14N 0 ZM13N]

call "wrap to a galaxy" c3a
   setup 4x2 galaxy
      array [ZM3N CR4E CR5S CM6S AM2S AL3S AL4W ZM5N]

call "snap the diamond" c4
            fudge_to_q_tag
   setup qtag 2x4 rotate
      array [0 0 1N 2S 0 0 5S 6N]
   setup pqtag 2x4 rotate
      array [3W 4E 0 0 7E 0W 0 0]

call "dodge @2circulate@3" c2
   conc walkndodge [] circulate [or_anycall]

call "change lanes" c3x
   crossconc dblcirc [conc_demand_lines] remake [conc_force_lines]

call "retain your lane" c3x
   conc remake [] dblcirc [conc_demand_lines conc_force_lines]

call "collapse the setup" c4a
            fudge_to_q_tag cross_is_inherited
   conc stepnfold [inherit_cross] endsdetour [conc_demand_lines conc_force_columns endscando]

/* Another name.  That's right, we don't check that they are actual diamonds.
  Callers frequently abuse the terminology in this way (as in "dixie style to a wave"
   that doesn't go to a wave), so we will let them abuse this terminology too. */
call "collapse the diamonds" c4a
            fudge_to_q_tag cross_is_inherited
   conc stepnfold [inherit_cross] endsdetour [conc_demand_lines conc_force_columns endscando]

call "strike out" c4a
            fudge_to_q_tag
   conc crossnwheel [force_single] endsdetour [conc_demand_lines conc_force_columns endscando]

call "_ends strip" dontshow tag endsstrip
   setup 2x2 1x4 restriction forbidden peelable_box
      array [AL1N CR3N CR2S AL0S]

call "strip the setup" c3a
   reverse_checkpoint fanthetop [] endsstrip [conc_demand_lines endscando]

call "strip the diamonds" c3a
   reverse_checkpoint linefanthetop [] endsstrip [conc_demand_lines endscando]

call "in style" c3
            step_to_wave
   setup qtag 2x4
      array [Z2N Z3N 0 C5S Z6N Z7N Z0N 0]

call "and circle 1/4" c2 tag andcircle
            fudge_to_q_tag
   setup qtag qtag qualifier ctr_pts_rh
      array [0 0 0    ZM3N ZM5N ZM6N CR0S ZM7N]
   setup qtag qtag qualifier ctr_pts_lh
      array [0 0 AL1S ZM3N ZM2N ZM4N 0    ZM7N]
   setup 2x1dmd 2x1dmd qualifier ctr_pts_rh
      array [CR2S ZM1N 0 0    ZM4N ZM0N]
   setup 2x1dmd 2x1dmd qualifier ctr_pts_lh
      array [0    ZM1N 0 AL2S ZM4N ZM3N]
   setup hrglass hrglass qualifier ctr_pts_rh
      array [0 0 0    ZM3N ZM5N ZM6N CR0S ZM7N]
   setup hrglass hrglass qualifier ctr_pts_lh
      array [0 0 AL1S ZM3N ZM2N ZM4N 0    ZM7N]
   setup phrglass hrglass
      array [0 0 0 ZM3N 0 0 0 ZM7N]

call "centers swing/slip" dontshow tag ctrsswingslip
            yoyo_is_inherited
   maybeconc4_2 waveswingslip [or_anycall inherit_yoyo] nullcall []

call "_something and circle 1/4" dontshow tag something_and_circle
            fudge_to_q_tag step_to_wave left_means_touch_or_check yoyo_is_inherited
   seq ctrsswingslip [inherit_yoyo]
   seq andcircle []

call "_@0 and circle 1/4" dontshow tag anything_and_circle
            fudge_to_q_tag step_to_wave left_means_touch_or_check
   seq nullcall [mandatory_anycall]
   seq andcircle []

call "@2swing @3and circle @a" c1    /* If modified, center 4 do the modification. */
            step_to_wave left_means_touch_or_check neednumber yoyo_is_inherited
   seq something_and_circle [repeat_n inherit_yoyo]

call "@0 and circle @a" c2          /* Everyone does the "anything" call. */
            step_to_wave left_means_touch_or_check neednumber
   seq anything_and_circle [repeat_n]

call "gravitate" c4
            fudge_to_q_tag reverse_means_mirror take_right_hands
   setup qtag 2x4
      array [C4W C5W A0W C6W A0E A1E C3E A5E]

call "@B the alter" c4
            step_to_wave left_means_touch_or_check neednumber visible_fractions
   seq armturn_n4 [allow_forced_mod]
   seq ctrarmturn_n4_utb [allow_forced_mod]
   /* This next part will demand diamonds, which the previous part will create only if the fraction is odd. */
   seq ctrrotstar [allow_forced_mod repeat_n]
   seq flipdiamond [allow_forced_mod]

call "@9-@9-@9 quarter the alter" c4
            step_to_wave left_means_touch_or_check need_three_numbers visible_fractions
   seq armturn_n4 [allow_forced_mod]
   seq ctrarmturn_n4_utb [allow_forced_mod shift_one_number]
   /* This next part will demand diamonds, which the previous part will create only if the fraction is odd. */
   seq ctrrotstar [allow_forced_mod repeat_n shift_two_numbers]
   seq flipdiamond [allow_forced_mod]

call "@B the alter and circulate" c4
            step_to_wave left_means_touch_or_check neednumber visible_fractions
   seq armturn_n4 [allow_forced_mod]
   seq ctrarmturn_n4_utb [allow_forced_mod]
   seq ctrsslipendscirc []
   /* This next part will demand diamonds, which the previous part will create only if the fraction is odd. */
   seq ctrrotstar [allow_forced_mod repeat_n]
   seq flipdiamond [allow_forced_mod]

call "@9-@9-@9 quarter the alter and circulate" c4
            step_to_wave left_means_touch_or_check need_three_numbers visible_fractions
   seq armturn_n4 [allow_forced_mod]
   seq ctrarmturn_n4_utb [allow_forced_mod shift_one_number]
   seq ctrsslipendscirc []
   /* This next part will demand diamonds, which the previous part will create only if the fraction is odd. */
   seq ctrrotstar [allow_forced_mod repeat_n shift_two_numbers]
   seq flipdiamond [allow_forced_mod]

call "_ends begin peel chain thru" dontshow tag epeelchainthru
            cross_is_inherited left_means_mirror yoyo_is_inherited
   seq real_leads_div_move_along [inherit_cross]
   seq touch [inherit_left]
   seq trade [inherit_yoyo]

call "_peel chain thru part 1" dontshow tag peelchain1
            fudge_to_q_tag left_means_mirror yoyo_is_inherited
   conc waveswingslip [inherit_left inherit_yoyo] epeelchainthru [inherit_left inherit_yoyo conc_demand_columns]

call "_trail chain thru part 1" dontshow tag trailchain1
            fudge_to_q_tag left_means_mirror yoyo_is_inherited
   conc waveswingslip [inherit_left inherit_yoyo] epeelchainthru [inherit_left inherit_yoyo force_cross conc_demand_columns]

call "peel chain thru" c3a
            left_means_mirror yoyo_is_inherited
   seq peelchain1 [inherit_left inherit_yoyo]
   seq linefanthetop [allow_forced_mod]

call "trail chain thru" c3a
            left_means_mirror yoyo_is_inherited
   seq trailchain1 [inherit_left inherit_yoyo]
   seq linefanthetop [allow_forced_mod]

call "create a diamond" c4a
            left_means_mirror
   setup 2x4 qtag
      array [0E 1E 0 0 0 0 3N 6N]

call "triple trade" a1 tag tripletrade
   setup 1x8 1x8
      array [ZM0N CR3S CR6S AL1S ZM4N AL7S AL2S CR5S]
   setup ptpd ptpd
      array [ZM0N 0 CR6S 0 ZM4N 0 AL2S 0]
   setup pptpd ptpd
      array [ZM0N CR3S 0 AL1S ZM4N AL7S 0 CR5S]
   setup spindle spindle
      array [0 0 0 ZM3N 0 0 0 ZM7N]
   setup pspindle spindle
      array [CR6S CR5S CR4S 0 AL2S AL1S AL0S 0]
   setup 1x3dmd 1x3dmd
      array [ZM0N CR2S AL1S 0 ZM4N AL6S CR5S 0]
   setup p1x3dmd 1x3dmd
      array [ZM0N 0 0 CR7S ZM4N 0 0 AL3S]

call "turn four" c4a
   setup 1x8 1x8 rotate restriction 2fl_only
      array [R0N R1N R2N R3N L0S L1S L2S L3S]

call "diamond circulate" plus tag diamondcirc
            take_right_hands fudge_to_q_tag
   simple_funny
   setup dmd dmd restriction forbidden diamond_like
      array [CR1E 0 AL1W 0]
   setup pmd dmd restriction forbidden diamond_like
      array [0 CR2E 0 AL2W]

call "diamond single rotate 1/4" c4
            fudge_to_q_tag reverse_means_mirror
   setup dmd dmd
      array [0 AL0S 0 CL2N]
   setup pmd dmd
      array [CL3N 0 AL1S 0]

call "triangle circulate" c1 tag trngle_circ
   simple_funny
   setup trngl trngl
      array [0 CR2S AL1S 0 AL3W CR3E]
   setup ptrngl trngl
      preds "???"
         if nexttrnglspot_is_tboned [AL2W ZM2N CR0S CR4E AL3S ZM4N]
         if always                  [AL2S ZM2N CR0S CR4S AL3S ZM4N]
            alternate_definition [interlocked] c2
   setup short6 short6
      array [CR2S 0 AL0S AL1W 0 CR1E]
   setup pshort6 short6
      preds "???"
         if nextinttrnglspot_is_tboned [ZM2N CR3E CR4S AL1S AL2W ZM3N]
         if always                     [ZM2N CR3S CR4S AL1S AL2S ZM3N]
   setup bone6 bone6
      preds "???"
         if nextinttrnglspot_is_tboned [CR2S AL5S AL0W ZM1N ZM0N CR1E]
         if always                     [CR2S AL5S AL0S ZM1N ZM0N CR1S]
   setup pbone6 bone6
      array [CR2E CR3S 0 AL1S AL2W 0]
            alternate_definition [3x1] c2
   setup 3x4 3x4          /* ***** for now, only allow outer columns filled, gotta fix this */
      array [CR11S 0 0 AL5S ZM3N CR3S ZM4N 0 0 ZM10N ZM0N AL0S]

call "reshape the triangle" c2
   simple_funny
   setup trngl trngl
      array [0 R2E L1W 0 L3W R3E]
   setup ptrngl trngl
      preds "???"
         if nexttrnglspot_is_tboned [L2S M2E R0S R4S L3S M4W]
         if always                  [L2W M2E R0S R4E L3S M4W]

call "turn the star 1/4" dontshow tag turnstar1
            is_star_call
   setup star star
      array [CR1E 0 AL1W 0]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1N 0 AL1S]
   setup 2x2 2x2   /* We don't encode stability for this -- it's flaky. */
      array [R1S L0S M1N M0N]
   setup trngl trngl     /* Yes, three-person stars. */
      array [0 CR2S AL1S 0 AL3W CR3E]
   setup ptrngl trngl
      preds "???"
         if nexttrnglspot_is_tboned [AL2W ZM2N CR0S CR4E AL3S ZM4N]
         if always                  [AL2S ZM2N CR0S CR4S AL3S ZM4N]

call "turn the star 1/2" dontshow tag turnstar2
            is_star_call
   setup star star
      array [CR2S 0 AL0S 0]
   setup dmd dmd
      array [CR2S 0 AL0S 0]
   setup pmd dmd
      array [0 CR3S 0 AL1S]
   setup 2x2 2x2
      array [C2S A3S A0S C1S]

call "turn the star 3/4" dontshow tag turnstar3
            is_star_call
   setup star star
      array [CR3W 0 AL3E 0]
   setup dmd dmd
      array [CR3W 0 AL3E 0]
   setup pmd dmd
      array [0 CR0W 0 AL0E]

call "turn the star @b" a2 tag turnstarn
            dont_use_in_resolve is_star_call neednumber
   seq turnstar1 [repeat_n]

call "turn the star @9-1" dontshow tag turnstarnm1
            is_star_call neednumber
   /* This allows facing stars to be turned 2 spots.  Perhaps we should
      fix "turnstarn" to do a similar thing. */
   setup star star nqualifier 2 none
      array [CR1E 0 AL1W 0]
   setup dmd dmd rotate nqualifier 2 none
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate nqualifier 2 none
      array [0 CR1N 0 AL1S]
   setup 2x2 2x2 nqualifier 2 none
      array [R1S L0S M1N M0N]
   setup star star nqualifier 3 none
      array [CR2S 0 AL0S 0]
   setup dmd dmd nqualifier 3 none
      array [CR2S 0 AL0S 0]
   setup pmd dmd nqualifier 3 none
      array [0 CR3S 0 AL1S]
   setup 2x2 2x2 nqualifier 3 none
      array [C2S A3S A0S C1S]

call "turn the star @b, interrupt first with @0" c1
            dont_use_in_resolve is_star_call neednumber
   seq nullcall [mandatory_anycall]
   seq turnstar1 [repeat_n]

call "turn the star @b, interrupt after with @0" c1
            dont_use_in_resolve is_star_call neednumber
   seq turnstar1 [repeat_n]
   seq nullcall [mandatory_anycall]

call "turn the star @b, interrupt after 1/4 with @0" c1
            dont_use_in_resolve is_star_call neednumber
   seq turnstar1 []
   seq nullcall [mandatory_anycall]
   seq turnstarnm1 []

call "turn the star 3/4, interrupt after 1/2 with @0" c1
            dont_use_in_resolve is_star_call
   seq turnstar2 []
   seq nullcall [mandatory_anycall]
   seq turnstar1 []

call "turn the star 2, interrupt after first with @0 and after second with @m" c1
            dont_use_in_resolve is_star_call
   seq turnstar1 []
   seq nullcall [mandatory_anycall]
   seq turnstar1 []
   seq wheelanddeal [mandatory_secondary_call]  /* Well, it's got to be something other than nullcall. */

/* We use this in cases in which we know the "star" must not be a box of four, such as
   "alter the diamond".  If we allowed boxes to circulate, then someone could accidentally
   call "reverse order alter the diamond" from parallel waves. */
call "turn the diamond 1/2" dontshow tag turndmd2
            is_star_call
   setup star star
      array [CR2S 0 AL0S 0]
   setup dmd dmd
      array [CR2S 0 AL0S 0]
   setup pmd dmd
      array [0 CR3S 0 AL1S]

call "_turn the star 1/4 / ends trade" dontshow tag turnstar1_endstrade
            12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turnstar1 [allow_forced_mod] trade []

call "_turn the star @b / ends trade" dontshow tag turnstarn_endstrade
            neednumber 12_matrix_is_inherited
   maybematrix_conc_star turnstarn [allow_forced_mod] trade []

call "_turn the star 1/2 / ends trade" dontshow tag turnstar2_endstrade
            12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turndmd2 [allow_forced_mod] trade []

call "_turn the center star 1/4" dontshow tag turnstar1_endsnothing
            12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turnstar1 [allow_forced_mod] nullcall []

call "_turn the center star 1/2" dontshow tag turnstar2_endsnothing
            12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turnstar2 [allow_forced_mod] nullcall []

call "_turn the center star @b" dontshow tag turnstarn_endsnothing
            neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star turnstarn [allow_forced_mod] nullcall []

call "_diamond ends isolate" dontshow tag diamond_ends_isolate
   setup dmd 1x4 rotate
      array [R0N 0 L0S 0]
   setup pmd 1x4 rotate
      array [0 M1W 0 M3W]

call "_centers slip/ends circulate" dontshow tag ctrsslipendscirc
   conc slip [] circulate [conc_demand_lines conc_force_lines]

call "alter the diamond" c4
            visible_fractions
   seq turndmd2 [allow_forced_mod]
   seq flipdiamond [allow_forced_mod]
   seq fanback []

call "alter the wave" c1
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check visible_fractions
   seq swing [inherit_yoyo]
   seq fanback []
   seq turndmd2 [allow_forced_mod]
   seq flipdiamond [allow_forced_mod]

call "alter and circulate" c2
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check visible_fractions
   seq swing [inherit_yoyo]
   seq fanback []
   seq ctrsslipendscirc []
   seq turndmd2 [allow_forced_mod]
   seq flipdiamond [allow_forced_mod]

call "change the wave" c3
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check grand_is_inherited visible_fractions
   seq trade [inherit_yoyo]
   seq maybegrandslip [inherit_grand]
   seq ctrcrossrun [inherit_grand]
   seq trade []

call "change the centers" c3
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check grand_is_inherited visible_fractions
   seq trade [inherit_yoyo]
   seq maybegrandslip [inherit_grand]
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand]

call "_and cross" dontshow tag and_cross
   simple_funny
   setup 2x2 2x2 restriction unusual wave_only
      array [0N 1N 0N 1N]
            alternate_definition [grand] c3a
   setup 4x2 2x4 restriction quarterbox_or_col
      preds "Can't figure out whether to cross."
         if columns_magic_tandem     [0N 5N 2N 3N 4N 5N 2N 7N]
         if columns_magic_antitandem [6N 5N 4N 3N 4N 3N 2N 1N]

call "@0 and cross" a1
            grand_is_inherited dont_use_in_resolve
   seq nullcall [mandatory_anycall]
   seq and_cross [inherit_grand]

call "nicely" c4 tag nicely
            grand_is_inherited visible_fractions
   seq hinge []
   seq and_cross [inherit_grand]

call "connect the diamond" c4a
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_rh
      array [CR1S 0 AL1S 0]
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_lh
      array [CR0S 0 AL0S 0]
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_1f
      array [CR1S 0 AL1S 0]
   setup dmd 2x2 restriction unusual diamond_like  /* If no centers, assume diamond is "normal". */
      array [CR1S 0 AL0S 0]
   setup pmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_rh
      array [0 CM2E 0 0]
   setup pmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_lh
      array [0 0 0 AM1W]
   setup pmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_1f
      array [0 CM2E 0 AM0W]

call "flip the diamond" plus tag flipdiamond
            fudge_to_q_tag take_right_hands
   setup dmd 1x4 restriction forbidden diamond_like
      array [CR1S 0 AL3S 0]
   setup pmd 1x4 restriction forbidden diamond_like
      array [0 CR2E 0 AL2W]
            alternate_definition [reverse] c3a
   setup dmd 1x4 rotate restriction forbidden diamond_like
      array [CR1N 0 AL1S 0]
   setup pmd 1x4 rotate restriction forbidden diamond_like
      array [0 AL0E 0 CR2E]
            alternate_definition [interlocked] c1
   setup qtag 2x4 rotate restriction forbidden diamond_like
      array [0 0 AL0S AL7S 0 0 CR7N CR0N]
   setup pqtag 2x4 rotate restriction forbidden diamond_like
      array [CR6E CR1E 0 0 AL2E AL5E 0 0]
            alternate_definition [magic] c2
   setup qtag 2x4 rotate restriction forbidden diamond_like
      array [0 0 AL7S CR7N 0 0 CR0N AL0S]
   setup pqtag 2x4 rotate restriction forbidden diamond_like
      array [CR1E CR6E 0 0 AL5E AL2E 0 0]
            alternate_definition [magic interlocked] c3
   setup qtag 2x4 rotate restriction forbidden diamond_like
      array [0 0 AL7S AL0S 0 0 CR0N CR7N]
   setup pqtag 2x4 rotate restriction forbidden diamond_like
      array [CR1E CR6E 0 0 AL5E AL2E 0 0]
            alternate_definition [3x1] c3x
   setup 3x1dmd 1x8 rotate
      array [R0N R1N R3N 0 L0S L1S L3S 0]
   setup p3x1dmd 1x8 rotate
      array [0 0 0 R2E 0 0 0 L6E]

call "cut the diamond" plus tag cutdiamond
            fudge_to_q_tag take_right_hands
   setup dmd 1x4 restriction forbidden diamond_like
      array [CR3S 0 AL1S 0]
   setup pmd 1x4 restriction forbidden diamond_like
      array [0 CR2E 0 AL2W]
            alternate_definition [yoyo] c4
   setup dmd dmd restriction forbidden diamond_like
      array [CR3W 0 AL3E 0]
   setup pmd dmd restriction forbidden diamond_like
      array [0 CR2E 0 AL2W]
            alternate_definition [reverse] c3a
   setup dmd 1x4 rotate restriction forbidden diamond_like
      array [CR1N 0 AL1S 0]
   setup pmd 1x4 rotate restriction forbidden diamond_like
      array [0 CM2E 0 AM0E]
            alternate_definition [reverse yoyo] c4
   setup dmd dmd restriction forbidden diamond_like
      array [CR1E 0 AL1W 0]
   setup pmd dmd restriction forbidden diamond_like
      array [0 CM0W 0 AM0E]
            alternate_definition [interlocked] c1
   setup qtag 2x4 rotate restriction forbidden diamond_like
      array [0 0 AL0S AL7S 0 0 CR7N CR0N]
   setup pqtag 2x4 rotate restriction forbidden diamond_like
      array [CR5E CR2E 0 0 AL1E AL6E 0 0]
            alternate_definition [magic] c2
   setup qtag 2x4 rotate restriction forbidden diamond_like
      array [0 0 AL7S CR7N 0 0 CR0N AL0S]
   setup pqtag 2x4 rotate restriction forbidden diamond_like
      array [CR2E CR5E 0 0 AL6E AL1E 0 0]
            alternate_definition [magic interlocked] c3
   setup qtag 2x4 rotate restriction forbidden diamond_like
      array [0 0 AL7S AL0S 0 0 CR0N CR7N]
   setup pqtag 2x4 rotate restriction forbidden diamond_like
      array [CR2E CR5E 0 0 AL6E AL1E 0 0]
            alternate_definition [3x1] c3x
   setup 3x1dmd 1x8 rotate
      array [R0N R1N R3N 0 L0S L1S L3S 0]
   setup p3x1dmd 1x8 rotate
      array [0 0 0 R6E 0 0 0 L2E]

call "drop in" c2 tag dropin
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_rh
      array [CR0E 0 AL2W 0]
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_lh
      array [CR3E 0 AL1W 0]
   /* If no centers, assume diamond is "normal". */
   setup dmd 2x2 restriction unusual diamond_like
      array [CR0E 0 AL1W 0]
   /* Could happen if centers are phantoms.  We will not allow this if the setup is a recognizeable line. */
   setup 1x4 2x2
      array [CR0E 0 AL1W 0]
   setup pmd 2x2 restriction unusual diamond_like
      array [0 ZM1N 0 ZM2N]
            alternate_definition [grand] c4a
   setup short6 2x3 rotate
      array [ZM5W 0 ZM0W ZM1W 0 ZM4W]
   setup pshort6 2x3 rotate qualifier dmd_ctrs_rh
      array [0 CR0N 0 0 AL3S 0]
   setup pshort6 2x3 rotate qualifier dmd_ctrs_lh
      array [0 CR5N 0 0 AL2S 0]
   setup pspindle 2x4
      array [ZM1N ZM2N ZM3N 0 ZM4N ZM5N ZM6N 0]
   setup spindle 2x4 qualifier dmd_ctrs_rh
      array [0 0 0 AL4W 0 0 0 CR0E]
   setup spindle 2x4 qualifier dmd_ctrs_lh
      array [0 0 0 AL3W 0 0 0 CR7E]
            alternate_definition [cross] c4a
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_rh
      array [CR3E 0 AL1W 0]
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_lh
      array [CR0E 0 AL2W 0]
   setup pmd 2x2 restriction unusual diamond_like
      array [0 ZM2N 0 ZM1N]
            alternate_definition [grand cross] c4a
   setup short6 2x3 rotate
      array [ZM0W 0 ZM5W ZM4W 0 ZM1W]
   setup pshort6 2x3 rotate qualifier dmd_ctrs_rh qualifier dmd_ctrs_rh
      array [0 CR5N 0 0 AL2S 0]
   setup pshort6 2x3 rotate qualifier dmd_ctrs_lh qualifier dmd_ctrs_lh
      array [0 CR0N 0 0 AL3S 0]
   setup pspindle 2x4
      array [ZM6N ZM5N ZM4N 0 ZM3N ZM2N ZM1N 0]
   setup spindle 2x4 qualifier dmd_ctrs_rh
      array [0 0 0 AL3W 0 0 0 CR7E]
   setup spindle 2x4 qualifier dmd_ctrs_lh
      array [0 0 0 AL4W 0 0 0 CR0E]

call "drop out" c2
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_rh
      array [AL0W 0 CR2E 0]
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_lh
      array [AL3W 0 CR1E 0]
   /* If no centers, assume diamond is "normal". */
   setup dmd 2x2 restriction unusual diamond_like
      array [AL0W 0 CR1E 0]
   /* Could happen if centers are phantoms.  We will not allow this if the setup is a recognizeable line. */
   setup 1x4 2x2
      array [AL0W 0 CR1E 0]
   setup pmd 2x2 restriction unusual diamond_like
      array [0 ZM1N 0 ZM2N]
            alternate_definition [grand] c4a
   setup short6 2x3 rotate
      array [ZM5W 0 ZM0W ZM1W 0 ZM4W]
   setup pshort6 2x3 rotate qualifier dmd_ctrs_rh
      array [0 AL0S 0 0 CR3N 0]
   setup pshort6 2x3 rotate qualifier dmd_ctrs_lh
      array [0 AL5S 0 0 CR2N 0]
   setup pspindle 2x4
      array [ZM1N ZM2N ZM3N 0 ZM4N ZM5N ZM6N 0]
   setup spindle 2x4 qualifier dmd_ctrs_rh
      array [0 0 0 CR4E 0 0 0 AL0W]
   setup spindle 2x4 qualifier dmd_ctrs_lh
      array [0 0 0 CR3E 0 0 0 AL7W]
            alternate_definition [cross] c4a
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_rh
      array [AL3W 0 CR1E 0]
   setup dmd 2x2 restriction unusual diamond_like qualifier dmd_ctrs_lh
      array [AL0W 0 CR2E 0]
   setup pmd 2x2 restriction unusual diamond_like
      array [0 ZM2N 0 ZM1N]
            alternate_definition [grand cross] c4a
   setup short6 2x3 rotate
      array [ZM0W 0 ZM5W ZM4W 0 ZM1W]
   setup pshort6 2x3 rotate qualifier dmd_ctrs_rh
      array [0 AL5S 0 0 CR2N 0]
   setup pshort6 2x3 rotate qualifier dmd_ctrs_lh
      array [0 AL0S 0 0 CR3N 0]
   setup pspindle 2x4
      array [ZM6N ZM5N ZM4N 0 ZM3N ZM2N ZM1N 0]
   setup spindle 2x4 qualifier dmd_ctrs_rh
      array [0 0 0 CR3E 0 0 0 AL7W]
   setup spindle 2x4 qualifier dmd_ctrs_lh
      array [0 0 0 CR4E 0 0 0 AL0W]

call "_special drop in" dontshow tag spec_drop_in
            take_right_hands
   setup dmd 2x2 restriction forbidden diamond_like
      array [CR0E 0 AL1W 0]
   setup pmd 2x2 restriction forbidden diamond_like
      array [0 ZM1N 0 ZM2N]
            alternate_definition [12matrix] c3a
   setup pshort6 2x3 rotate
      array [0 CR0N 0 0 AL2S 0]
   setup short6 2x3 rotate
      array [ZM5W 0 ZM0W ZM1W 0 ZM4W]
            alternate_definition [16matrix] c3a
   setup pspindle 2x4
      array [ZM1N ZM2N ZM3N 0 ZM4N ZM5N ZM6N 0]
   setup spindle 2x4
      array [0 0 0 AL3W 0 0 0 CR0E]

call "switch the wave" a2
   setup 1x4 1x4 restriction wave_only
      array [CR3S AL0S AL1S CR2S]
            alternate_definition [grand] c4a
   setup 1x8 1x8 restriction wave_only
      array [CR3S AL0S AL1S CR6S AL7S CR4S CR5S AL2S]

call "switch the line" c1
   setup 1x4 1x4
      array [CR3S AL0S AL1S CR2S]
            alternate_definition [grand] c4a
   setup 1x8 1x8
      array [CR3S AL0S AL1S CR6S AL7S CR4S CR5S AL2S]

call "curl apart" c3x
   setup 1x4 1x4
      array [R3S L2N L1S R0N]

call "mix" a1 tag mix
            grand_is_inherited visible_fractions
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand roll_transparent]

call "swing and mix" a2
            grand_is_inherited visible_fractions
   seq swing []
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand roll_transparent]

call "trade the wave" plus tag tradethewave
   setup 1x4 1x4 restriction forbidden wave_only
      array [CR3S CR2S AL1S AL0S]

call "cross roll" c1 tag crossroll
   setup 1x4 1x4
      array [CR1S CR2S AL3S AL0S]
            alternate_definition [half] c3x
   setup 1x4 2x2
      array [CR0E CR1E AL1W AL0W]
            alternate_definition [grand] c3x
   setup 1x6 1x6
      array [CR1S CR5S AL0S AL4S AL2S CR3S]
   setup 1x8 1x8
      array [CR1S CR2S CR7S AL0S AL5S AL6S AL3S CR4S]
            alternate_definition [3x3] c4
   setup 1x6 1x6 restriction forbidden 3x3_2fl_only
      array [CR1S CR5S CR3S AL4S AL2S AL0S]
            alternate_definition [4x4] c4
   setup 1x8 1x8 restriction forbidden 4x4_2fl_only
      array [CR1S CR2S CR4S CR7S AL5S AL6S AL0S AL3S]

call "run wild" c3x
            grand_is_inherited visible_fractions
   seq crossroll [inherit_grand]
   seq crossroll [inherit_grand]

call "slip" a2 tag slip
   setup 1x4 1x4
      array [ZM0N CR3S ZM2N AL1S]
            alternate_definition [half] a2
   setup 1x4 dmd
      array [ZM0N CR1E ZM2N AL1W]

call "_maybe grand slip" dontshow tag maybegrandslip
   setup 1x4 1x4
      array [ZM0N CR3S ZM2N AL1S]
            alternate_definition [half] c1
   setup 1x4 dmd
      /* We would like to have them do a genuine hinge, but we don't have the predicates for it. */
      array [ZM0N CR1E ZM2N AL1W]
            alternate_definition [grand] c3a
   setup 1x6 1x6
      array [ZM0N CR2S AL1S ZM3N AL5S CR4S]
   setup 1x8 1x8
      array [ZM0N CR3S CR6S AL1S ZM4N AL7S AL2S CR5S]

call "_maybe grand slip, not c3" dontshow tag maybegrandslip_notc3
   setup 1x4 1x4
      array [ZM0N CR3S ZM2N AL1S]
            alternate_definition [half] c1
   setup 1x4 dmd
      /* We would like to have them do a genuine hinge, but we don't have the predicates for it. */
      array [ZM0N CR1E ZM2N AL1W]
            alternate_definition [grand] a2
   setup 1x6 1x6
      array [ZM0N CR2S AL1S ZM3N AL5S CR4S]
   setup 1x8 1x8
      array [ZM0N CR3S CR6S AL1S ZM4N AL7S AL2S CR5S]

call "slide" a2
   setup 1x4 1x4
      array [1N 0N 3N 2N]

/* This is the "follow your neighbor and spread" type. */
call "spread" plus tag spread
   setup 1x4 1x4
      array [ZM1N ZM0N ZM3N ZM2N]

/* This is the "heads star thru and spread" type. */
call "... and spread" plus
   setup 4x2 2x4 rotate
      array [ZM6W ZM7W ZM0W 0 0 ZM3W ZM4W ZM5W]

call "swing" a2 tag swing
            parallel_conc_end    /* For the "half" version. */
   setup 1x4 1x4 restriction wave_only   /* See comment at spin chain the line. */
      array [CR1S AL0S AL3S CR2S]
            alternate_definition [half] a2
   setup 1x4 2x2 restriction forbidden wave_only
      array [CR0E AL0W AL1W CR1E]
            alternate_definition [yoyo] c4
   setup 1x2 1x2 rotate
      array [CR1S AL1N]

call "slither" a2 tag slither
   setup 1x4 1x4
      array [ZM0N ZM3N ZM2N ZM1N]

call "swing/slip" dontshow tag swingslip
            step_to_wave
   setup 1x4 1x4
      array [CCAL3N AL0S AACR1N CR2S]

call "swing/slip" dontshow tag waveswingslip
            left_means_touch_or_check step_to_wave yoyo_is_inherited
   seq swing [inherit_yoyo]
   seq slip []

call "_right swing" dontshow tag right_swing
            left_means_mirror step_to_wave
   setup 1x4 1x4 restriction forbidden wave_only
      array [CR1S 0 0 CR2S]

call "_swing_slip_cast_3" dontshow tag swingslipcast3
            left_means_mirror
   seq waveswingslip [inherit_left]
   seq cast_off_34 []

call "_centers @2spin @3the windmill" dontshow tag ctrwindmill
            left_means_mirror
   seq waveswingslip [inherit_left or_anycall]
   seq cast_off_34 []

call "_outsides face @h" dontshow tag set_windmill_direction
   conc nullcall [] quarter_maybe []

call "_finish @2spin @3the windmill" dontshow tag finish_windmill
            left_means_mirror
   conc ctrwindmill [inherit_left] dblcirc [conc_demand_lines conc_force_lines]

call "@2spin @3the windmill, outsides @h" a2
            sequence_starter left_means_mirror
   seq set_windmill_direction []
   seq finish_windmill [inherit_left]

call "sock it to me" c2
   setup 1x4 1x4
      preds "Can't find an unambiguous socker."
         if socker_is_left  [CR2S AL0S AL3S AL1S]
         if socker_is_right [0    CR3S 0    CR2S]
   setup 1x3 1x3
      preds "Can't find an unambiguous socker."
         if socker_is_left_1x3  [CR2S AL0S AL1S]
         if socker_is_right_1x3 [0    CR2S 0]

call "here comes the judge" c2
   setup 1x4 1x4
      preds "Can't find an unambiguous judge."
         if judge_is_right [CR1S CR3S AL0S CR2S]
         if judge_is_left  [0    AL0S 0    AL1S]
   setup 1x3 1x3
      preds "Can't find an unambiguous judge."
         if judge_is_right_1x3 [CR1S CR2S AL0S]
         if judge_is_left_1x3  [0    AL0S 0]

call "partner tag" plus tag partnertag
   setup 1x2 1x2
      array [CM1E AM0W]

/* This call makes divide the ocean illegal from riggers. */
call "_partner tag by pairs" dontshow tag partnertagbypairs
   setup 2x2 2x2
      array [CM1E AM0W AM3W CM2E]
            alternate_definition [single] c3
   setup 1x2 1x2
      array [CM1E AM0W]

call "lockit" a1 tag lockit
   setup 1x4 1x4 rotate
      array [CR0N CR1N AL0S AL1S]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1N 0 AL1S]
            alternate_definition [cross] c3
   setup 1x4 1x4 rotate
      array [CR1N CR0N AL1S AL0S]
            alternate_definition [grand] c4
   setup 1x8 3x4 rotate
      array [CR9N CR8N CR11N AL8S AL0S AL1S AL11S CR1N]
            alternate_definition [3x3] c4
   setup 1x6 1x6 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 1x8 1x8 rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]
            alternate_definition [cross 3x3] c4
   setup 1x6 1x6 rotate
      array [CR2N CR1N CR0N AL2S AL1S AL0S]
            alternate_definition [cross 4x4] c4
   setup 1x8 1x8 rotate
      array [CR2N CR3N CR0N CR1N AL2S AL3S AL0S AL1S]

call "_cross lockit" dontshow tag crosslockit
   setup 1x4 1x4 rotate
      array [CR1N CR0N AL1S AL0S]

call "fan the top" mainstream tag fanthetop
            step_to_wave left_means_touch_or_check
   setup 1x4 1x4 rotate no_cutting_through
      array [CR0N CR3S AL0S AL3N]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR3S 0 AL3N]
            alternate_definition [grand] c3
   setup 1x8 3x4 rotate
      array [CR9N CR7S CR5S AL7N AL0S AL2N AL5N CR2S]
   setup 3x4 1x8 rotate
      array [CR0N CR3S AL3N AL0S 0 AL6N 0 AL5N CR5S 0 0 CR6S]

call "fan the top (line)" dontshow tag linefanthetop
   setup 1x4 1x4 rotate no_cutting_through
      array [CR0N CR3S AL0S AL3N]

call "spin the top" mainstream tag spinthetop
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check grand_is_inherited visible_fractions
   seq trade [inherit_yoyo]
   seq fanthetop [inherit_grand]

call "reverse the top" c3
            step_to_wave yoyo_is_inherited left_means_touch_or_check grand_is_inherited visible_fractions
   seq fanthetop [inherit_grand]
   seq trade [inherit_yoyo]

call "cross the top" c4
            step_to_wave left_means_touch_or_check
   setup 1x4 1x4 rotate
      array [0S 3N 0N 3S]

call "spin the yoyo" c4
            step_to_wave left_means_touch_or_check
   seq armturn_34 []
   seq fanthetop []

call "jay walk" c1
   partnermatrix find_jaywalkers
      [16N 16 16N 16 0 0 0 0 0 0]

call "@6 jay walk" c1
   partnermatrix use_selector ignore_nonselectees find_jaywalkers
      [16N 16 16N 16 0 0 0 0 0 0]

call "jay touch 1/4" c3a
   partnermatrix find_jaywalkers
      [16E 16 16E 16 0 0 0 0 0 0]

call "@6 jay touch 1/4" c3a
   partnermatrix use_selector ignore_nonselectees find_jaywalkers
      [16E 16 16E 16 0 0 0 0 0 0]

call "jay slide thru" c3a
   partnermatrix find_jaywalkers
      [16E 16 16W 16 0 0 0 0 0 0]

call "@6 jay slide thru" c3a
   partnermatrix use_selector ignore_nonselectees find_jaywalkers
      [16E 16 16W 16 0 0 0 0 0 0]

/* This will allow nonsensical uses.  That's too bad.  Use of "<so-and-so> spread" to
   go from columns to blocks (or whatever) violates the definition of the call anyway. */
call "@6 spread" c1
   partnermatrix use_selector tbone_is_ok both_selected_ok
      [M16N 16 M16N 16 M16N 16 M16N 16 M14N 16 M14N 16 M18N 16 M18N 16]

call "@6 shove off" c3a
   partnermatrix use_selector stop_and_warn_on_tbone
      [M18N 16 M18N 16 M14N 16 M14N 16 L14S 16 L14S 16 R18S 16 R18S 16]

call "@6 1/2 shove off" c3a
   partnermatrix use_selector stop_and_warn_on_tbone
      [M17N 16 M17N 16 M15N 16 M15N 16 L15W 16 L15W 16 R17E 16 R17E 16]

call "@6 tow truck" c3x
   partnermatrix use_selector stop_and_warn_on_tbone
      [M18N 16 M18N 16 M14N 16 M14N 16 M14N 16 0 0 M18N 16]

call "@6 1/2 tow truck" c3x
   partnermatrix use_selector stop_and_warn_on_tbone
      [M17N 16 M17N 16 M15N 16 M15N 16 M15N 16 0 0 M17N 16]

call "@6 run the wheel" c3x
            yield_if_ambiguous
   partnermatrix use_selector stop_and_warn_on_tbone
      [R18W 16 R18W 16 L14E 16 L14E 16 R16W 14 R16W 14 L16E 14 L16E 14]

/* This is somewhat pathetic, but people have used this call with "own the anyone",
   in which the phantoms that remained when the other people left the room were
   not considered sufficiently real to make the "partnermatrix" schema work
   properly.  We need to think carefully about just how empty the empty chairs
   are during an "own the anyone" call.  Not to mention "multiple formations
   working".  A major upheaval looms on the horizon. */
call "leads run the wheel" c3x
   setup 2x2 2x2
      array [CR3W AL2E AL3E CR2W]
            alternate_definition [single] c4
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [CR1S AL1N]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate restriction forbidden wave_only
      array [CR3S CR4S CR5S AL3N AL4N AL5N]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [CR4S CR5S CR6S CR7S AL4N AL5N AL6N AL7N]

call "bridge the gap" c4a
   partnermatrix tbone_is_ok
      [M14N 18 M14N 18 L14S 18 L14S 18 0 0 0 0]

call "@6 right anchor 1/4" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 R18E 18 R18E 18 R16E 16 R16E 16]

call "@6 left anchor 1/4" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 L16W 16 L16W 16 L14W 18 L14W 18]

call "@6 right anchor 1/2" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 R20S 16 R20S 16 R16S 16 R16S 16]

call "@6 left anchor 1/2" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 L16S 16 L16S 16 L12S 16 L12S 16]

call "@6 right anchor 3/4" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 R18W 14 R18W 14 R16W 16 R16W 16]

call "@6 left anchor 3/4" c3x
   partnermatrix use_selector ignore_nonselectees must_face_same_way
      [0 0 0 0 L16E 16 L16E 16 L14E 14 L14E 14]

call "@6 quarter right" mainstream
            dont_use_in_resolve
   matrix [R16E 16 R16E 16]

call "@6 quarter left" mainstream
            dont_use_in_resolve
   matrix [L16W 16 L16W 16]

call "@6 U-turn back" mainstream tag some_utb
            dont_use_in_resolve
   matrix [16S 16 16S 16]

call "@6 press ahead" mainstream
            dont_use_in_resolve
   matrix [M16N 18 M16N 18]

call "@6 press right" mainstream
            dont_use_in_resolve
   matrix [M18N 18 M18N 18]

call "@6 press left" mainstream
            dont_use_in_resolve
   matrix [M14N 18 M14N 18]

call "@6 1/2 press ahead" mainstream
            dont_use_in_resolve
   matrix [M16N 17 M16N 17]

call "@6 truck" c2
            dont_use_in_resolve reverse_means_mirror
   matrix [M14N 16 M18N 16]

call "@6 1/2 truck" c2
            dont_use_in_resolve reverse_means_mirror
   matrix [M15N 16 M17N 16]

call "@6 reverse truck" c2
            dont_use_in_resolve
   matrix [M18N 16 M14N 16]

call "@6 1/2 reverse truck" c2
            dont_use_in_resolve
   matrix [M17N 16 M15N 16]

call "@6 E.R.A." c4
            dont_use_in_resolve
   matrix [M16N 14 M16N 18]

call "@6 1/2 E.R.A." c4
            dont_use_in_resolve
   matrix [M16N 15 M16N 17]

call "@6 M.C.P." c4
            dont_use_in_resolve
   matrix [M16N 18 M16N 14]

call "@6 1/2 M.C.P." c4
            dont_use_in_resolve
   matrix [M16N 17 M16N 15]

call "@6 leap frog" c4
            dont_use_in_resolve
   matrix [M16N 20 M16N 20]

call "@6 right loop 1" c2
            dont_use_in_resolve
   matrix [R20S 16 R20S 16]

call "@6 right loop 2" c2
            dont_use_in_resolve
   matrix [R22S 16 R22S 16]

call "@6 right loop 3" c2
            dont_use_in_resolve
   matrix [R24S 16 R24S 16]

call "@6 left loop 1" c2
            dont_use_in_resolve
   matrix [L12S 16 L12S 16]

call "@6 left loop 2" c2
            dont_use_in_resolve
   matrix [L10S 16 L10S 16]

call "@6 left loop 3" c2
            dont_use_in_resolve
   matrix [L8S 16 L8S 16]

call "@6 curve right" c3x
            dont_use_in_resolve
   matrix [R18E 18 R18E 18]

call "@6 curve left" c3x
            dont_use_in_resolve
   matrix [L14W 18 L14W 18]

call "@6 roll" plus
   rolldefine

call "roll" plus tag roll
   rolldefine

call "hinge" mainstream tag hinge
            left_means_mirror
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0N AL0S]
         if always [0 AL1S]

call "shazam" c2
            visible_fractions
   /* We used to make this a right-hand-only call, by the principle of maximum
      conservatism.  We don't any longer. */
   seq armturn_14 [allow_forced_mod]
   seq uturnback [allow_forced_mod]

call "roll @b times" dontshow tag roll_n
            neednumber
   seq roll [repeat_n]

call "arm turn 1/4" dontshow tag armturn_14
            12_16_matrix_means_split
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [CR0N AL0S]

call "arm turn 3/4" dontshow tag armturn_34
            12_16_matrix_means_split
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [CR1S AL1N]

call "arm turn @b" dontshow tag armturn_n4
            neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_14 [inherit_12_matrix inherit_16_matrix repeat_n]

call "_centers arm turn @b / ends turn back" dontshow tag ctrarmturn_n4_utb
            neednumber
   singleconc armturn_n4 [] uturnback []

call "_centers arm turn 1/4 / ends turn back" dontshow tag ctrarmturn_14_utb
   singleconc_together armturn_14 [] uturnback []

call "_centers arm turn 1/4 / ends turn away" dontshow tag ctrarmturn_14_utaway
   singleconc armturn_14 [] uturnaway []

call "_centers arm turn 3/4 / ends turn away" dontshow tag ctrarmturn_34_utaway
   singleconc armturn_34 [] uturnaway []

call "_centers arm turn @b while ends roll @b times" dontshow tag ctrarmturn_n_ends_roll_n
            need_two_numbers
   singleconc armturn_n4 [] roll_n [shift_one_number]

call "cast off 1/4" dontshow tag cast_off_14
            parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if cast_normal  [CR0N AL0S]
   setup 1x4 2x2
      preds "?"
         if cast_normal  [CR0E AL0W AL1W CR1E]
         if cast_pushy   [AL3W AL0W CR2E CR1E]
         if always       [0    AL0W 0    CR1E]
   setup 1x6 2x3
      preds "?"
         if cast_normal  [CR0E AL0W CR1E AL2W CR2E AL1W]
         if cast_pushy   [AL5W AL0W 0    CR3E CR2E 0]
         if always       [0    AL0W 0    0    CR2E 0]

call "cast off 1/2" dontshow tag cast_off_12
            parallel_conc_end
   setup 1x2 1x2
      preds "Need to be in miniwave or line of 4."
         if cast_normal  [CR1S AL0S]
   setup 1x4 1x4
      preds "?"
         if cast_normal  [CR1S AL0S AL3S CR2S]
         if cast_pushy   [AL1S AL0S CR3S CR2S]
         if always       [0    AL0S 0    CR2S]
   setup 1x6 1x6
      preds "?"
         if cast_normal  [CR1S AL0S CR5S AL4S CR3S AL2S]
         if cast_pushy   [AL1S AL0S 0    CR4S CR3S 0]
         if always       [0    AL0S 0    0    CR3S 0]
               alternate_definition [half] mainstream
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if cast_normal  [CR0N AL0S]
   setup 1x4 2x2
      preds "?"
         if cast_normal  [CR0E AL0W AL1W CR1E]
         if cast_pushy   [AL3W AL0W CR2E CR1E]
         if always       [0    AL0W 0    CR1E]
   setup 1x6 2x3
      preds "?"
         if cast_normal  [CR0E AL0W CR1E AL2W CR2E AL1W]
         if cast_pushy   [AL5W AL0W 0    CR3E CR2E 0]
         if always       [0    AL0W 0    0    CR2E 0]

call "cast off 3/4" dontshow tag cast_off_34
            parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if cast_normal  [CR1S AL1N]
   setup 1x4 2x2
      preds "?"
         if cast_normal  [CR3W AL3E AL2E CR2W]
         if cast_pushy   [AL0E AL3E CR1W CR2W]
         if always       [0    AL3E 0    CR2W]
   setup 1x6 2x3
      preds "?"
         if cast_normal  [CR5W AL5E CR4W AL3E CR3W AL4E]
         if cast_pushy   [AL0E AL5E 0    CR2W CR3W 0]
         if always       [0    AL5E 0    0    CR3W 0]
               alternate_definition [single] c4       /* For divide the ocean */
   setup 1x2 1x2
      array [AL0E CR1W]
               alternate_definition [interlocked] c3  /* For interlocked counter */
   setup 1x4 2x2
      preds "?"
         if x14_once_rem_miniwave [CR3W CR2W AL2E AL3E]
         if x14_once_rem_couple   [AL0E CR2W CR1W AL3E]
         if always                [0    CR2W 0    AL3E]

call "cast off 3/4, opt for normal" dontshow tag cast_off_34_with_warn
            parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if cast_normal  [CR1S AL1N]
   setup 1x4 2x2
      preds "?"
         if cast_normal_or_warn  [CR3W AL3E AL2E CR2W]
         if always               [AL0E AL3E CR1W CR2W]
   setup 1x6 2x3
      preds "?"
         if cast_normal_or_warn  [CR5W AL5E CR4W AL3E CR3W AL4E]
         if always               [AL0E AL5E 0    CR2W CR3W 0]

/* Use this only after setting up the roll direction from initial cast.  Not for general use. */
call "_continue to cast off" dontshow tag continue_cast
            parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Can't figure out which way to cast."
         if roll_is_cw  [CR0N CR1N]
         if roll_is_ccw [AL1S AL0S]

call "cast off @b" mainstream tag cast_off_n4
            parallel_conc_end neednumber diamond_is_legal visible_fractions distribute_repetitions
   seq cast_off_14 [inherit_diamond]
   seq continue_cast [repeat_nm1 inherit_diamond]

call "_cast off 1/4 and roll" dontshow tag cast_1_4_roll
            parallel_conc_end
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if lines_miniwave [CR0E AL0E]
   setup 1x4 2x2
      preds "?"
         if lines_miniwave [CR0S AL0S AL1S CR1S]
         if lines_couple   [AL3S AL0S CR2S CR1S]
         if always         [0    AL0S 0    CR1S]

call "_hinge and then trade" dontshow tag hinge_then_trade
            left_means_mirror
   seq hinge [inherit_left]
   seq trade []

call "snake" c3x
   setup 1x2 1x2 rotate
      array [C1N A1S]

call "patch the @6" c3a
            visible_fractions diamond_is_legal
   /* Selector identities *do not* get re-evaluated between parts of a sequential
      call, which makes this work.  Compare wave the <anyone>. */
   seq hinge [allow_forced_mod inherit_diamond]
   seq some_utb []

call "tap the @6" c4a
            visible_fractions
   seq passthru []
   seq some_utb []
   seq boxctrrot []
   seq roll []

call "@6 bypass" c4a
   /* By giving a 2x2 def'n, we allow roll, since they know which way
      to turn back.  Also, this allows T-bone boxes. */
   setup 2x2 2x2
      preds "Can't tell who is designated."
         if select [0 0 ZM1N ZM0N]
         if unselect [0 0 AL1S CR0S]
   setup 2x1 1x2
      preds "Can't tell who is designated."
         if select [1N 0]
         if unselect [1S 0]

call "_the_wave" dontshow tag the_wave
   setup 2x4 2x4 rotate restriction forbidden wave_only
      array [ZM7W ZM7W ZM0W ZM0W ZM1W ZM1W ZM6W ZM6W]
            alternate_definition [single] c4
   setup 1x4 2x2 restriction forbidden wave_only
      array [ZM0N ZM0N ZM1N ZM1N]
            alternate_definition [3x3 12matrix] c4
   setup 3x4 2x6 rotate restriction forbidden wave_only
      array [ZM11W ZM11W ZM0W ZM0W ZM1W ZM1W ZM2W ZM2W ZM9W ZM9W ZM10W ZM10W]
            alternate_definition [4x4 16matrix] c4
   setup 4x4 2x8 rotate restriction forbidden wave_only
      array [ZM0W ZM1W ZM2W ZM1W ZM3W ZM3W ZM12W ZM2W ZM12W ZM13W ZM14W ZM13W ZM15W ZM15W ZM0W ZM14W]

call "@0 the wave" c3x
            single_is_inherited 3x3_is_inherited 4x4_is_inherited
            12_matrix_is_inherited 16_matrix_is_inherited
   seq the_wave [inherit_single inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq nullcall [mandatory_anycall inherit_single inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]

call "peel the wave" c3x
            single_is_inherited 3x3_is_inherited 4x4_is_inherited
            12_matrix_is_inherited 16_matrix_is_inherited
   seq the_wave [inherit_single inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq peeloff [inherit_single inherit_3x3 inherit_4x4]

call "trail the wave" c3x
            single_is_inherited 3x3_is_inherited 4x4_is_inherited
            12_matrix_is_inherited 16_matrix_is_inherited
   seq the_wave [inherit_single inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq trailoff [inherit_single inherit_3x3 inherit_4x4]

call "peel and trail the wave" c3x
            single_is_inherited 3x3_is_inherited 4x4_is_inherited
            12_matrix_is_inherited 16_matrix_is_inherited
   seq the_wave [inherit_single inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq peelntrail [inherit_single inherit_3x3 inherit_4x4]

call "trail and peel the wave" c4
            single_is_inherited 3x3_is_inherited 4x4_is_inherited
            12_matrix_is_inherited 16_matrix_is_inherited
   seq the_wave [inherit_single inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq trailnpeel [inherit_single inherit_3x3 inherit_4x4]

call "clover the wave" c3x
            single_is_inherited 3x3_is_inherited 4x4_is_inherited
            12_matrix_is_inherited 16_matrix_is_inherited
   seq the_wave [inherit_single inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq cloverleaf [inherit_single inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]

call "trade" mainstream tag trade
            parallel_conc_end left_means_mirror 12_16_matrix_means_split
            /* Need "left" for "half trade", and "parallel_conc_end" for "yoyo trade" */
   setup 1x2 1x2
      array [CR1S AL0S]
            alternate_definition [half] mainstream
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0N AL0S]
         if always [0 AL1S]
            alternate_definition [yoyo] c4
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if cast_normal  [CR1S AL1N]
   setup 1x4 2x2
      preds "?"
         if cast_normal  [CR3W AL3E AL2E CR2W]
         if cast_pushy   [AL0E AL3E CR1W CR2W]
         if always       [0    AL3E 0    CR2W]

call "_miniwave trade" dontshow tag miniwavetrade
            parallel_conc_end left_means_mirror
            /* Need "left" for "half trade", and "parallel_conc_end" for "yoyo trade" */
   setup 1x2 1x2 restriction unusual wave_only
      array [CR1S AL0S]
            alternate_definition [half] mainstream
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [CR0N AL0S]
            alternate_definition [yoyo] c4
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [CR1S AL1N]

call "california twirl" mainstream
   setup 1x2 1x2 restriction forbidden couples_only
      preds "Unknown sex."
         if boyp [CR1S 0]
         if girlp [0 AL0S]

call "wheel around" mainstream
            reverse_means_mirror
   setup 1x2 1x2 restriction forbidden couples_only
      array [AL1S AL0S]

call "_maybe single trade" dontshow tag maybesingletrade
   setup 1x2 1x2
      array [CR1S AL0S]
            alternate_definition [single] a2
   setup 1x1 1x1
      array [0S]

call "@6 trade" mainstream
   setup 1x8 1x8
      preds "Sorry, can't handle complex cases yet."
         if unselect             [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
/*    Need to finish this.  It is difficult, and needs many predicates. */
         if select_near_select   [CR1S AL0S AL3S CR2S AL5S CR4S CR7S AL6S]
/*
         if once_rem_from_select [CR3S CR2S AL1S AL0S AL7S AL6S CR5S CR4S]
         if conc_from_select     [CR2S CR3S AL0S AL1S CR6S CR7S AL4S AL5S]
*/
   setup 1x4 1x4
      preds "Can't find anyone to trade with."
         if unselect             [ZM0N ZM1N ZM2N ZM3N]
         if select_near_select   [CR1S AL0S AL3S CR2S]
         if once_rem_from_select [CR3S CR2S AL1S AL0S]
         if conc_from_select     [CR2S CR3S AL0S AL1S]
   setup 1x2 1x2
      preds "Can't find anyone to trade with."
         if select_near_select     [CR1S AL0S]
         if unselect_near_unselect [ZM0N ZM1N]

call "trade and roll" plus tag trade_and_roll
            visible_fractions
   seq trade []
   seq roll []

call "U-turn back" mainstream tag uturnback
   setup 1x2 1x2
      array [CR0S AL1S]
   setup 1x1 1x1
      array [0S]
   setup star star
      array [CR0S 1S AL2S 3S]
            alternate_definition [half] mainstream
   setup 1x2 1x2
      array [CR0E AL1W]
   setup 1x1 1x1
      array [0]    /* so people in an elongated 1x2 will be able to do it. */
   setup star star
      array [CR0E 0 AL2W 0]

call "U-turn away" dontshow tag uturnaway
   setup 1x2 1x2
      array [AL0S CR1S]
   setup 1x1 1x1
      array [0S]
   setup star star
      array [AL0S 1S CR2S 3S]
            alternate_definition [half] mainstream
   setup 1x2 1x2
      array [AL0W CR1E]
   setup 1x1 1x1
      array [0]    /* so people in an elongated 1x2 will be able to do it. */
   setup star star
      array [AL0W 0 CR2E 0]

call "quarter @eright@f" dontshow tag quarter_right
            left_means_mirror
   setup 1x1 1x1
      array [CR0E]

/* This one doesn't allow "no direction". */
call "quarter @h" mainstream
   setup 1x2 1x2
      preds "Illegal direction."
         if rightp [CR0E CR1E]
         if leftp [AL0W AL1W]
         if inp [CR0E AL1W]
         if outp [AL0W CR1E]
   setup 1x1 1x1
      preds "Direction must be right or left."
         if rightp [CR0E]
         if leftp [AL0W]

/* This one allows "no direction". */
call "_maybe quarter @h" dontshow tag quarter_maybe
   setup 1x2 1x2
      preds "Direction must be right, left, in, or out."
         if rightp [CR0E CR1E]
         if leftp [AL0W AL1W]
         if inp [CR0E AL1W]
         if outp [AL0W CR1E]
         if no_dir_p [ZM0N ZM1N]
   setup dmd dmd    /* Need these for hinge and circulate. */
      preds "Direction must be right, left, in, or out."
         if rightp [CR0E CR1E CR2E CR3E]
         if leftp [AL0W AL1W AL2W AL3W]
         if inp [CR0E 0 AL2W 0]
         if outp [AL0W 0 CR2E 0]
         if no_dir_p [ZM0N ZM1N ZM2N ZM3N]
   setup pmd dmd
      preds "Direction must be right, left, in, or out."
         if rightp [CR0E CR1E CR2E CR3E]
         if leftp [AL0W AL1W AL2W AL3W]
         if inp [0 CR1E 0 AL3W]
         if outp [0 AL1W 0 CR3E]
         if no_dir_p [ZM0N ZM1N ZM2N ZM3N]
   setup 1x1 1x1
      preds "Direction must be right or left."
         if rightp [CR0E]
         if leftp [AL0W]
         if no_dir_p [ZM0N]

/* This is the call to use after "tag the line".  It is also the second
   part of "pass in/out". */
/* This one allows "no direction".  In many cases that's unesthetic, but it is needed
   for "tunnel thru". */
call "face @h" mainstream tag face_dir
   setup 2x2 2x2
      preds "Illegal direction."
         if rightp   [CR0E CR1E CR2E CR3E]
         if leftp    [AL0W AL1W AL2W AL3W]
         if inp      [CR0E AL1W AL2W CR3E]
         if outp     [AL0W CR1E CR2E AL3W]
         if zigzigp  [CR0E CR1E CR2E CR3E]
         if zagzagp  [AL0W AL1W AL2W AL3W]
         if zigzagp  [CR0E CR1E AL2W AL3W]
         if zagzigp  [AL0W AL1W CR2E CR3E]
         if no_dir_p [ZM0N ZM1N ZM2N ZM3N]
   setup 1x2 1x2
      preds "Direction must be right, left, in, or out."
         if rightp   [CR0E CR1E]
         if leftp    [AL0W AL1W]
         if inp      [CR0E AL1W]
         if outp     [AL0W CR1E]
         if no_dir_p [ZM0N ZM1N]
   setup 1x4 1x4
      preds "Direction must be right, left, in, or out."
         if rightp   [CR0E CR1E CR2E CR3E]
         if leftp    [AL0W AL1W AL2W AL3W]
         if inp      [CR0E CR1E AL2W AL3W]
         if outp     [AL0W AL1W CR2E CR3E]
         if no_dir_p [ZM0N ZM1N ZM2N ZM3N]
   setup 2x1 1x2
      preds "Illegal direction."
         if rightp   [CR0E CR1E]
         if leftp    [AL0W AL1W]
         if zigzigp  [CR0E CR1E]
         if zagzagp  [AL0W AL1W]
         if zigzagp  [AL0W CR1E]
         if zagzigp  [CR0E AL1W]
         if no_dir_p [ZM0N ZM1N]
   setup 1x1 1x1
      preds "Direction must be right or left."
         if rightp   [CR0E]
         if leftp    [AL0W]
         if no_dir_p [ZM0N]

call "pass @h" a1
            visible_fractions
   seq passthru []
   seq face_dir []

call "pass in" dontshow tag pass_in
            rear_back_from_r_wave
   setup 2x4 2x4
      array [0 0 0 0 AL3W AL2W CR1E CR0E]
   setup 2x2 2x2 no_cutting_through restriction not_tboned
      array [0 0 AL1W CR0E]

call "_face out" dontshow tag face_out
   setup 1x2 1x2
      array [AL0W CR1E]
   setup 1x4 1x4
      array [AL0W AL1W CR2E CR3E]

call "_pass out" dontshow tag pass_out
            visible_fractions
   seq passthru []
   seq face_out []

call "_quarter in" dontshow tag quarterin
   /* We put in a 2x2 definition here so that the ends can do it
      when they are in line-like elongation.  If we just had the
      1x2 version, the ends' 2x2 setup would be divided into 1x2's,
      and the elongation would be improper for this splitting, so
      an error would be raised.  By putting in the 2x2 version,
      we are saying that the ends really can quarter in, even though
      the person they are quartering toward is a long distance away.
      This makes the last part of "load the boat" work. */
   setup 2x2 2x2
      array [CR0E AL1W AL2W CR3E]
   setup 1x2 1x2
      array [CR0E AL1W]

call "_quarter out" dontshow tag quarterout
   /* See above. */
   setup 2x2 2x2
      array [AL0W CR1E CR2E AL3W]
   setup 1x2 1x2
      array [AL0W CR1E]

call "half sashay" mainstream
   setup 1x2 1x2 restriction forbidden couples_only
      array [ZM1N ZM0N]
            alternate_definition [half] mainstream
   setup 1x2 1x2 rotate restriction forbidden couples_only
      array [ZM1W ZM0W]

call "roll away" mainstream
   setup 1x2 1x2 restriction forbidden couples_only
      array [ZM1N AL0N]
            alternate_definition [half] mainstream
   setup 1x2 1x2 rotate restriction forbidden couples_only
      array [ZM1W AL0E]

call "8 roll away with a half sashay" c4
            yoyo_is_inherited visible_fractions
   seq miniwavetrade [inherit_yoyo]
   seq uturnback []

call "put centers in" mainstream tag centersin
   setup 4x2 2x4 rotate
      array [7W 0 1W 0W 3W 2W 0 4W]
   setup 2x4 2x4 rotate
      array [7W 0 0 0W 3W 0 0 4W]

call "put centers out" c3x
   setup 4x2 2x4 rotate
      array [6W 0 0W 1W 2W 3W 0 5W]
   setup 2x4 2x4 rotate
      array [6W 0 0 1W 2W 0 0 5W]

call "split the outsides, around 1 to a line" mainstream
   setup 4x2 2x4 rotate
      array [ZM6W 0 AL0E ZM1W ZM2W CR3E 0 ZM5W]

call "separate, around 1 to a line" mainstream
   setup 4x2 2x4 rotate
      array [ZM7W 0 0 ZM0W ZM3W 0 0 ZM4W]
   setup 2x4 2x4 rotate
      array [0 AL6N CR1S 0 0 0 0 0]

call "separate, around 2 to a line" mainstream
   setup 4x2 2x4 rotate
      array [ZM6W 0 0 ZM1W ZM2W 0 0 ZM5W]
   setup 2x4 2x4 rotate
      array [0 AL4N CR3S 0 0 0 0 0]

call "pass thru" mainstream tag passthru
            rear_back_from_r_wave left_means_mirror
   simple_funny
   setup 2x1 1x2
      array [ZM1N 0]
   /* We put in this next definition to allow it from T-boned boxes
      (which would otherwise get the "People are not working with each other
      in a consistent way" error).  The restriction will make it give a
      "do your part" warning when used in this way. */
   setup 2x2 2x2 no_cutting_through restriction not_tboned
      array [0 0 ZM1N ZM0N]
            alternate_definition [half] mainstream
   setup 2x1 1x2 rotate
      array [ZM0W 0]

call "touch" mainstream tag touch
            /* The "rear back" property is required for square thru, etc. */
            rear_back_from_r_wave diamond_is_legal left_means_mirror
   setup 2x1 1x2 rotate
      array [ZM0W 0]

call "touch 1/4" dontshow tag touch_1_4
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2
      array [CR1E 0]

call "left touch 1/4" dontshow tag left_touch_1_4
            left_means_mirror   /* That is, it means RIGHT touch 1/4. */
   setup 2x1 1x2
      array [AL1W 0]

call "touch 3/4" dontshow tag touch_3_4
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2
      array [CR0W 0]

call "touch @b" mainstream tag touch_n_4
            rear_back_from_r_wave neednumber diamond_is_legal left_means_mirror
   seq touch [inherit_left inherit_diamond]
   seq armturn_14 [repeat_n inherit_diamond]

call "_leftable touch" dontshow tag lft_touch
            left_means_mirror
   setup 2x1 1x2 rotate
      array [ZM0W 0]

call "_leftable touch @b" dontshow tag lft_touch_n_4
            neednumber left_means_mirror
   seq lft_touch [inherit_left]
   seq armturn_14 [repeat_n]

call "_face and maybe touch" dontshow tag facenmaybetouch
            visible_fractions
   seq quarterin []
   seq touch [or_anycall]

call "_face and touch @b" dontshow tag facentouch_n_4
            visible_fractions neednumber
   seq quarterin []
   seq touch_n_4 []

call "_hinge and U-turn away" dontshow tag hingnturnaway
            visible_fractions
   seq hinge []
   seq uturnaway []

call "soft @2touch@3" c4a
            visible_fractions
   singlecrossconc facenmaybetouch [] hingnturnaway []

call "soft touch @b" c4a
            visible_fractions neednumber
   singlecrossconc facentouch_n_4 [] hingnturnaway []

call "box the gnat" mainstream       /* Beware!!!  This is a problematical and easily abused call. */
   setup 1x2 1x2 rotate qualifier right_wave
      array [0E 0]
   setup 2x1 1x2 qualifier in_or_out
      array [1S 0]

call "single circle to a wave" plus  /* We need this as a standalone call, */
            reverse_means_mirror     /* because circle to a wave is c2. */
   setup 2x1 1x2 rotate
      array [C1E 0]

call "single circle 3/4 to a wave" plus
            reverse_means_mirror
   setup 2x1 1x2
      array [C0W 0]

call "circle to a 2-faced line" c3x
            reverse_means_mirror
   setup 2x2 1x4 restriction not_tboned
      array [0 0 C3S C2S]
            alternate_definition [singlefile] c4
   setup 4x1 1x4 rotate
      array [C3E C2E 0 0]

call "single circle to a line" c4
            reverse_means_mirror
   setup 2x1 1x2 rotate
      preds "Unknown sex."
         if boyp [R1E 0]
         if girlp [R1W 0]

call "pitch @h" c3
   setup 2x1 1x2
      preds "Direction must be right or left."
         if rightp   [CR1E CR0W]
         if leftp    [AL1W CR0W]
         if no_dir_p [ZM1N CR0W]
   setup 2x2 2x2
      preds "Direction must be given."
         if rightp   [CR3W CR2W CR1E CR0E]
         if leftp    [CR3W CR2W AL1W AL0W]
         if inp      [CR3W CR2W AL1W CR0E]
         if outp     [CR3W CR2W CR1E AL0W]
         if no_dir_p [CR3W CR2W ZM1N ZM0N]

call "left pitch @h" c3
   setup 2x1 1x2
      preds "Direction must be right or left."
         if rightp   [CR1E AL0E]
         if leftp    [AL1W AL0E]
         if no_dir_p [ZM1N AL0E]
   setup 2x2 2x2
      preds "Direction must be given."
         if rightp   [AL3E AL2E CR1E CR0E]
         if leftp    [AL3E AL2E AL1W AL0W]
         if inp      [AL3E AL2E AL1W CR0E]
         if outp     [AL3E AL2E CR1E AL0W]
         if no_dir_p [AL3E AL2E ZM1N ZM0N]

call "leads roll @eright@f to a wave" a1 tag leadsrollright
            left_means_mirror
   setup 2x1 1x2 rotate
      preds "???"
         if columns_tandem [M0W R1E]
         if always         [0   R1E]

call "roll @eright@f to a wave" a1 tag everyonerollright
            left_means_mirror
   setup 2x1 1x2 rotate
      array [0 R1E]

call "leads @e@f latch on" c3a
            left_means_mirror visible_fractions
   seq leadsrollright [inherit_left]
   seq hinge []

call "latch on" c3a
            left_means_mirror visible_fractions
   seq everyonerollright [inherit_left]
   seq hinge []

call "@6@C cast back" c1
   setup 4x2 4x4
      preds "Can't tell who is designated."
         if select   [   0 AL12S  0   AL14S CR5S   0 CR8S   0]
         if unselect [Z10N  Z15N  Z3N Z1N   Z2N  Z7N Z11N Z9N]
   setup 2x4 2x6
      preds "Can't tell who is designated."
         if select   [AL11S 0   0 CR6S   0   0   0    0]
         if unselect [Z1N Z2N Z3N Z4N  Z7N Z8N Z9N Z10N]
            alternate_definition [cross] c1
   setup 4x2 4x4
      preds "Can't tell who is designated."
         if select   [   0  CR8S  0   CR5S AL14S   0 AL12S  0]
         if unselect [Z10N  Z15N  Z3N Z1N   Z2N  Z7N Z11N Z9N]

call "slide thru" mainstream tag slidethru
            rear_back_from_r_wave
   setup 2x1 1x2
      preds "Unknown sex."
         if boyp [CR1E 0]
         if girlp [AL1W 0]

call "slide thru in miniwave" dontshow tag slidethru_in_miniwave
   setup 1x2 1x2 rotate
      preds "Unknown sex."
         if boyp [CR0N 0]
         if girlp [AL0S 0]

call "half breed thru" a1
            rear_back_from_r_wave
   setup 2x2 2x2 restriction not_tboned
      preds "Unknown sex."
         if boyp [0 0 L1S L1S]
         if girlp [0 0 L0S R0S]

call "cross breed thru" c3x
            rear_back_from_r_wave
   setup 2x2 2x2
      preds "Unknown sex."
         if boyp [0 0 R1E R1E]
         if girlp [0 0 L0W L0W]

call "star thru" mainstream tag star_thru
   setup 2x1 1x2 restriction forbidden opposite_sex
      preds "Unknown sex."
         if boyp [CR1E 0]
         if girlp [AL1W 0]

/* Is this a real call these days? */
call "_left star thru" dontshow tag left_star_thru
   setup 2x1 1x2 restriction forbidden opposite_sex
      preds "Unknown sex."
         if boyp [AL1W 0]
         if girlp [CR1E 0]

call "double star thru" a1 tag dblstarthru
            visible_fractions
   seq star_thru  []
   seq left_star_thru []

call "_centers double star thru" dontshow tag ctrs_dbl_star_thru
   conc dblstarthru [] nullcall [conc_demand_columns]

call "triple star thru" a1
   seq ctrs_dbl_star_thru []
   seq star_thru []

call "first couple go left, next go right" mainstream
   setup 2x2 1x4 restriction forbidden 2fl_only
      array [AL1S AL0S CR3S CR2S]

call "wheel and deal" mainstream tag wheelanddeal
            left_means_mirror
   setup 1x4 2x2 restriction forbidden couples_only
      preds "???"
         if 1x4_wheel_and_deal [CR1S CR0S AL0S AL1S]   /* 2FL, or beau side of 1FL */
         if always             [0    0    AL3S AL2S]   /* belle side of 1FL */
            alternate_definition [single] a2
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0E AL0E]
         if always [0 AL1E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 restriction forbidden 3x3couples_only
      preds "???"
         if 1x6_wheel_and_deal [CR2S CR1S CR0S AL0S AL1S AL2S]   /* 2FL, or beau side of 1FL */
         if always             [0    0    0    AL5S AL4S AL3S]   /* belle side of 1FL */
            alternate_definition [4x4] c4
   setup 1x8 2x4 restriction forbidden 4x4couples_only
      preds "???"
         if 1x8_wheel_and_deal [CR3S CR2S CR0S CR1S AL0S AL1S AL3S AL2S]   /* 2FL, or beau side of 1FL */
         if always             [0    0    0    0    AL7S AL6S AL4S AL5S]   /* belle side of 1FL */

call "two-faced wheel and deal" dontshow tag 2facedwheelanddeal
   setup 1x4 2x2 restriction forbidden couples_only
      array [CR1S CR0S AL0S AL1S]
            alternate_definition [single] a2
   setup 1x2 1x2 rotate
      array [CR0E AL0E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 restriction forbidden 3x3couples_only
      array [CR2S CR1S CR0S AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 1x8 2x4 restriction forbidden 4x4couples_only
      array [CR3S CR2S CR0S CR1S AL0S AL1S AL3S AL2S]

call "turn and deal" a1 tag turnanddeal
            left_means_mirror
   setup 1x4 2x2 no_cutting_through restriction awkward_centers
      array [CR0S CR1S AL2S AL3S]
            alternate_definition [single] c3x
   setup 1x2 1x2 rotate restriction awkward_centers
      array [CR0E AL1E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 qualifier 3x3couples_only restriction awkward_centers
      array [CR0S CR1S CR2S AL3S AL4S AL5S]
            alternate_definition [4x4] c4
   setup 1x8 2x4 qualifier 4x4couples_only restriction awkward_centers
      array [CR0S CR1S CR3S CR2S AL4S AL5S AL7S AL6S]

call "_natural turn and deal" dontshow tag natturnanddeal
            left_means_mirror
   setup 1x4 2x2 restriction forbidden couples_only
      preds "???"
         if 1x4_wheel_and_deal [CR0S CR1S AL1S AL0S]   /* 2FL, or beau side of 1FL */
         if always             [0    0    AL2S AL3S]   /* belle side of 1FL */
            alternate_definition [single] c3x
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0E AL0E]
         if always [0 AL1E]

call "wheel and spread" plus
            left_means_mirror
   setup 1x4 1x4 restriction forbidden 1fl_only
      array [3S 1S 0S 2S]
   setup 2x3 2x3 restriction forbidden 1fl_only
      array [1S 2S 0S 5S 3S 4S]

call "single wheel" a2 tag single_wheel
            left_means_mirror
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0E AL0E]
         if always [0 AL1E]

call "wheel to a line" c3x tag wheeltoline
            reverse_means_mirror
   setup 2x2 1x4 restriction couples_only
      array [CR2S CR3S AL0S AL1S]
            alternate_definition [single] c3x
   setup 2x1 1x2 rotate
      array [AL0E CR1E]
            alternate_definition [3x3] c4
   setup 2x3 1x6 restriction forbidden 1fl_only
      array [CR3S CR4S CR5S AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 2x4 1x8 restriction forbidden 1fl_only
      array [CR4S CR5S CR7S CR6S AL0S AL1S AL3S AL2S]

call "turn to a line" c2 tag turntoline
            reverse_means_mirror
   setup 2x2 1x4
      array [CR3S CR2S AL1S AL0S]
            alternate_definition [single] c3a
   setup 2x1 1x2 rotate
      array [AL0E CR1E]
            alternate_definition [3x3] c4
   setup 2x3 1x6
      array [CR5S CR4S CR3S AL2S AL1S AL0S]
            alternate_definition [4x4] c4
   setup 2x4 1x8
      array [CR6S CR7S CR5S CR4S AL2S AL3S AL1S AL0S]

call "triple wheel" c3x
            reverse_means_mirror single_is_inherited 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq wheeltoline  [inherit_reverse inherit_single inherit_3x3 inherit_4x4]
   seq wheelanddeal [inherit_left    inherit_single inherit_3x3 inherit_4x4]
   seq wheeltoline  [inherit_reverse inherit_single inherit_3x3 inherit_4x4]

call "triple turn" c4
            reverse_means_mirror single_is_inherited 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq turntoline  [inherit_reverse inherit_single inherit_3x3 inherit_4x4]
   seq turnanddeal [inherit_left    inherit_single inherit_3x3 inherit_4x4]
   seq turntoline  [inherit_reverse inherit_single inherit_3x3 inherit_4x4]

call "zig zag" a2
   setup 2x2 2x2      /* This entry makes it legal from a T-boned 2x2. */
      array [CR0E CR1E AL2W AL3W]
   setup 2x1 1x2
      array [AL0W CR1E]

call "zag zig" a2
   setup 2x2 2x2      /* This entry makes it legal from a T-boned 2x2. */
      array [AL0W AL1W CR2E CR3E]
   setup 2x1 1x2
      array [CR0E AL1W]

call "zig zig" a2
   setup 2x2 2x2      /* This entry makes it legal from a T-boned 2x2. */
      array [CR0E CR1E CR2E CR3E]
   setup 2x1 1x2
      array [CR0E CR1E]

call "zag zag" a2
   setup 2x2 2x2      /* This entry makes it legal from a T-boned 2x2. */
      array [AL0W AL1W AL2W AL3W]
   setup 2x1 1x2
      array [AL0W AL1W]

call "double pass thru" mainstream
            rear_back_from_qtag
   setup 4x1 1x4
      array [ZM3N ZM2N 0 0]

call "reflected double pass thru" c3
            rear_back_from_qtag
   setup 4x1 1x4 rotate
      array [CM3N CM2N 0 0]

call "revert double pass thru" c3
            rear_back_from_qtag
   setup 4x2 2x4 rotate
      array [CM7S CM0S 0 0 0 0 CM1S CM6S]

call "strut @eright@f" c3
            left_means_mirror
   setup 4x2 1x8 rotate
      array [ZM6W CR7E 0 0 0 0 CR4E ZM5W]
            alternate_definition [single] c3
   setup 4x1 1x4 rotate
      array [ZM3W CR2E 0 0]
   setup pmd dmd
      array [ZM3N 0 0 0]
   setup dmd dmd
      array [0 0 0 CR2S]

call "strut right and left" c4
   setup 4x2 1x8 rotate
      array [ZM1W CR7E 0 0 0 0 CR4E ZM2W]
            alternate_definition [single] c4
   setup 4x1 1x4 rotate
      array [ZM1W CR2E 0 0]
   setup pmd dmd
      array [ZM1N 0 0 0]
   setup dmd dmd
      array [0 0 0 CR2S]

call "strut left and right" c4
   setup 4x2 1x8 rotate
      array [ZM6W AL0E 0 0 0 0 AL3E ZM5W]
            alternate_definition [single] c4
   setup 4x1 1x4 rotate
      array [ZM3W AL0E 0 0]
   setup pmd dmd
      array [ZM3N 0 0 0]
   setup dmd dmd
      array [0 0 0 AL0S]

call "pass and roll" a2
            rear_back_from_r_wave left_means_mirror
   setup 4x1 2x2
      array [CR0N 0 0 CM3S]

call "ah so" c1 tag ahso
   setup 1x4 2x2 no_cutting_through qualifier wave_only
      array [CR1S AL3S AL0S CR2S]
   setup 1x4 2x2 no_cutting_through qualifier magic_only
      array [CR1S AL0S AL3S CR2S]

call "_extend 1/2 to 4/4" dontshow tag extend_4
   setup 2x2 1x4 rotate qualifier miniwaves
      array [Z0W Z0W Z1W Z1W]
            alternate_definition [3x3] c3
   setup 3x2 1x6    /* Would like a "real column" qualifier. */
      array [Z5N Z4N Z3N Z3N Z4N Z5N]
            alternate_definition [4x4] c3
   setup 4x2 1x8    /* Would like a "real column" qualifier. */
      array [Z6N Z7N Z5N Z4N Z4N Z5N Z7N Z6N]

call "_extend 1/2 to @a" dontshow tag extend_n
            neednumber
   setup 2x2 dmd rotate nqualifier 1 miniwaves
      /* Yikes!!  We gotta back up! */
      array [Z3W Z1W Z2W Z2W]
   setup 2x2 2x2 restriction wave_only nqualifier 2 none
      array [Z0N Z1N Z2N Z3N]
   setup 1x4 1x4 nqualifier 2 miniwaves
      array [Z0N Z1N Z2N Z3N]
   setup 2x2 dmd rotate nqualifier 3 miniwaves
      array [Z0W Z0W Z1W Z3W]
   setup 2x2 1x4 rotate nqualifier 4 miniwaves
      array [Z0W Z0W Z1W Z1W]
            alternate_definition [3x3] c3
   setup 3x2 2x3 nqualifier 2 none
      array [Z0N Z1N Z2N Z3N Z4N Z5N]
   setup 1x6 1x6 nqualifier 2 none
      array [Z0N Z1N Z2N Z3N Z4N Z5N]
   setup 3x2 1x6 nqualifier 4 none
      array [Z5N Z4N Z3N Z3N Z4N Z5N]
            alternate_definition [4x4] c3
   setup 4x2 2x4 nqualifier 2 none
      array [Z0N Z1N Z2N Z3N Z4N Z5N Z6N Z7N]
   setup 1x8 1x8 nqualifier 2 none
      array [Z0N Z1N Z2N Z3N Z4N Z5N Z6N Z7N]
   setup 4x2 1x8 nqualifier 4 none
      array [Z6N Z7N Z5N Z4N Z4N Z5N Z7N Z6N]

call "1/2 tag" mainstream     /* It's listed by this name in the Callerlab mainstream list. */
            left_means_mirror
   setup 1x4 2x2 no_cutting_through restriction awkward_centers
      array [C0E C1E A2W A3W]
            alternate_definition [3x3] mainstream
   setup 1x6 2x3
      array [C0E C1E C2E A3W A4W A5W]
            alternate_definition [4x4] mainstream
   setup 1x8 2x4
      array [C0E C1E C3E C2E A4W A5W A7W A6W]

call "3/4 tag the line" plus  /* It's listed by this name in the Callerlab plus list. */
            left_means_mirror
   setup 1x4 dmd restriction awkward_centers
      array [C1E C2E A3W A0W]

/* The following 2 calls work with "flip", "tag", and "vertical tag". */

/* Actually, the 3/4 fraction is plus, but we are in violation
   of such numerical niceties in many places. */
call "@w the line @a" mainstream
            neednumber left_means_mirror singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited
   seq tagnullcall1 [inherit_left inherit_singlefile inherit_3x3 inherit_4x4]
   seq extend_n [inherit_3x3 inherit_4x4]

call "@w the line" mainstream
            left_means_mirror singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited
   seq tagnullcall1 [inherit_left inherit_singlefile inherit_3x3 inherit_4x4]
   seq extend_4 [inherit_3x3 inherit_4x4]

/* And the following 2 calls work with "tag the star", "snap the tag", and "loop and tag". */

call "@x @a" c3      /* How's that for a call name? */
            neednumber left_means_mirror singlefile_is_inherited
   seq tagnullcall2 [inherit_left inherit_singlefile]
   seq extend_n []

call "@x" c3         /* Or this? */
            left_means_mirror singlefile_is_inherited
   seq tagnullcall2 [inherit_left inherit_singlefile]
   seq extend_4 []

/* And the following 2 calls work with "chase". */

call "@y the tag @a" c1
            neednumber left_means_mirror singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited
   seq tagnullcall3 [inherit_left inherit_singlefile inherit_3x3 inherit_4x4]
   seq extend_n [inherit_3x3 inherit_4x4]

call "@y the tag" c1
            left_means_mirror singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited
   seq tagnullcall3 [inherit_left inherit_singlefile inherit_3x3 inherit_4x4]
   seq extend_4 [inherit_3x3 inherit_4x4]

call "_tag the line" dontshow tag tagtheline
            left_means_mirror
   setup 1x4 1x4 restriction awkward_centers
      array [C3E C2E A1W A0W]

call "flip the line @a" c1
            neednumber
   setup 1x4 dmd restriction forbidden wave_only nqualifier 1 none
      array [1E 0E 1W 2W]
   setup 1x4 2x2 restriction forbidden wave_only nqualifier 2 none
      array [C1E A3E A0W C2W]
   setup 1x4 dmd restriction forbidden wave_only nqualifier 3 none
      array [2E 3E 0W 3W]
   setup 1x4 1x4 restriction forbidden wave_only nqualifier 4 none
      array [2E 3E 0W 1W]
            alternate_definition [cross] c3
   setup 1x4 dmd restriction forbidden 2fl_only nqualifier 1 none
      array [1E 2W 1W 0E]
   setup 1x4 2x2 restriction forbidden 2fl_only nqualifier 2 none
      array [C1E C2W A0W A3E]
   setup 1x4 dmd restriction forbidden 2fl_only nqualifier 3 none
      array [2E 3W 0W 3E]
   setup 1x4 1x4 restriction forbidden 2fl_only nqualifier 4 none
      array [2E 1W 0W 3E]

call "flip the line" c1   /* We allow it under this simple name, without "full". */
   setup 1x4 1x4 restriction forbidden wave_only
      array [2E 3E 0W 1W]
            alternate_definition [cross] c3
   setup 1x4 1x4 restriction forbidden 2fl_only
      array [2E 1W 0W 3E]

call "vertical 0 tag" dontshow tag vertical0tag
            left_means_mirror
   setup 2x2 1x4 rotate restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [0E 1E 3W 2W]
         if vert2 [0 0E 0 3W]

call "vertical @0" c2
            dont_use_in_resolve left_means_mirror
   seq vertical0tag [inherit_left]
   seq nullcall [mandatory_anycall]

call "vertical 1/4 tag" c1
            left_means_mirror
   setup 2x2 dmd rotate restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C0E A1E Z3W Z2W]
         if vert2 [0 A0E 0 Z3W]

call "vertical 1/2 tag" c1 tag verticalhalftag
            left_means_mirror
   setup 2x2 2x2 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C1S A2S Z0N Z3N]
         if vert2 [0 A1S 0 Z0N]
            alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [ZM0W 1E]

call "vertical 3/4 tag" c1
            left_means_mirror
   setup 2x2 dmd rotate restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C1E A2E Z0W Z3W]
         if vert2 [0 A1E 0 Z0W]

call "vertical tag" c1 tag verticaltag
            left_means_mirror
   setup 2x2 1x4 rotate restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C3E A2E Z0W Z1W]
         if vert2 [0 A3E 0 Z0W]
            alternate_definition [single] c4
   setup 2x1 1x2
      array [ZM1N 0S]

/* This call does the "vertical" the normal way, and only
   does the half-tag part passing left shoulders.  It is
   not the same as "left vertical half tag", which is a complete
   mirror image call, and is available above.  We might like
   to have a call that does a "left vertical" followed by a
   right-shoulder pass, but the nomenclature is very murky, and
   we can't really implement it correctly until the "left pitch right"
   issue is resolved.  So we don't allow the "left" modifier on this
   call.  Furthermore, we mark it c2, since it is esoteric.  This is
   really only useful for "divide the sea", for which its properties
   are just right. */
call "vertical left 1/2 tag" c2 tag verticallefthalftag
            dont_use_in_resolve
   setup 2x2 2x2 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [C0S A3S Z1N Z2N]
         if vert2 [0 A0S 0 Z1N]
             alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [ZM1W 0E]

call "vertical turn and deal" c3x
            left_means_mirror
   setup 2x2 2x2 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if vert1 [CR1W AL2E ZM0N ZM3N]
         if vert2 [0 AL1E 0 ZM0N]

/* ***** YIKES!!!!!  This needs to be taken out for sdtty (since you type
   the call naturally) but in for sd (since otherwise there are too many
   mouse clicks.)
call "chase the @a tag" c1
            left_means_mirror neednumber
   setup 2x2 dmd rotate nqualifier 1 none
      array [C0E C1E 0 0]
   setup 2x2 2x2 nqualifier 2 none
      array [C1S C2S 0 0]
   setup 2x2 dmd rotate nqualifier 3 none
      array [C1E C2E 0 0]
   setup 2x2 1x4 rotate nqualifier 4 none
      array [C3E C2E 0 0]

call "chase the tag" c1
            left_means_mirror
   setup 2x2 1x4 rotate
      array [C3E C2E 0 0]

call "tag the star @a" c4a
            left_means_mirror neednumber
   setup 2x2 dmd rotate restriction forbidden not_tboned nqualifier 1 none
      array [0 0 AC0E C1E]
   setup 2x2 2x2        restriction           not_tboned nqualifier 2 none
      array [0 0 AC1S C2S]
   setup 2x2 dmd rotate restriction forbidden not_tboned nqualifier 3 none
      array [0 0 AC1E C2E]
   setup 2x2 1x4 rotate restriction forbidden not_tboned nqualifier 4 none
      array [0 0 AC3E C2E]
            alternate_definition [singlefile] c4
   setup 4x1 dmd nqualifier 1 none
      array [AC2S C3S 0 0]
   setup 4x1 2x2 nqualifier 2 none
      array [AC2S C3S 0 0]
   setup 4x1 dmd nqualifier 3 none
      array [AC3S C0S 0 0]
   setup 4x1 1x4 nqualifier 4 none
      array [AC1S C0S 0 0]
*/

/* We prefer the phrase "loop and tag N/4" or "loop and tag" to the name given below,
   and those phrases can be constructed with the general mechanisms we provide, but
   this name is provided so we can do 3x3 and 4x4 versions.  We have marked this
   "dont_use_in_resolve" so we won't get this less desirable word order.  Sorry. */

call "loop and @a tag" c3
            dont_use_in_resolve left_means_mirror neednumber
   setup 2x2 dmd        restriction peelable_box nqualifier 1 none
      array [1E 3W 2W 0E]
   setup 2x2 2x2        restriction peelable_box nqualifier 2 none
      array [1E 3W 2W 0E]
   setup 2x2 dmd        restriction peelable_box nqualifier 3 none
      array [2E 0W 3W 1E]
   setup 2x2 1x4        restriction peelable_box nqualifier 4 none
      array [2E 0W 1W 3E]
            alternate_definition [cross] c3
   setup 2x2 dmd        restriction peelable_box nqualifier 1 none
      array [3W 1E 0E 2W]
   setup 2x2 2x2        restriction peelable_box nqualifier 2 none
      array [3W 1E 0E 2W]
   setup 2x2 dmd        restriction peelable_box nqualifier 3 none
      array [0W 2E 1E 3W]
   setup 2x2 1x4        restriction peelable_box nqualifier 4 none
      array [0W 2E 3E 1W]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate restriction peelable_box nqualifier 2 none
      array [0N 1N 2N 5S 4S 3S]
   setup 3x2 1x6 rotate restriction peelable_box nqualifier 4 none
      array [5N 4N 3N 0S 1S 2S]
            alternate_definition [cross 3x3] c4
   setup 3x2 2x3 rotate restriction peelable_box nqualifier 2 none
      array [3S 4S 5S 2N 1N 0N]
   setup 3x2 1x6 rotate restriction peelable_box nqualifier 4 none
      array [2S 1S 0S 3N 4N 5N]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate restriction peelable_box nqualifier 2 none
      array [0N 1N 2N 3N 7S 6S 5S 4S]
   setup 4x2 1x8 rotate restriction peelable_box nqualifier 4 none
      array [6N 7N 5N 4N 0S 1S 3S 2S]
            alternate_definition [cross 4x4] c4
   setup 4x2 2x4 rotate restriction peelable_box nqualifier 2 none
      array [4S 5S 6S 7S 3N 2N 1N 0N]
   setup 4x2 1x8 rotate restriction peelable_box nqualifier 4 none
      array [2S 3S 1S 0S 4N 5N 7N 6N]

/* This is the general "[magic][cross] invert the column N/4", including
   4/4, which prints as "full".  If you don't want to say "invert the
   column full", you can use the call below.
   The 1/2 versions of these are also tagging base calls, listed at
   the start of the database. */

call "invert the column @a" c2
            neednumber
   setup 4x2 3x4 rotate restriction wave_only nqualifier 1 none
      array [ZM8W ZM11W ZM1W AL10E CR4E ZM2W ZM5W ZM7W]
   setup 4x2 2x4 rotate restriction wave_only nqualifier 2 none
      array [ZM6W ZM1W AL0E AM7E CM4E CR3E ZM2W ZM5W]
   setup 4x2 3x4 rotate restriction wave_only nqualifier 3 none
      array [ZM11W AL0E AM10E AM9E CM6E CM4E CR3E ZM5W]
   setup 4x2 2x4 restriction wave_only nqualifier 4 none
      array [AL3S AM2S AM1S AM0S CM7S CM6S CM5S CR4S]
            alternate_definition [cross] c2
   setup 4x2 3x4 rotate restriction wave_only nqualifier 1 none
      array [ZM8W ZM11W ZM1W CR4E AL10E ZM2W ZM5W ZM7W]
   setup 4x2 2x4 rotate restriction wave_only nqualifier 2 none
      array [ZM6W ZM1W CR3E CM4E AM7E AL0E ZM2W ZM5W]
   setup 4x2 3x4 rotate restriction wave_only nqualifier 3 none
      array [ZM11W CR3E CM4E CM6E AM9E AM10E AL0E ZM5W]
   setup 4x2 2x4 restriction wave_only nqualifier 4 none
      array [CR4S CM5S CM6S CM7S AM0S AM1S AM2S AL3S]
            alternate_definition [magic] c2
   setup 4x2 3x4 rotate restriction magic_only nqualifier 1 none
      array [ZM8W ZM11W ZM2W AL10E CR4E ZM1W ZM5W ZM7W]
   setup 4x2 2x4 rotate restriction magic_only nqualifier 2 none
      array [ZM5W ZM1W CR3E AM7E CM4E AL0E ZM2W ZM6W]
   setup 4x2 3x4 rotate restriction magic_only nqualifier 3 none
      array [ZM5W CR3E CM4E AM9E CM6E AM10E AL0E ZM11W]
   setup 4x2 2x4 restriction magic_only nqualifier 4 none
      array [AL3S CM5S CM6S AM0S CM7S AM1S AM2S CR4S]
            alternate_definition [magic cross] c2
   setup 4x2 3x4 rotate restriction magic_only nqualifier 1 none
      array [ZM8W ZM11W ZM2W CR4E AL10E ZM1W ZM5W ZM7W]
   setup 4x2 2x4 rotate restriction magic_only nqualifier 2 none
      array [ZM5W ZM1W AL0E CM4E AM7E CR3E ZM2W ZM6W]
   setup 4x2 3x4 rotate restriction magic_only nqualifier 3 none
      array [ZM5W AL0E AM10E CM6E AM9E CM4E CR3E ZM11W]
   setup 4x2 2x4 restriction magic_only nqualifier 4 none
      array [CR4S AM2S AM1S CM7S AM0S CM6S CM5S AL3S]

/* This is just plain "invert the column" (all the way, of course).
   Unlike the above "N/4" stuff, we allow this from a 3x2.
   Fractionalized inverts from a 3x2 are below.  They have to be done
   specially, since we don't have support for general "N/3" numbers. */

call "invert the column" c2
   setup 4x2 2x4 restriction wave_only
      array [AL3S AM2S AM1S AM0S CM7S CM6S CM5S CR4S]
   setup 3x2 2x3 restriction wave_only
      array [L2S L1S L0S R5S R4S R3S]
            alternate_definition [cross] c2
   setup 4x2 2x4 restriction wave_only
      array [CR4S CM5S CM6S CM7S AM0S AM1S AM2S AL3S]
   setup 3x2 2x3 restriction wave_only
      array [R3S R4S R5S L0S L1S L2S]
/* **** need to put in 3x2 versions */
            alternate_definition [magic] c2
   setup 4x2 2x4 restriction magic_only
      array [AL3S CM5S CM6S AM0S CM7S AM1S AM2S CR4S]
            alternate_definition [magic cross] c2
   setup 4x2 2x4 restriction magic_only
      array [CR4S AM2S AM1S CM7S AM0S CM6S CM5S AL3S]

/* Here are the fractionalized inverts from columns of 6, as promised. */

call "invert the column 1/3" c2
   setup 3x2 short6 restriction wave_only
      array [M0N M2N L1S R4S M3N M5N]
            alternate_definition [cross] c2
   setup 3x2 short6 restriction wave_only
      array [M0N M2N R4S L1S M3N M5N]

call "invert the column 2/3" c2 tag invert_2_3
   setup 3x2 bone6 rotate restriction wave_only
      array [M5W L0E L4E R3E R1E M2W]
            alternate_definition [cross] c2
   setup 3x2 bone6 rotate restriction wave_only
      array [M5W R1E R3E L4E L0E M2W]

/* The call "continue to invert" goes one step from 1/4 -> 1/2 -> 3/4 -> full.
   Note that the word "cross" goes into an interesting place in this.
   The word "magic" ought to also, but we can't be bothered.
   The 1/4 -> 1/2 version of this is also a tagging base call, listed at
   the start of the database. */

call "continue to@M@C invert" c4
   setup qtag 2x4 restriction wave_only       /* 1/4 -> 1/2 */
      array [AL0S CR3S ZM3N ZM2N ZM5N ZM6N ZM0N ZM1N]
   setup 2x4 3x4 restriction wave_only        /* 1/2 -> 3/4 */
      array [ZM0N AL0S CR3S ZM3N ZM4N ZM5N ZM11N ZM10N]
   setup 3x4 2x4 rotate restriction wave_only /* 3/4 -> full */
      array [ZM7W 0 0 ZM0W ZM1W CR0E ZM2W 0 0 ZM5W ZM6W AL7E]
            alternate_definition [cross] c4
   setup qtag 2x4 restriction 2fl_only        /* 1/4 -> 1/2 */
      array [CR3S AL0S ZM3N ZM2N ZM5N ZM6N ZM0N ZM1N]
   setup 2x4 3x4 restriction 2fl_only         /* 1/2 -> 3/4 */
      array [ZM0N CR3S AL0S ZM3N ZM4N ZM5N ZM11N ZM10N]
   setup 3x4 2x4 rotate restriction 2fl_only  /* 3/4 -> full */
      array [ZM7W 0 0 ZM0W ZM1W AL7E ZM2W 0 0 ZM5W ZM6W CR0E]
            alternate_definition [magic] c4
   setup qtag 2x4 restriction 2fl_only        /* 1/4 -> 1/2 */
      array [AL0S CR3S ZM3N ZM2N ZM6N ZM5N ZM0N ZM1N]
   setup 2x4 3x4 restriction 2fl_only         /* 1/2 -> 3/4 */
      array [ZM0N CR3S AL0S ZM3N ZM4N ZM5N ZM11N ZM10N]
   setup 3x4 2x4 rotate restriction 2fl_only  /* 3/4 -> full */
      array [ZM7W 0 0 ZM0W ZM1W AL7E ZM2W 0 0 ZM5W ZM6W CR0E]
            alternate_definition [magic cross] c4
   setup qtag 2x4 restriction wave_only       /* 1/4 -> 1/2 */
      array [CR3S AL0S ZM3N ZM2N ZM6N ZM5N ZM0N ZM1N]
   setup 2x4 3x4 restriction wave_only        /* 1/2 -> 3/4 */
      array [ZM0N AL0S CR3S ZM3N ZM4N ZM5N ZM11N ZM10N]
   setup 3x4 2x4 rotate restriction wave_only /* 3/4 -> full */
      array [ZM7W 0 0 ZM0W ZM1W CR0E ZM2W 0 0 ZM5W ZM6W AL7E]

call "track @9" c3x
            left_means_mirror neednumber
   setup 4x2 qtag rotate nqualifier 1 none
      array [0 0 C1E C2E A7E A0E 0 0]
   setup 4x2 2x4 rotate nqualifier 2 none
      array [0 0 C3E C4E A6E A1E 0 0]
   setup 4x2 qtag rotate nqualifier 3 none
      array [0 0 C2E C4E A5E A7E 0 0]
   setup 4x2 2x4 nqualifier 4 none
      array [0 0 C6S C7S C0S C1S 0 0]

/* This one listed separately, because it is legal at plus. */
call "track 2" plus
            left_means_mirror yield_if_ambiguous
   setup 4x2 2x4 rotate
      array [0 0 C3E C4E A6E A1E 0 0]

/* And this one, because the rest of the program abhors zero. */
call "track 0" c3x
            left_means_mirror yield_if_ambiguous
   setup 4x2 2x4
      array [0 0 C4S C5S A2S A3S 0 0]

call "_revert" dontshow tag revert
   setup 1x2 1x2 rotate
      preds "Need to be in miniwave or line of 4."
         if lines_miniwave [R1S L1N]

call "_reflect" dontshow tag reflect
   setup 2x2 2x2
      array [R1E L0W L1W R0E]

call "peel the deal" c4a
   setup 2x2 1x4 restriction peelable_box
      array [AL1E CR3W CR2W AL0E]
            alternate_definition [single] c4
   setup 1x2 1x2
      array [AL0E CR1W]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL0N AL1N AL2N CR5S CR4S CR3S]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL0N AL1N AL3N AL2N CR6S CR7S CR5S CR4S]

call "trail the deal" c4a
   setup 2x2 1x4 restriction peelable_box
      array [CR3W AL1E AL0E CR2W]
            alternate_definition [single] c4
   setup 1x2 1x2
      array [CR1W AL0E]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR3S CR4S CR5S AL2N AL1N AL0N]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR4S CR5S CR7S CR6S AL2N AL3N AL1N AL0N]

call "peel and trail the deal" c4
   setup 2x2 1x4 restriction peelable_box
      array [AL1E CR3W AL0E CR2W]
            alternate_definition [1x2] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR3S CR4S AL2N CR5S AL1N AL0N]
            alternate_definition [2x1] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR3S AL1N AL2N CR5S CR4S AL0N]
            alternate_definition [1x3] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR4S CR5S CR7S AL2N CR6S AL3N AL1N AL0N]
            alternate_definition [3x1] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR4S AL1N AL3N AL2N CR6S CR7S CR5S AL0N]
            alternate_definition [2x2] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR4S CR5S AL3N AL2N CR6S CR7S AL1N AL0N]

call "trail and peel the deal" c4
   setup 2x2 1x4 restriction peelable_box
      array [CR3W AL1E CR2W AL0E]
            alternate_definition [1x2] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL0N AL1N CR5S AL2N CR4S CR3S]
            alternate_definition [2x1] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL0N CR4S CR5S AL2N AL1N CR3S]
            alternate_definition [1x3] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL0N AL1N AL3N CR6S AL2N CR7S CR5S CR4S]
            alternate_definition [3x1] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL0N CR5S CR7S CR6S AL2N AL3N AL1N CR4S]
            alternate_definition [2x2] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL0N AL1N CR7S CR6S AL2N AL3N CR5S CR4S]

call "crossfire" plus
            parallel_conc_end
   /* This is a qualifier rather than a restriction, because the real definition
      from lines back-to-back has them step to a wave in the center, which this
      definition doesn't do.  So, saying "do your part" isn't good enough.  We
      simply make it illegal. */
   setup 1x4 2x2 qualifier 2fl_only
      array [C1S C2S A0S A3S]
   setup dmd 2x2
      array [C1S 0 A0S 0]
   setup pmd 2x2
      array [0 C3S 0 A0S]
            alternate_definition [yoyo] c4
   setup 1x4 2x2 qualifier wave_only
      array [C1S C3W A0S A2E]
   setup dmd 2x2
      array [C1S 0 A0S 0]
   setup pmd 2x2
      array [0 C0W 0 A3E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3_2fl_only
      /* We say that roll is undefined.  The roll rules come from the definition
         in terms of cross fold and extend.  The 3x3 and 4x4 versions are unclear
         on these points. */
      array [C0E C1E C2E A5E A4E A3E]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4_2fl_only
      array [C0E C1E C3E C2E A7E A6E A4E A5E]

call "chain down the line" mainstream
            parallel_conc_end
   setup 1x4 2x2
      array [AL0E CCAL1W AAL2W 0]

call "cross sashay" c4
   setup 1x4 2x2 restriction wave_only
      array [CR1S ZM1N AL0S ZM0N]
   setup dmd 2x2
      array [CR1S 0 AL0S 0]
   setup pmd 2x2
      array [0 ZM2N 0 ZM1N]

call "swap the wave" c2
            reverse_means_mirror
   setup 1x4 2x2 restriction wave_only
      array [2S 2S 1N 1N]

call "wave recycle" dontshow tag waverecycle
            diamond_is_legal
   setup 1x4 2x2 no_cutting_through qualifier wave_only
      array [CR1S AL3N AL0S CR2N]
   setup 1x4 2x2 no_cutting_through qualifier magic_only
      array [CR1S AL0N AL3S CR2N]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction 2fl_only
      array [CR1S CR2N AL0S AL3N]
            alternate_definition [diamond] c4
   setup dmd 2x2
      array [CR1S 0 AL0S 0]
   setup pmd 2x2
      array [0 CR2W 0 AL1E]

call "hammerlane" c4a
            reverse_means_mirror
   setup 2x2 1x4
      array [0 0 ZM0N CR3S]

call "split recycle" c1 tag splitrecycle
            reverse_means_mirror diamond_is_legal
   setup 2x2 1x4 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if x22_miniwave [CR2S AL0S AL3S CR1S]
         if x22_couple   [0    0    ZM0N CR1S]
            alternate_definition [singlefile] c3a
   setup 4x1 1x4 rotate
      array [ZM0W CR1E 0 0]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction wave_only
      array [CR1E CR5E CR3E AL0E AL2E AL4E]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction wave_only
      array [CR1E CR2E CR7E CR4E AL0E AL3E AL6E AL5E]
            alternate_definition [cross] c3
   setup 2x2 1x4 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if x22_miniwave [CR2S AL0S AL1S CR3S]
         if x22_couple   [0    0    ZM0N CR3S]
            alternate_definition [diamond] c4
   setup 2x2 dmd
      array [0 0 ZM0N CR1E]

call "recycle" mainstream tag recycle   /* **** Actually, it's a2 for the facing-couples version */
            reverse_means_mirror        /* **** Actually, only appropriate for facing-couples version.  Sigh. */
            diamond_is_legal
   setup 1x4 2x2 no_cutting_through qualifier wave_only
      array [CR1S AL3N AL0S CR2N]
   setup 1x4 2x2 no_cutting_through qualifier magic_only
      array [CR1S AL0N AL3S CR2N]
   setup 2x2 1x4 no_cutting_through    /* Shouldn't need a qualifier here -- it should give preference to the 1x4 splitting ?? */
      preds "Can't do this with phantoms or T-boned people."
         if x22_miniwave [CR2S AL0S AL3S CR1S]
         if x22_couple [0 0 ZM0N CR1S]
            alternate_definition [singlefile] c3a
   setup 4x1 1x4 rotate
      array [ZM0W CR1E 0 0]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [CR1S CR2N AL0S AL3N]
   setup 2x2 1x4 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if x22_miniwave [CR2S AL0S AL1S CR3S]
         if x22_couple   [0    0    ZM0N CR3S]
            alternate_definition [diamond] c4
   setup dmd 2x2
      array [CR1S 0 AL0S 0]
   setup pmd 2x2
      array [0 CR2W 0 AL1E]
   setup 2x2 dmd
      array [0 0 ZM0N CR1E]

call "centers fold" dontshow tag ctrsfold
   setup 1x4 2x2 restriction forbidden wave_only
      array [ZM0N AL0S ZM1N CR1S]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [ZM0N CR1S ZM1N AL0S]

call "recycle (by parts)" c1
            visible_fractions cross_is_inherited
   seq ctrsfold [inherit_cross]
   seq boxctrrot []
   seq quarterin []   /* Yes, it's quarter in, not roll.  Callerlab C1 definitions, page 5. */

call "all 8 recycle" c1
            reverse_means_mirror singlefile_is_inherited cross_is_inherited diamond_is_legal
   crossconc splitrecycle [conc_demand_columns inherit_reverse inherit_singlefile inherit_cross inherit_diamond]
             waverecycle [inherit_cross inherit_diamond suppress_elongation_warnings]

call "2/3 recycle" c1 tag 23recycle
   setup 1x4 2x2 restriction forbidden wave_only
      array [CR1E AL3E AL0W CR2W]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [CR1E CR2W AL0W AL3E]

call "_slither if cross" dontshow tag slither_if_cross
   setup 1x4 1x4
      array [ZM0N ZM1N ZM2N ZM3N]
            alternate_definition [cross] c4
   setup 1x4 1x4
      array [ZM0N ZM3N ZM2N ZM1N]

call "_natural vertical 1/2 tag" dontshow tag natural_vertical_half_tag
   setup 2x2 2x2 qualifier right_wave
      array [CR1S 0 0 ZM0N]
   setup 2x2 2x2 qualifier left_wave
      array [0 AL0S ZM1N 0]
   setup 2x2 2x2 restriction not_tboned
      preds "???"
         if x22_facing_someone      [CR1S AL1S ZM0N ZM0N]
         if x22_tandem_with_someone [CR1S AL0S ZM1N ZM0N]
         if always                  [CR1S    0    0 ZM0N]

call "linear cycle" plus
            cross_is_inherited
   seq slither_if_cross [inherit_cross]
   seq hinge []
   seq natural_vertical_half_tag []
   seq coupleup []

/*
call "cycle and wheel" a1 tag cyclewheel
   setup 1x4 2x2
      preds "Can't do this call."
         if lines_miniwave [R1S L3N L0S R2N]
         if lines_couple [R1S R0S L0S L1S]
*/

call "cycle and wheel" a1 tag cyclewheel
   setup 1x4 2x2
      preds "Can't do this call."
         if cycle_and_wheel_1 [CR1S CR0S 0    CR2N]
         if cycle_and_wheel_2 [0    AL3N AL3S AL2S]
         if always            [0    AL0N AL0S AL1S]


/* ***** Need to get rid of these, by making the "cross" word go into the right place. */
call "cross cycle" c3
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [CR1S CR2N AL0S AL3N]
   setup 2x2 1x4 restriction not_tboned
      preds "Can't do this with phantoms or T-boned people."
         if x22_miniwave [CR2S AL0S AL1S CR3S]
         if x22_couple   [0    0    ZM0N CR3S]

call "2/3 cross cycle" c3
   setup 1x4 2x2 restriction 2fl_only
      array [R1E R2W L0W L3E]



/* These aren't right.  They don't enforce the restriction that the centers face
   the same way if the setup isn't a wave.  Will fix, I guess. */

call "explode" plus tag explode
            parallel_conc_end
   /* If they are consistent with miniwaves, do it that way, even if phantoms.
      Not happy about it, but it seems to be the way people construe this call. */
   setup 1x4 2x2 qualifier miniwaves
      array [CR0E CR0E AL1W AL1W]
   setup 1x4 2x2
      preds "Can't explode from this line."
         if lines_miniwave [CR0E CR0E AL1W AL1W]
         if lines_couple   [CR3E CR0E AL2W AL1W]

call "explode the line" plus tag explodeline
            parallel_conc_end
   /* See above. */
   setup 1x4 2x2 qualifier miniwaves
      array [C1E C1E A0W A0W]
   setup 1x4 2x2
      preds "Can't explode from this line."
         if lines_miniwave [C1E C1E A0W A0W]
         if lines_couple   [C2E C1E A3W A0W]

call "explode the wave" plus
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden wave_only
      array [C1E C1E A0W A0W]

/* ***** bug!!!!! tried to implement reverse explode with "reverse" alternate definition, didn't work. */
call "reverse explode" c1
   /* not really right -- should allow 1FL */
            parallel_conc_end
   setup 1x4 2x2 restriction wave_only
      preds "Can't explode from this line."
         if lines_miniwave [L0W L0W R1E R1E]
         if lines_couple [L0W L3W R1E R2E]

call "explode the diamond" c3
   conc explodeline [] coupleup [conc_demand_lines conc_force_lines]

call "about" c4 tag about
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden wave_only
      array [CR0E CR0E AL1W AL1W]

call "swing about" c4
   /* This is listed in Burleson and Galburt (6th edition) as starting
      with a swing thru, not a swing/slip.  Galburt, in particular, is
      sufficiently literate on this distinction (see their discussion
      of swing-o-late) that this could not be an oversight.  Now we
      all know that slip-swing-about would flow badly, so it follows
      that any decent caller, from a left-handed wave, would want a
      left swing thru.  We ENFORCE this by requiring the user to say
      "left swing about" if the wave is left-handed.  This is the
      "principle of maximum conservatism" that is used in many places
      in this database. */
            step_to_wave left_means_mirror visible_fractions
   seq right_swing [inherit_left]
   seq slip []
   seq about []

/* quarter about and three quarter about */

call "@B about" c4
   /* This is similarly a right-hand-unless-the-caller-says-left call.  Note its
      grammatical similarity to the other calls that have the same property:
      quarter thru, quarter cross, and quarter mix. */
            step_to_wave left_means_mirror neednumber visible_fractions
   seq odd_frac_by_right_for_about [inherit_left]
   seq slip []
   seq about []

call "triple cast" c4a
            take_right_hands
   setup 1x8 2x4 rotate
      array [L4N R5S M4S L5N R3S L2N M3N R2S]
   setup ptpd qtag
      array [L5E 0 M5W 0 R4W 0 M4E 0]
   setup pptpd qtag
      array [0 R6W 0 L6E 0 L3E 0 R3W]

call "split cast" c4a
            left_means_mirror
   conc cast_off_12 [] hinge_then_trade [inherit_left]

call "_change the web 1" dontshow tag change_web_1
            fudge_to_q_tag
   /* We don't support any stability for this.  How the ends turn
      to make the stars, or whatever it is that they do, is too fudgy. */
   setup qtag qtag rotate qualifier dmd_ctrs_rh
      array [6N 0E  0 1E 2S 4W 7S  0]
   setup qtag qtag rotate qualifier dmd_ctrs_lh
      array [5E 6S 7N  0 1W 2N  0 4E]

call "_change the web 3" dontshow tag change_web_3
   setup qtag qtag rotate
      array [0 0 0S 3N 0 0 5N 3S]
   setup pqtag qtag rotate
      array [6W 0E 0 0 1E 2W 0 0]

call "change the web" c4
            fudge_to_q_tag
   seq change_web_1 []
   seq turnstar1 [allow_forced_mod]
   seq fudge_to_parallel_diamonds []
   seq change_web_3 []

call "_spin the web 1" dontshow tag spin_web_1
            fudge_to_q_tag
   setup qtag dhrglass rotate qualifier dmd_ctrs_rh
      array [5W 0E  0 3E 1E 4W 6S  0]
   setup qtag dhrglass rotate qualifier dmd_ctrs_lh
      array [5E 0W 6N  0 1W 4E  0 7E]                  

call "_spin the web 2" dontshow tag spin_web_2
   conc2_6 nullcall [] turnstar1 [allow_forced_mod]

call "_spin the web 3" dontshow tag spin_web_3
   setup dhrglass qtag rotate
      array [ 0  0 3N  0  0  0 3S  0]
   setup pdhrglass qtag rotate
      array [5W 0E  0 6W 1E 4W  0 2W]

call "spin the web" c4
            fudge_to_q_tag
   seq spin_web_1 []
   seq spin_web_2 []
   seq spin_web_3 []

call "trim the web" c4
   setup bone bone
      array [0 0 AL3S CCAL1W 0 0 CR7S AACR0E]
   setup pbone bone
      preds "Can't tell which way to turn the star."
      /* Actually, if we tried harder, we might be able to. */
         if q_tag_front  [L6W  0 0 0 0 R6E 0 0]
         if q_line_back  [L6W  0 0 0 0 R6E 0 0]
         if q_tag_back   [CR5N 0 0 0 0 AL0N 0 0]
         if q_line_front [CR5N 0 0 0 0 AL0N 0 0]

call "cross and divide" c4a
            parallel_conc_end
   setup 1x4 2x2
      preds "???"
         if x14_once_rem_miniwave [0W 1E 1E 0W]
         if x14_once_rem_couple [3W 1E 2E 0W]
         if always [0 1E 0 0W]

call "Z axle" c3
            split_large_setups
   setup 3x2 1x4 rotate qualifier true_Z_cw
      array [0 AL0E L1E   0 CR2E 0]
   setup 3x2 1x4 rotate qualifier true_Z_ccw
      array [0 AL0E   0 R3E CR2E 0]

call "swing and cross" c4           /* Ugh!  - J.E.Brosius */
            step_to_wave left_means_touch_or_check grand_is_inherited visible_fractions
   seq armturn_34 []
   seq and_cross [inherit_grand]

call "step and@C fold" c1 tag stepnfold
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden diamond_like
      array [CR0S ZM0N AL1S ZM1N]
   setup dmd 2x2 restriction forbidden diamond_like
      array [CR0S 0 AL1S 0]
   setup pmd 2x2 restriction forbidden diamond_like
      array [0 ZM1N 0 ZM2N]
            alternate_definition [cross] c3
   setup 1x4 2x2 restriction forbidden diamond_like
      array [CR1S ZM0N AL0S ZM1N]
   setup dmd 2x2 restriction forbidden diamond_like
      array [CR1S 0 AL0S 0]
   setup pmd 2x2 restriction forbidden diamond_like
      array [0 ZM1N 0 ZM2N]
            /* Need this for interlocked little/plenty/rally.
               Actually, interlocked rally uses the call below,
               so that the level will be C3B, while interlocked
               little and plenty are C3A. */
            alternate_definition [interlocked] c3a
   setup 1x4 2x2 restriction forbidden diamond_like
      array [CR1S ZM0N AL0S ZM1N]
   setup dmd 2x2 restriction forbidden diamond_like
      array [CR1S 0 AL0S 0]
   setup pmd 2x2 restriction forbidden diamond_like
      array [0 ZM1N 0 ZM2N]

call "_step and fold with c3b interlock" dontshow tag stepnfold_c3b_intlk
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden diamond_like
      array [CR0S ZM0N AL1S ZM1N]
   setup dmd 2x2 restriction forbidden diamond_like
      array [CR0S 0 AL1S 0]
   setup pmd 2x2 restriction forbidden diamond_like
      array [0 ZM1N 0 ZM2N]
            alternate_definition [interlocked] c3
   setup 1x4 2x2 restriction forbidden diamond_like
      array [CR1S ZM0N AL0S ZM1N]
   setup dmd 2x2 restriction forbidden diamond_like
      array [CR1S 0 AL0S 0]
   setup pmd 2x2 restriction forbidden diamond_like
      array [0 ZM1N 0 ZM2N]

call "@v back to a wave" c1
            left_means_mirror singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left inherit_singlefile inherit_3x3 inherit_4x4]
   seq boxyscootback [inherit_3x3 inherit_4x4]

/* We leave this one in because it is a genuine call without the "back to a wave" words. */
/* In fact, it could be argued that "flip back to a wave" is not only archaic, but it is
   a different call, since it is the "to a wave" variant of a scooting call. */
call "flip back" c1
            first_part_visible cross_is_inherited
   seq half_flip [inherit_cross]
   seq boxyscootback []

call "@v back and dodge" c4
            left_means_mirror first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scootndodge []

call "@v and scatter" c3
            left_means_mirror first_part_visible
   seq tagnullcall0 [inherit_left]
   seq fudgyscatscoot []    /* Note that we refuse to pass "yoyo". */

call "@v chain thru" c3a
            left_means_mirror first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scootchainthru []

call "@v chain thru and dodge" c4
            left_means_mirror first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scootchainthrundodge []

call "@v chain thru and scatter" c4
            left_means_mirror first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scatscootchainthru []

call "touch by @b X @b" c3a
            left_means_mirror need_two_numbers
   singlecrossconc lft_touch_n_4 [inherit_left shift_one_number] lft_touch_n_4 [inherit_left]

call "_others hinge" dontshow tag othershinge
   conc_others hinge [] nullcall []

call "_hinge @b times" dontshow tag hinge_n_times
            neednumber
   seq hinge [repeat_n]

call "_others hinge @b times" dontshow tag others_hinge_n_times
            neednumber
   seq othershinge [repeat_n]

call "hinge by @b X @b" c4a
            visible_fractions need_two_numbers
   seq hinge_n_times []
   seq others_hinge_n_times [shift_one_number]

call "switch to a@M@I diamond" a2
   setup 1x4 dmd
      array [CR1E AL0S AL1W CR2S]
            alternate_definition [interlocked] c1
   setup 2x4 qtag rotate
      array [CR6N AL5E CR0E AL6S AL7S CR1E AL4E CR7N]
            alternate_definition [magic] c2
   setup 2x4 qtag rotate
      array [CR3N AL4E CR1E AL3S AL6S CR0E AL5E CR6N]

call "run away" c4
            left_means_mirror
   setup 1x4 dmd
      array [CR3W AL0E ACR1E CR2W]
            alternate_definition [cross] c4
   setup 1x4 dmd
      array [CR3W CR2W ACR1E AL0E]

call "erase" c3x
   singleconc uturnback [] armturn_14 []

call "zip the top" c4a
   setup 1x4 1x4 rotate
      array [CR0N CR1S AL0S AL1N]
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1S 0 AL1N]

call "fan back" c4 tag fanback
            step_to_wave left_means_touch_or_check
   setup 1x4 dmd
      array [CR0S CR3W AL2S AL3E]
   setup dmd 1x4
      array [CR0S 0 AL2S 0]
   setup pmd 1x4
      array [0 CR1W 0 AL1E]

call "spin back" c4
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check visible_fractions
   seq trade [inherit_yoyo]
   seq fanback []

call "short cycle" c4
   setup 1x4 1x4 rotate restriction forbidden wave_only
      array [R0N L3N L0S R3S]

call "peel the top" plus
            split_large_setups
   setup 2x2 1x4 rotate restriction wave_only
      array [AL2N CR2S AL3N CR3S]
   setup 3x2 1x4 qualifier true_Z_cw restriction wave_only
      array [   0 CR1W AL0E    0 CR0W AL1E]
   setup 3x2 1x4 qualifier true_Z_ccw restriction wave_only
      array [CR1W AL0E    0 CR0W AL1E    0]

call "follow your neighbor" plus tag neighbor
   setup 2x2 1x4 rotate restriction wave_only
      array [CR0S AL0N AL3N CR3S]
            alternate_definition [grand] c1
   setup 3x2 1x6 restriction wave_only
      array [CR1W CR5W CR3W AL3E AL5E AL1E]
   setup 4x2 1x8 restriction wave_only
      array [CR1W CR2W CR7W CR4W AL4E AL7E AL2E AL1E]

call "cross your neighbor" c1 tag xneighbor
   setup 2x2 1x4 rotate restriction wave_only
      array [CR0S AL0N CR3S AL3N]

call "criss cross your neighbor" c2 tag xxneighbor
   setup 2x2 1x4 rotate restriction wave_only
      array [CR3S AL3N CM2S AM2N]

call "_ends circulate" dontshow tag ends_circ
   conc nullcall [] circulate [conc_force_spots]

call "_trade your neighbor @h part 1" dontshow tag start_trade_neighbor
   setup 2x4 2x4 rotate restriction forbidden wave_only
      array [ZM7W ZM7W ZM0W ZM0W AL2N CR2S AL5N CR7S]
            alternate_definition [cross] c3x
   setup 2x4 2x4 rotate restriction forbidden wave_only
      array [ZM7W ZM7W ZM0W ZM0W CR2S AL2N CR7S AL5N]

call "trade your neighbor @h" c4
            cross_is_inherited
   seq start_trade_neighbor [inherit_cross]
   seq set_windmill_direction []
   seq ends_circ []

call "follow thru" c1 tag followthru
   setup 2x2 1x4 no_cutting_through rotate restriction wave_only
      array [CR0N AL0S AL1S CR1N]
   setup pmd 1x4
      preds "???"
         if dmd_ctrs_rh [CR1E CR2E 0 0]
         if always      [AL1W 0    0 AL2W]
            alternate_definition [grand] c2
   setup 3x2 1x6 restriction wave_only
      array [CR2E CR4E CR3E AL3W AL4W AL2W]
   setup 4x2 1x8 restriction wave_only
      array [CR3E CR6E CR5E CR4E AL4W AL5W AL6W AL3W]
   setup short6 1x6 rotate
      preds "???"
         if dmd_ctrs_rh [CR0N 0    0    0    CR4N CR2N]
         if always      [0    0    AL0S AL2S AL4S 0]
   setup pspindle 1x8
      preds "???"
         if dmd_ctrs_rh [CR2E CR7E CR4E 0   0    0    0    CR1E]
         if always      [0    0    0    0   AL4W AL7W AL2W AL1W]
            alternate_definition [cross] c3x
   setup 2x2 1x4 rotate restriction wave_only
      array [CR0N AL0S CR1N AL1S]
   setup pmd 1x4
      preds "???"
         if dmd_ctrs_rh [AL1W AL2W 0 0]
         if always      [CR1E 0    0 CR2E]
            alternate_definition [3x3] c4a
   setup 3x2 1x6 restriction wave_only
      array [CR5E CR4E CR3E AL3W AL4W AL5W]
            alternate_definition [4x4] c4a
   setup 4x2 1x8 restriction wave_only
      array [CR6E CR7E CR5E CR4E AL4W AL5W AL7W AL6W]

call "pair the line" c4
   setup 1x4 2x3 rotate
      array [CR5E CR4E AL0E AL1E]
            alternate_definition [cross] c4
   setup 1x4 2x3 rotate
      array [CR0E CR1E AL5E AL4E]

call "_ @6@C fold" dontshow tag full_fold
   setup 1x4 3x4
      preds "Can't tell who is designated."
         if select   [CR1S  AL0S  AL2S CR3S]
         if unselect [ZM10N ZM11N ZM4N ZM5N]
            alternate_definition [cross] mainstream
   setup 1x4 3x4
      preds "Can't tell who is designated."
         if select_once_rem_from_unselect [CR2S  CR3S  AL1S AL0S]
         if unselect_once_rem_from_select [ZM10N ZM11N ZM4N ZM5N]

call "_fudge 1 after fold" dontshow tag fold_fudge1
            split_large_setups
   setup 2x2 2x2
      array [ZM0N ZM1N ZM2N ZM3N]
   setup trngl4 trngl4
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup ptrngl4 trngl4
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup 1x4 1x4
      array [ZM0N ZM1N ZM2N ZM3N]
   setup 3x2 2x3
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N]
   setup 3x4 2x3 rotate qualifier lateral_columns_empty
      array [ZM5W ZM5W ZM0W ZM0W ZM1W ZM1W ZM2W ZM2W ZM3W ZM3W ZM4W ZM4W]
   setup 4x4 2x4 rotate qualifier lateral_columns_empty
      array [ZM0W ZM1W ZM2W ZM1W ZM3W ZM3W ZM4W ZM2W ZM4W ZM5W ZM6W ZM5W ZM7W ZM7W ZM0W ZM6W]

call "_fudge 2 after fold" dontshow tag fold_fudge2
            split_large_setups
   setup 2x2 2x2
      array [ZM0N ZM1N ZM2N ZM3N]
   setup trngl4 trngl4
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup ptrngl4 trngl4
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup 1x4 1x4
      array [ZM0N ZM1N ZM2N ZM3N]
   setup 3x2 2x2 qualifier true_Z_cw
      array [   0 ZM0N ZM1N    0 ZM2N ZM3N]
   setup 3x2 2x2 qualifier true_Z_ccw
      array [ZM0N ZM1N    0 ZM2N ZM3N    0]
   setup 3x2 2x2
      preds "?"
         if columns_someone_in_front [ZM0N ZM0N ZM1N ZM2N ZM3N ZM3N]
         if always                   [ZM0N ZM1N ZM1N ZM2N ZM2N ZM3N]

/* This is the call that fudges the result back to a box instead of leaving
   a "Z".  This is what dancers below C1 or so will typically do. */

call "@6@C fold (and adjust)" mainstream
            cross_is_inherited
   seq full_fold [inherit_cross]
   seq fold_fudge1 [roll_transparent]
   seq fold_fudge2 [roll_transparent]

/* This is the real one.  Beware. */

call "@6@C fold" c1
   setup 1x4 3x4
      preds "Can't tell who is designated."
         if select_near_unselect [CR1S  AL0S  AL2S CR3S]
         if unselect_near_select [ZM10N ZM11N ZM4N ZM5N]
            alternate_definition [cross] c1
   setup 1x4 3x4
      preds "Can't tell who is designated."
         if select_once_rem_from_unselect [CR2S  CR3S  AL1S AL0S]
         if unselect_once_rem_from_select [ZM10N ZM11N ZM4N ZM5N]

call "loop the loop" c4
   setup 1x4 2x3 rotate
      array [R5E R1E L0E L4E]
            alternate_definition [cross] c4
   setup 1x4 2x3 rotate
      array [R0E R1E L5E L4E]

call "rip the line" c4
   setup 1x4 2x3 rotate
      array [CR0E CR4E AL5E AL1E]

call "@6 swivel" c4a
   setup 1x2 1x2 restriction forbidden couples_only
      preds "Can't have both people swivel"
         if select_near_unselect [C0N A1N]
         if unselect_near_select [A0S C1S]
         if unselect_near_unselect [ZM0N ZM1N]

/* Should really have a restriction for this, so it will allow phantoms, if anyone cares. */
call "centers cross swivel" c4a
   setup 1x4 1x4
      preds "Not facing correct direction"
         if x14_once_rem_couple [A0S C3N C2S A1N]

call "ends cross swivel" c4a
   setup 1x4 1x4
      preds "Not facing correct direction"
         if x14_once_rem_couple [C3N A0S A1N C2S]

call "curl thru" c4
   setup 1x4 2x3 rotate
      array [R0E R1E L5E L4E]

call "pass the ocean" mainstream tag pass_ocean
            rear_back_from_r_wave visible_fractions
   seq passthru []
   seq quarterin []
   seq touch []

call "cross the ocean" c3x
   setup 2x2 1x4 rotate
      array [0 0 R0N L1S]

call "_designees walk/others dodge" dontshow tag starthopping
   setup 2x2 2x2
      preds "Can't tell who is designated."
         if select [0 0 M1N M0N]
         if unselect [M1N M0N M3N M2N]

call "_beaus walk/others dodge" dontshow tag startbeauhopping
   setup 2x2 2x2
      array [0 0 ZM3N ZM0N]
            alternate_definition [singlefile] c3x
   setup 4x1 2x2
      array [ZM0N ZM1N 0 0]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 ZM3W ZM4W ZM5W]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 ZM4W ZM5W ZM6W ZM7W]

call "_belles walk/others dodge" dontshow tag startbellhopping
   setup 2x2 2x2
      array [0 0 ZM1N ZM2N]
            alternate_definition [singlefile] c3x
   setup 4x1 1x4
      array [ZM3N ZM2N 0 0]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 ZM0W ZM1W ZM2W]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 ZM0W ZM1W ZM2W ZM3W]

call "@k hop" c3a
            visible_fractions yield_if_ambiguous
   seq starthopping []
   seq hinge []

call "beau hop" c3a
            12_matrix_is_inherited 16_matrix_is_inherited
            singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq startbeauhopping [inherit_singlefile inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq armturn_14       [inherit_12_matrix inherit_16_matrix]

call "belle hop" c3a
            12_matrix_is_inherited 16_matrix_is_inherited
            singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq startbellhopping [inherit_singlefile inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq armturn_14       [inherit_12_matrix inherit_16_matrix]

call "@k hop the lock" c3a
            visible_fractions yield_if_ambiguous
   seq starthopping []
   seq hinge []
   seq lockit []

call "beau hop the lock" c3a
            12_matrix_is_inherited 16_matrix_is_inherited
            singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq startbeauhopping [inherit_singlefile inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq armturn_14       [inherit_singlefile inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq lockit []

call "belle hop the lock" c3a
            12_matrix_is_inherited 16_matrix_is_inherited
            singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq startbellhopping [inherit_singlefile inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq armturn_14       [inherit_singlefile inherit_3x3 inherit_4x4 inherit_12_matrix inherit_16_matrix]
   seq lockit []

call "_finish dixie chain" dontshow tag finish_dixie_chain
   setup 4x1 1x4
      array [ZM3N 0 0 ZM2N]

call "_finish dixie daisy" dontshow tag finish_dixie_daisy
            left_means_mirror
   setup 4x1 1x4
      array [CM0S 0 0 CM1S]

call "_start dixie style" dontshow tag start_dixie
            left_means_mirror no_elongation_allowed
   setup 2x2 1x4 rotate qualifier not_split_dixie
      array [0 0 ZM1W ZM2W]
   setup 2x2 2x2 qualifier split_dixie
      preds "?"
         if x22_facing_someone [0 0 AL1W CR0E]
         if always             [0 0 ZM2N ZM3N]
            alternate_definition [singlefile] mainstream
   setup 4x1 1x4
      array [ZM0N ZM3N 0 0 ]
            alternate_definition [3x3 singlefile] c4
   setup 6x1 1x6
      array [ZM0N ZM2N ZM4N 0 0 0 ]
            alternate_definition [4x4 singlefile] c4
   setup 8x1 1x8
      array [ZM0N ZM3N ZM5N ZM6N 0 0 0 0 ]

call "dixie style to a wave" mainstream
            split_like_dixie_style rear_back_from_r_wave rear_back_from_qtag
            singlefile_is_inherited 3x3_is_inherited 4x4_is_inherited left_means_mirror
   seq start_dixie [inherit_left inherit_singlefile inherit_3x3 inherit_4x4]
   seq left_touch_1_4 [inherit_left]

call "dixie diamond" c1
            split_like_dixie_style rear_back_from_r_wave rear_back_from_qtag
            singlefile_is_inherited left_means_mirror
   seq start_dixie [inherit_left inherit_singlefile]
   seq left_touch_1_4 [inherit_left]
   seq ctrarmturn_14_utb []

call "dixie sashay" c1
            split_like_dixie_style rear_back_from_r_wave rear_back_from_qtag
            singlefile_is_inherited left_means_mirror
   seq start_dixie [inherit_left inherit_singlefile]
   seq left_touch_1_4 [inherit_left]
   seq slither []

call "dixie derby" c3x
            split_like_dixie_style rear_back_from_r_wave rear_back_from_qtag
            singlefile_is_inherited left_means_mirror
   seq start_dixie [inherit_left inherit_singlefile]
   seq left_touch_1_4 [inherit_left]
   seq crossroll []

call "dixie spin" c4a
            split_like_dixie_style rear_back_from_r_wave rear_back_from_qtag
            singlefile_is_inherited left_means_mirror
   seq start_dixie [inherit_left inherit_singlefile]
   seq left_touch_1_4 [inherit_left]
   seq fanthetop []

call "dixie chain" c4
            split_like_dixie_style rear_back_from_r_wave rear_back_from_qtag
            singlefile_is_inherited left_means_mirror
   seq start_dixie [inherit_left inherit_singlefile]
   seq finish_dixie_chain []

call "dixie daisy" c4
            split_like_dixie_style rear_back_from_r_wave rear_back_from_qtag
            singlefile_is_inherited left_means_mirror
   seq start_dixie [inherit_left inherit_singlefile]
   seq finish_dixie_daisy [inherit_left]

call "pass the sea" a1
            rear_back_from_r_wave visible_fractions
   seq passthru []
   seq quarterin []
   seq lft_touch [force_left]

/* It's just simpler to list these calls separately.  We could use the
   "@e...@f mechanism, and the "left_means_mirror" flag, and all that,
   and then typing in would be natural, but getting "veer left" from the
   menu would still require clicking on the "left" concept.  Since "veer
   left" is vastly more common than "veer right", that would be inconvenient.
   Better just to list both of them. */
call "veer right" mainstream
   setup 2x2 1x4
      array [0 0 2N 3N]

call "veer left" mainstream
   setup 2x2 1x4
      array [0 0 1N 0N]

call "leftable veer left" dontshow tag lft_veer_left
            left_means_mirror
   setup 2x2 1x4
      array [0 0 1N 0N]

call "sashay thru" c4
            left_means_mirror
   setup 2x2 1x4
      array [0 0 2N 3N]

call "reach out" c3a
   setup 2x2 1x4 restriction wave_only
      array [CM3S AM1S CR2S AL0S]

call "flare out to a line" c3a
   setup 2x4 1x8 restriction 2fl_only
      array [AL0S AL1S CR5S CR4S ZM7N ZM6N ZM2N ZM3N]
            alternate_definition [cross] c3x
   setup 2x4 1x8 restriction 2fl_only
      array [CR5S CR4S AL0S AL1S ZM7N ZM6N ZM2N ZM3N]

call "scoot apart" c4
   setup 2x2 1x4 restriction wave_only
      array [CM3S AM1S AM0S CM2S]

call "_peel and nothing" dontshow tag peel_and_nothing
   setup 2x2 1x4 restriction resolve_ok peelable_box
      array [AL0S CR2S ZM3N ZM1N]

call "_trail and nothing" dontshow tag trail_and_nothing
   setup 2x2 1x4 restriction resolve_ok peelable_box
      array [CR2S AL0S ZM3N ZM1N]

call "peel off" plus tag peeloff
            split_large_setups
   setup 2x2 1x4 restriction peelable_box
      array [AL0S CR2S CR3S AL1S]
   setup 3x2 1x4 rotate qualifier true_Z_cw
      array [   0 AL1E AL0E    0 CR2E CR3E]
   setup 3x2 1x4 rotate qualifier true_Z_ccw
      array [AL1E AL0E 0    CR2E CR3E 0]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL2E AL1E AL0E CR3E CR4E CR5E]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E AL3E AL1E AL0E CR4E CR5E CR7E CR6E]

call "trail off" a2 tag trailoff
            split_large_setups
   setup 2x2 1x4 restriction peelable_box
      array [CR2S AL0S AL1S CR3S]
   setup 3x2 1x4 rotate qualifier true_Z_cw
      array [   0 CR3E CR2E    0 AL0E AL1E]
   setup 3x2 1x4 rotate qualifier true_Z_ccw
      array [CR3E CR2E 0    AL0E AL1E 0]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR5E CR4E CR3E AL0E AL1E AL2E]
            alternate_definition [4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E CR7E CR5E CR4E AL0E AL1E AL3E AL2E]

call "_crossable peel off" dontshow tag crossable_peeloff
   setup 2x2 1x4 restriction peelable_box
      array [AL0S CR2S CR3S AL1S]
            alternate_definition [3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL2E AL1E AL0E CR3E CR4E CR5E]
            alternate_definition [4x4] c4a
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E AL3E AL1E AL0E CR4E CR5E CR7E CR6E]
            alternate_definition [cross] c4a
   setup 2x2 1x4 restriction peelable_box
      array [CR2S AL0S AL1S CR3S]
            alternate_definition [cross 3x3] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR5E CR4E CR3E AL0E AL1E AL2E]
            alternate_definition [cross 4x4] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E CR7E CR5E CR4E AL0E AL1E AL3E AL2E]

call "peel and trail" a2 tag peelntrail
   setup 2x2 1x4 restriction peelable_box
      array [AL0S CR2S AL1S CR3S]
            alternate_definition [1x2] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR5E CR4E AL0E CR3E AL1E AL2E]
            alternate_definition [2x1] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [CR5E AL1E AL0E CR3E CR4E AL2E]
            alternate_definition [1x3] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E CR7E CR5E AL0E CR4E AL1E AL3E AL2E]
            alternate_definition [3x1] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E AL3E AL1E AL0E CR4E CR5E CR7E AL2E]
            alternate_definition [2x2] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [CR6E CR7E AL1E AL0E CR4E CR5E AL3E AL2E]

call "trail and peel" c4 tag trailnpeel
   setup 2x2 1x4 restriction peelable_box
      array [CR2S AL0S CR3S AL1S]
            alternate_definition [1x2] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL2E AL1E CR3E AL0E CR4E CR5E]
            alternate_definition [2x1] c4
   setup 3x2 1x6 rotate restriction peelable_box
      array [AL2E CR4E CR3E AL0E AL1E CR5E]
            alternate_definition [1x3] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E AL3E AL1E CR4E AL0E CR5E CR7E CR6E]
            alternate_definition [3x1] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E CR7E CR5E CR4E AL0E AL1E AL3E CR6E]
            alternate_definition [2x2] c4
   setup 4x2 1x8 rotate restriction peelable_box
      array [AL2E AL3E CR5E CR4E AL0E AL1E CR7E CR6E]

call "reset" c3
            visible_fractions
   seq zoom [force_half]
   seq armturn_14 []
   seq zoom [force_half]
   seq armturn_14 []

/* We allow either "3/4, reset" or "reset 3/4". */
call "reset @a" c3
            neednumber visible_fractions distribute_repetitions
   /* Note that "visible_fractions" is permitted for "repeat_n_alternate"
      calls ONLY if "distribute_repetitions" is also used. */
   seq zoom [force_half repeat_n_alternate]
   seq armturn_14 []

call "_eight chain part 1" dontshow tag eightchain1
            rear_back_from_r_wave left_means_mirror
   simple_funny
   setup 4x2 2x4
      array [ZM1N 0 ZM3N 0 0 ZM4N 0 ZM6N]
            alternate_definition [half] mainstream
   setup 4x2 2x4 rotate
      array [ZM7W 0 ZM0W 0 0 ZM2W 0 ZM5W]

call "_eight chain part 2" dontshow tag eightchain2
            left_means_mirror
   setup 4x2 2x4
      array [0 ZM2N 0 AL4S AL3S 0 ZM5N 0]
            alternate_definition [half] mainstream
   setup 4x2 crosswave
      array [0 ZM2N 0 AL5W AL4W 0 ZM7N 0]

call "eight chain @9" mainstream
            rear_back_from_r_wave left_means_mirror neednumber visible_fractions distribute_repetitions
   seq eightchain1 [inherit_left repeat_n_alternate]
   seq eightchain2 [inherit_left]

/***** not right: if in 8CH this would split it and lose */
/* Need to specify a 1x4 version, and make the program */
/* know which way to split the 2x4 if a call has both. */
call "weave" c1 tag weave
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [CR0N AL0S ACR1N CAL1S]

call "_natural 3/4 thru" dontshow tag nat34thru
   setup 2x2 1x4 rotate restriction wave_only
      array [CCCAL3N AAACR3S AL2N CR2S]

call "_natural 3/4 and 3/4" dontshow tag nat34_34
   setup 2x2 dmd rotate restriction wave_only
      array [CCCAL1W AAACR3W AL2N CR2S]

call "_ @B by the right" dontshow tag odd_frac_by_right
            left_means_mirror neednumber diamond_is_legal

   setup 2x4 2x4 rotate nqualifier 1 right_wave
      array [CR7N 0 CR0N 0 0 CR2N 0 CR5N]
   setup 2x4 2x4 rotate nqualifier 3 right_wave
      array [CR6S 0 CR1S 0 0 CR3S 0 CR4S]

   setup 2x4 qtag rotate nqualifier 1 left_wave
      array [0 CR6N 0 ZM0W ZM1W 0 CR3N 0]
   setup 2x4 qtag rotate nqualifier 3 left_wave
      array [0 CR7S 0 ZM0W ZM1W 0 CR2S 0]

   setup qtag 2x4 rotate nqualifier 1 right_wave
      array [0 0 0 CR1N 0 0 CR6N 0]
   setup qtag 2x4 rotate nqualifier 3 right_wave
      array [0 0 0 CR2S 0 0 CR5S 0]

   setup pqtag 2x4 rotate nqualifier 1 right_wave
      array [ZM7W ZM0W 0 0 ZM3W ZM4W 0 0]
   setup pqtag 2x4 rotate nqualifier 3 right_wave
      array [ZM7W ZM0W 0 0 ZM3W ZM4W 0 0]

   setup dmd 1x4 nqualifier 1 right_wave
      array [ZM0N 0 ZM2N 0]
   setup dmd 1x4 nqualifier 3 right_wave
      array [ZM0N 0 ZM2N 0]

   setup pmd 1x4 nqualifier 1 right_wave
      array [0 CR3E 0 0]
   setup pmd 1x4 nqualifier 3 right_wave
      array [0 CR1W 0 0]

   setup 4x2 1x8 nqualifier 1 right_wave
      array [CR1E CR2E CR7E CR4E 0 0 0 0]
   setup 4x2 1x8 nqualifier 3 right_wave
      array [CR0W CR3W CR6W CR5W 0 0 0 0]

   setup 3x2 1x6 restriction wave_only nqualifier 1 none
      array [CR1E CR5E CR3E 0 0 0]
   setup 3x2 1x6 restriction wave_only nqualifier 3 none
      array [CR0W CR2W CR4W 0 0 0]

   setup 2x2 1x4 rotate nqualifier 1 right_wave
      array [CR0N 0 0 CR3N]
   setup 2x2 1x4 rotate nqualifier 3 right_wave
      array [CR1S 0 0 CR2S]

   setup 1x2 1x2 rotate nqualifier 1 right_wave
      array [CR0N 0]
   setup 1x2 1x2 rotate nqualifier 3 right_wave
      array [CR1S 0]

            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds nqualifier 1 none
      array [0 0 0 CR1E 0 0 CR0E 0]
   setup qtag qtag restriction nice_diamonds nqualifier 3 none
      array [0 0 0 CR4W 0 0 CR5W 0]
   setup pqtag qtag nqualifier 1 none
      array [CR7E CR2E 0 0 0 0 0 0]
   setup pqtag qtag nqualifier 3 none
      array [CR6W CR3W 0 0 0 0 0 0]

call "_ @B by the right for about" dontshow tag odd_frac_by_right_for_about
            left_means_mirror neednumber step_to_wave
   setup 2x2 1x4 rotate restriction forbidden wave_only nqualifier 1 right_wave
      array [CR0N 0 0 CR3N]
   setup 2x2 1x4 rotate restriction forbidden wave_only nqualifier 3 right_wave
      array [CR1S 0 0 CR2S]

call "_quarter by the right" dontshow tag 1_4_by_right
            left_means_mirror diamond_is_legal
   setup 2x4 2x4 rotate qualifier right_wave
      array [CR7N 0 CR0N 0 0 CR2N 0 CR5N]
   setup 2x4 qtag rotate qualifier left_wave
      array [0 CR6N 0 ZM0W ZM1W 0 CR3N 0]
   setup qtag 2x4 rotate qualifier right_wave
      array [0 0 0 CR1N 0 0 CR6N 0]
   setup pqtag 2x4 rotate qualifier right_wave
      array [ZM7W ZM0W 0 0 ZM3W ZM4W 0 0]
   setup dmd 1x4 qualifier right_wave
      array [ZM0N 0 ZM2N 0]
   setup pmd 1x4 qualifier right_wave
      array [0 CR3E 0 0]
   setup 4x2 1x8 qualifier right_wave
      array [CR1E CR2E CR7E CR4E 0 0 0 0]
   setup 3x2 1x6 restriction wave_only
      array [CR1E CR5E CR3E 0 0 0]
   setup 2x2 1x4 rotate qualifier right_wave
      array [CR0N 0 0 CR3N]
   setup 1x2 1x2 rotate qualifier right_wave
      array [CR0N 0]
            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds
      array [0 0 0 CR1E 0 0 CR0E 0]
   setup pqtag qtag
      array [CR7E CR2E 0 0 0 0 0 0]

call "_half by the right" dontshow tag 1_2_by_right
            left_means_mirror diamond_is_legal
   setup 1x4 1x4 restriction wave_only
      array [CR1S CR3S ZM2N CR2S]
            alternate_definition [grand] plus
   setup 1x6 1x6 restriction wave_only
      array [CR1S CR2S CR5S ZM3N CR3S CR4S]
   setup 1x8 1x8 restriction wave_only
      array [CR1S CR3S CR6S CR2S ZM4N CR4S CR7S CR5S]
            alternate_definition [12matrix grand] c3a
   setup 1x12 1x12 restriction wave_only
      array [CR1S CR2S CR3S CR4S CR5S CR11S ZM6N CR6S CR7S CR8S CR9S CR10S]
            alternate_definition [16matrix grand] c3a
   setup 1x16 1x16 restriction wave_only
      array [CR1S CR2S CR3S CR4S CR5S CR6S CR7S CR15S ZM8N CR8S CR9S CR10S CR11S CR12S CR13S CR14S]
/* We shouldn't need these:
   setup 1x10 1x10 restriction wave_only
      array [CR1S CR2S CR3S CR4S CR9S ZM5N CR5S CR6S CR7S CR8S]
   setup 1x14 1x14 restriction wave_only
      array [CR1S CR2S CR3S CR4S CR5S CR6S CR13S ZM7N CR7S CR8S CR9S CR10S CR11S CR12S]
*/
            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds
      array [0 0 ZM2N CR2S 0 0 CR7S CR3S]
   setup pqtag qtag
      array [CR5S CR4S 0 0 ZM4N ZM5N 0 0]

call "_three quarters by the right" dontshow tag 3_4_by_right
            left_means_mirror diamond_is_legal
   setup 2x4 2x4 rotate qualifier right_wave
      array [CR6S 0 CR1S 0 0 CR3S 0 CR4S]
   setup 2x4 qtag rotate qualifier left_wave
      array [0 CR7S 0 ZM0W ZM1W 0 CR2S 0]
   setup qtag 2x4 rotate qualifier right_wave
      array [0 0 0 CR2S 0 0 CR5S 0]
   setup pqtag 2x4 rotate qualifier right_wave
      array [ZM7W ZM0W 0 0 ZM3W ZM4W 0 0]
   setup dmd 1x4 qualifier right_wave
      array [ZM0N 0 ZM2N 0]
   setup pmd 1x4 qualifier right_wave
      array [0 CR1W 0 0]
   setup 4x2 1x8 qualifier right_wave
      array [CR0W CR3W CR6W CR5W 0 0 0 0]
   setup 3x2 1x6 restriction wave_only
      array [CR0W CR2W CR4W 0 0 0]
   setup 2x2 1x4 rotate qualifier right_wave
      array [CR1S 0 0 CR2S]
   setup 1x2 1x2 rotate qualifier right_wave
      array [CR1S 0]
            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds
      array [0 0 0 CR4W 0 0 CR5W 0]
   setup pqtag qtag
      array [CR6W CR3W 0 0 0 0 0 0]

call "_half by the left" dontshow tag 1_2_by_left
            left_means_mirror diamond_is_legal
   setup 1x4 1x4 restriction wave_only
      array [ZM0N AL0S AL3S AL1S]
   setup qtag qtag restriction wave_only
      array [ZM0N ZM1N AL3S AL7S ZM4N ZM5N ZM6N AL6S]
   setup pqtag qtag
      array [ZM0N ZM1N 0 0 ZM4N ZM5N 0 0]
            alternate_definition [grand] plus
   setup 1x6 1x6 restriction wave_only
      array [ZM0N AL0S AL1S AL4S AL5S AL2S]
   setup 1x8 1x8 restriction wave_only
      array [ZM0N AL0S AL3S AL1S AL5S AL7S AL2S AL6S]
            alternate_definition [12matrix grand] c3a
   setup 1x12 1x12 restriction wave_only
      array [ZM0N AL0S AL1S AL2S AL3S AL4S AL7S AL8S AL9S AL10S AL11S AL5S]
            alternate_definition [16matrix grand] c3a
   setup 1x16 1x16 restriction wave_only
      array [ZM0N AL0S AL1S AL2S AL3S AL4S AL5S AL6S AL9S AL10S AL11S AL12S AL13S AL14S AL15S AL7S]
/* We shouldn't need these:
   setup 1x10 1x10 restriction wave_only
      array [ZM0N AL0S AL1S AL2S AL3S AL6S AL7S AL8S AL9S AL4S]
   setup 1x14 1x14 restriction wave_only
      array [ZM0N AL0S AL1S AL2S AL3S AL4S AL5S AL8S AL9S AL10S AL11S AL12S AL13S AL6S]
*/
            alternate_definition [diamond] c3a
   setup qtag qtag restriction nice_diamonds
      array [0 0 AL3S AL7S 0 0 ZM6N AL6S]
   setup pqtag qtag
      array [ZM0N ZM1N 0 0 AL1S AL0S 0 0]

call "swing thru" mainstream
            step_to_wave left_means_mirror grand_is_inherited 12_matrix_is_inherited 16_matrix_is_inherited diamond_is_legal visible_fractions
   seq 1_2_by_right [inherit_left inherit_grand inherit_12_matrix inherit_16_matrix inherit_diamond]
   seq 1_2_by_left  [inherit_left inherit_grand inherit_12_matrix inherit_16_matrix inherit_diamond roll_transparent]

/* quarter thru and three quarter thru */

call "@B thru" a1
            step_to_wave left_means_mirror neednumber grand_is_inherited diamond_is_legal visible_fractions
   seq odd_frac_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_grand inherit_diamond roll_transparent]

call "remake the wave" a2 tag remake
            /* Actually, left should mean check, but "touch_or_check" isn't right.  Sigh. */
            grand_is_inherited left_means_mirror visible_fractions
   seq armturn_14 []
   seq maybegrandslip_notc3 [inherit_grand]
   seq armturn_34 []

call "remake the column" a2
            /* Actually, left should mean check, but "touch_or_check" isn't right.  Sigh. */
            left_means_mirror visible_fractions
   seq armturn_14 []
   seq maybegrandslip_notc3 [force_grand]
   seq armturn_34 []

call "remake" a2
            left_means_mirror grand_is_inherited diamond_is_legal visible_fractions
   seq 1_4_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_grand inherit_diamond]
   seq 3_4_by_right [inherit_left inherit_diamond]

call "swing the fractions" c1
            left_means_mirror diamond_is_legal visible_fractions
   seq 1_4_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_diamond]
   seq 3_4_by_right [inherit_left inherit_diamond]
   seq 1_2_by_left [inherit_left inherit_diamond]
   seq 1_4_by_right [inherit_left inherit_diamond]

/* quarter cross and three quarter cross */

call "@B cross" c3x
            left_means_mirror neednumber grand_is_inherited visible_fractions
   seq odd_frac_by_right [inherit_left]
   seq ctrcrossrun [inherit_grand]

/* quarter mix and three quarter mix */

call "@B mix" c3a
            left_means_mirror neednumber grand_is_inherited visible_fractions
   seq odd_frac_by_right [inherit_left]
   seq ctrcrossrun [inherit_grand]
   seq maybegrandslip [inherit_grand roll_transparent]

call "_centers crossback/ends two o's" dontshow tag crossbackandtwoos
   conc crossback [] two_o_circs [conc_force_otherway endscando]

call "_start settle back" dontshow tag settle_back1
   seq zoom [force_half]
   seq armturn_14 []

call "settle back" c3x
            visible_fractions
   seq settle_back1 []
   seq crossbackandtwoos []

call "short trip" c3x tag longtrip1
   setup 2x4 2x6
      preds "Don't know what to do."
         if lines_miniwave [M3S R3S L2S M2S M4N M6S M11S M1N]
         if lines_couple   [M3S M0S M5S M2S M4N M3N M2N  M1N]

call "finish a long trip" c3x tag longtrip2
   setup 2x6 2x4 rotate
      preds "Wings must be as a couple looking out."
         if lines_miniwave [ 0   0  0 0  0   0  0 0 M1W M6W 0 0]
         if lines_couple   [R7E R0E 0 0 L7E L0E 0 0 M1W M6W 0 0]

call "long trip" c3x
            visible_fractions
   seq longtrip1 []
   seq longtrip2 []

call "chase your neighbor" c1
            left_means_mirror
   setup 2x2 1x4 rotate
   array [1N 2N 0 0]

call "swap the top" c3a
            reverse_means_mirror
   setup 2x2 1x4 rotate
      array [0 0 3N 2S]
            alternate_definition [cross] c3
   setup 2x2 1x4 rotate
      array [0 0 3S 2S]

call "star to a wave" c4a
            left_means_mirror
   setup 2x2 1x4 rotate restriction forbidden not_tboned
      array [0 0 ACR1S CR2S]
            alternate_definition [singlefile] c4
   setup 4x1 1x4
      array [ACR3W CR0W 0 0]

call "travel thru" c3a
            rear_back_from_r_wave visible_fractions left_means_mirror 3x3_is_inherited 4x4_is_inherited
   seq passthru []
   seq finishtravel [inherit_left inherit_3x3 inherit_4x4]

call "_finish travel thru" dontshow tag finishtravel
            left_means_mirror
   setup 1x2 1x2 rotate restriction forbidden couples_only
      array [CR0N CR1N]
            alternate_definition [3x3] c4
   setup 1x3 1x3 rotate restriction forbidden 3x3couples_only
      array [CR0N CR1N CR2N]
            alternate_definition [4x4] c4
   setup 1x4 1x4 rotate restriction forbidden 4x4couples_only
      array [CR0N CR1N CR2N CR3N]

call "revolve to a wave" c3
            left_means_mirror
   setup 2x2 1x4 no_cutting_through
      array [CR2S CR3N ZM0N CR1S]
            alternate_definition [singlefile] c4
   setup 4x1 1x4 rotate
      array [ZM0W CR1E CR2E CR3W]

call "follow to a@I diamond" c3a
   setup 2x2 dmd rotate restriction resolve_ok wave_only
      array [C1E A3E A2N C2S]
            alternate_definition [interlocked] c3
   setup 2x4 qtag restriction forbidden wave_only
      array [C3S A6S C2S A7S A4E C4W A5E C5W]

call "cross follow to a diamond" c4
   setup 2x2 dmd rotate restriction resolve_ok wave_only
      array [C1E A3E C2S A2N]

call "criss cross follow to a diamond" c4
   setup 2x2 dmd rotate restriction resolve_ok wave_only
      array [C3E A1E C2S A2N]

call "scatter follow to a diamond" c4
   setup 2x4 qtag restriction forbidden wave_only
      array [C2S C3S A7S A6S A4E C4W A5E C5W]

call "@eright@f roll the" c3x
            left_means_mirror
   setup 2x2 dmd rotate
      array [CR0N C1E 0 0]      /* We say that the original belle can't roll. */

call "peel to a diamond" c2
   seq peel_and_nothing []
   seq sglctrhinge [roll_transparent]

call "trail to a diamond" c2
   seq trail_and_nothing []
   seq sglctrhinge [roll_transparent]

call "_grand linear cycle but" dontshow tag gndlincyclebut
   setup 1x8 2x4
      array [M2E M6E L7E R7E M1W M5W R4W L4W]

call "_centers couple up" dontshow tag ctrscoupleup
   conc coupleup [or_anycall] nullcall []

call "grand linear cycle@7 but @8" c4a
   seq gndlincyclebut []
   seq ctrscoupleup []

call "trade/stepnfold" dontshow tag tradestpnfld
            visible_fractions
   seq trade [allow_forced_mod]
   seq stepnfold [allow_forced_mod]

call "roll the wave" c4
   setup 1x4 2x2
      preds "?"
         if lines_miniwave [AL3E AL3E CR2W CR2W]
         if lines_couple   [AL3E AL0E CR2W CR1W]
         if always         [AL3E 0    CR2W 0]
            alternate_definition [single] c4
   setup 1x2 1x2
      array [AL0E CR1W]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only
      array [AL3N AL4N AL5N CR2S CR1S CR0S]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only
      array [AL4N AL5N AL7N AL6N CR3S CR2S CR0S CR1S]

call "_finish relay the shadow" dontshow tag fin_relay_shad
            step_to_wave left_means_touch_or_check
   setup 1x8 2x4 restriction wave_only
      array [C3S 6N 7S A2N A0S 5N 4S C1N]

call "relay the shadow" c1
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fin_relay_shad []

call "fan chain the line" c3
            step_to_wave left_means_touch_or_check first_part_visible
   seq spinchainpart2 []
   seq spinchainpart3 []

call "spin chain the line" c3a
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
                   /* If we use "swing" instead of "trade", it would give warning
                      "do your part" when done from 1-faced line, which dancers
                      might misconstrue during the cast off parts.  The behavior
                      "swing" needs to be changed so that it gives an error
                      unless the "two-faced" modifier is given. */
   seq spinchainpart2 []
   seq spinchainpart3 []

call "_spin chain the line part 2" dontshow tag spinchainpart2
   checkpoint slip [] cast_off_34 [conc_force_lines suppress_elongation_warnings]

call "_spin chain the line part 3" dontshow tag spinchainpart3
   conc cast_off_34 [] nullcall []

call "swing chain the line" c4
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
                   /* If we use "swing" instead of "trade", it would give warning
                      "do your part" when done from 1-faced line, which dancers
                      might misconstrue during the cast off parts.  The behavior
                      "swing" needs to be changed so that it gives an error
                      unless the "two-faced" modifier is given. */
   seq swingchainpart2 []
   seq swingchainpart3 []

call "_swing chain the line part 2" dontshow tag swingchainpart2
   checkpoint slip [] cast_off_14 [conc_force_lines suppress_elongation_warnings]

call "_swing chain the line part 3" dontshow tag swingchainpart3
   conc cast_off_14 [] nullcall []

call "divide the ocean @h" c3
       single_is_inherited
   seq divide_oceansea_1 [inherit_single]
   seq divide_ocean_2 [inherit_single]
   seq divide_oceansea_3d []

call "divide the sea @h" c3
       single_is_inherited
   seq divide_oceansea_1 [inherit_single]
   seq divide_sea_2 [inherit_single]
   seq divide_oceansea_3d []

call "divide the ocean @0" c3
       single_is_inherited
   seq divide_oceansea_1 [inherit_single]
   seq divide_ocean_2 [inherit_single]
   seq divide_oceansea_3c []

call "divide the sea @0" c3
       single_is_inherited
   seq divide_oceansea_1 [inherit_single]
   seq divide_sea_2 [inherit_single]
   seq divide_oceansea_3c []

call "_divide the ocean/sea, part 1" dontshow tag divide_oceansea_1
           single_is_inherited
   maybesinglecrossconc cast_off_34 [inherit_single] hinge [conc_force_lines suppress_elongation_warnings]

call "_divide the ocean, part 2" dontshow tag divide_ocean_2
           single_is_inherited
   maybesingleconc verticalhalftag [inherit_single] partnertagbypairs [inherit_single conc_force_columns]

call "_divide the sea, part 2" dontshow tag divide_sea_2
           single_is_inherited
   maybesingleconc verticallefthalftag [inherit_single] partnertagbypairs [inherit_single conc_force_columns]

call "_divide the ocean/sea @h, part 3" dontshow tag divide_oceansea_3d
           single_is_inherited
   maybesingleconc nullcall [] quarter_maybe [conc_force_spots]

call "_divide the ocean/sea @0, part 3" dontshow tag divide_oceansea_3c
           single_is_inherited
   maybesingleconc nullcall [] nullcall [mandatory_anycall]

call "along" c2 tag along
   setup 1x8 2x4 rotate
   array [0N 2S 0S 6S 7S 5N 7N 1N]

call "@2swing @3along" c2
   seq swing [or_anycall]
   seq along []

call "_an anchor but but" dontshow tag ananchorbutbut
   setup 1x8 qtag
      array [CR0E CR6S CR3S AL5E AL1W AL2S AL7S CR4W]

call "centers swing/slip but" dontshow tag ctrsswingslipbut
   /* We don't say "force_columns" or similar things for the pass in.  If it
      gets replaced, we want the people to do whatever they think is right. */
   conc swingslip [allow_plain_mod] pass_in [conc_demand_lines allow_forced_mod]

call "an anchor" c4 tag ananchor
   seq ananchorbutbut []
   seq ctrsswingslipbut []

call "@2swing @3an anchor" c4
            yoyo_is_inherited first_part_visible
   seq swing [or_anycall inherit_yoyo]
   seq ananchorbutbut []
   seq ctrsswingslipbut []

call "@2cast @3an anchor" c4
            first_part_visible
   seq cast_off_34 [or_anycall]
   seq ananchorbutbut []
   seq ctrsswingslipbut []

call "_finish relay your pleasure" dontshow tag fin_relay_pleasure
            step_to_wave left_means_touch_or_check
   setup 1x8 qtag rotate restriction forbidden wave_only
      array [C7N CCR4N CM2S AL4N A7S AAL1S AM2N CR1S]

call "relay your pleasure" c4a
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fin_relay_pleasure []

call "shake and rattle" c3
            reverse_means_mirror
   setup 2x2 2x2
      array [CR1W CR2W AL3W AL0W]
            alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [AL0S CR1S]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [AL0W AL1W CR2W CR3W]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [CR0S CR1S CR2S AL3S AL4S AL5S]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [CR0S CR1S CR2S CR3S AL4S AL5S AL6S AL7S]

call "catch @1@9" c2
            split_like_square_thru cross_is_inherited
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq slip [or_anycall]
   seq stepnfold [inherit_cross]

call "catch @0 @9" c2
            split_like_square_thru cross_is_inherited
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq nullcall [mandatory_anycall]
   seq stepnfold [inherit_cross]

call "_centers step and fold" dontshow tag ctrsstepnfold
            cross_is_inherited
   conc stepnfold [inherit_cross] nullcall []

call "catch @0 @9, only the resulting centers finish" c3
            split_like_square_thru cross_is_inherited
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq nullcall [mandatory_anycall]
   seq ctrsstepnfold [inherit_cross]

call "@eright@f on @9" c4a
            split_like_square_thru
            left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq finish_right_on []

call "square thru @9" mainstream
            split_like_square_thru left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq natstepthru []

call "square thru, but on the @u hand, @0" plus
            split_like_square_thru left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq nullcall [mandatory_anycall]

call "square thru @9 to a wave" c1
            split_like_square_thru left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]

call "square thru @9, @6 to a wave" c1
            split_like_square_thru left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq somedontstepthru []

call "square thru 2" dontshow tag square_thru_2
            split_like_square_thru rear_back_from_r_wave
   setup 2x2 2x2 restriction not_tboned
      array [0 0 AM0W CM1E]

call "square thru 3" dontshow tag square_thru_3
            split_like_square_thru rear_back_from_r_wave
   setup 2x2 2x2 restriction not_tboned
      array [0 0 AM3S CM2S]

call "square thru 4" dontshow tag square_thru_4
            split_like_square_thru rear_back_from_r_wave
   setup 2x2 2x2 restriction not_tboned
      array [0 0 AM2E CM3W]

call "split square thru 2" dontshow tag splitsq2
   setup 4x2 2x4
      array [0 0 ZM3N 0 0 ZM4N 0 0]
   setup 2x4 2x4
      array [0 0 0 0 ZM2W 0 0 ZM1E]

call "split square thru 4" dontshow tag splitsq4
   setup 4x2 2x4
      array [0 0 ZM5S 0 0 ZM2S 0 0]
   setup 2x4 2x4
      array [0 0 0 0 ZM4E 0 0 ZM7W]

call "_funny square thru main" dontshow tag funnysquaremain
            left_means_mirror
   setup 2x2 2x2
      preds "?"
         if x22_facing_someone [0    0    AL1W CR0E]
         if always             [ZM0N ZM1N ZM2N ZM3N]

call "_funny square thru finish" dontshow tag funnysquarefinish
   setup 2x2 2x2
      preds "?"
         if x22_facing_someone [0    0    ZM1N ZM0N]
         if always             [ZM0N ZM1N ZM2N ZM3N]

call "funny square thru @9" c2
            neednumber rear_back_from_r_wave left_means_mirror
   seq funnysquaremain [inherit_left repeat_nm1]
   seq funnysquarefinish []

call "square turn thru @9" c3x
            split_like_square_thru left_means_mirror yoyo_is_inherited neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq natturnthru [inherit_yoyo]

call "square turn thru @9 to a wave" c3x
            split_like_square_thru left_means_mirror yoyo_is_inherited neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq trade [inherit_yoyo]

call "square turn thru @9, @6 to a wave" c3x
            split_like_square_thru left_means_mirror neednumber
   seq touch [inherit_left]
   seq crosslockit [repeat_nm1]
   seq trade []
   seq somedontstepthru []

call "step thru" mainstream
            left_means_mirror
   setup 1x2 1x2 rotate
      array [Z0W 0]

call "_natural step thru" dontshow tag natstepthru
   setup 1x2 1x2 rotate
      array [Z0W Z0W]

call "_some dont step thru" dontshow tag somedontstepthru
   setup 1x2 1x2 rotate qualifier none_sel
      array [Z0W Z0W]
   setup 1x2 1x2 qualifier all_sel
      array [Z0N Z1N]

call "turn thru" mainstream tag turnthru
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2
      array [C0S 0]
            alternate_definition [yoyo] c4
   setup 2x1 1x2 rotate
      array [C0S 0]

call "left turn thru" dontshow tag leftturnthru
            left_means_mirror
   setup 2x1 1x2
      array [A0S 0]

call "left turn thru to a wave" dontshow tag leftturnthrutowave
            left_means_mirror
   setup 2x1 1x2 rotate
      array [AL0E 0]

call "_natural turn thru" dontshow tag natturnthru
   setup 1x2 1x2 rotate restriction forbidden wave_only
      array [C1E A1E]
            alternate_definition [yoyo] c4
   setup 1x2 1x2 restriction forbidden wave_only
      array [C0W A1E]

call "pair off" a1
   setup 2x2 2x2
      array [0 0 CR2E AL3W]
   setup 2x4 2x4
      array [0 0 0 0 CR4E CR5E AL6W AL7W]

call "short and sweet" c4a
            reverse_means_mirror
   setup 2x2 2x2
      array [R1E R2W M3W R0E]

call "short cut" c4a
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 AM3W CR0E]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [AM0W CR1E 0 0]

call "nip and tuck" c4a
            left_means_mirror
   setup 2x2 2x2
      array [CR3W CR2W 0 0]

call "fan thru" c3x
            rear_back_from_r_wave left_means_mirror no_elongation_allowed
   setup 2x2 2x2
      array [0 0 AM3S ZM0N]

call "fan thru to a wave" c3x
            rear_back_from_r_wave left_means_mirror
   setup 2x2 1x4
      array [0 0 M1S M0N]

call "cross trail thru" a1 tag crosstrail
   setup 2x2 2x2 restriction not_tboned
      array [0 0 ZM0N ZM1N]

call "_turn and Q part 1" dontshow tag turn_and_q_1
            split_like_dixie_style rear_back_from_r_wave rear_back_from_qtag
            left_means_mirror
   setup 2x1 1x2 qualifier not_split_dixie   /* This is turn thru, of course. */
      array [C0S 0]
   setup 2x2 2x2 qualifier split_dixie
      preds "?"
         if x22_facing_someone [0 0 CR2S CR3S]
         if always             [0 0 ZM2N ZM3N]

call "_turn and Q part 2" dontshow tag turn_and_q_2
   setup 2x2 2x2
      /* If we are doing "split turn and Q", we need to be careful, so we place
         a 2x2 definition here that is sensitive to people being T-boned. */
      preds "?"
         if x22_facing_someone [CR0E AL1W 0 0]  /* Back-to-back with them, actually. */
         if always             [0 0 ZM2N ZM3N]
   setup 1x2 1x2        /* This is quarter in, of course. */
      array [CR0E AL1W]

call "turn and Q" c4a
            split_like_dixie_style left_means_mirror visible_fractions
   seq turn_and_q_1 [inherit_left]
   seq turn_and_q_2 []
   seq leftturnthru [inherit_left]

call "turn and Q to a wave" c4a
            split_like_dixie_style left_means_mirror visible_fractions
   seq turn_and_q_1 [inherit_left]
   seq turn_and_q_2 []
   seq leftturnthrutowave [inherit_left]

call "turn and Q, @6 to a wave" c4a
            split_like_dixie_style left_means_mirror
   seq turn_and_q_1 [inherit_left]
   seq turn_and_q_2 []
   seq leftturnthrutowave [inherit_left]
   seq somedontstepthru []

call "turn and flip" c4
            left_means_mirror no_elongation_allowed
   setup 2x2 2x2 restriction not_tboned
      array [0 0 AL3S CM2S]

call "courtesy turn" mainstream tag courtesy
            left_means_mirror
   setup 1x2 1x2 restriction forbidden 2fl_only
      array [AL1S AL0S]

call "right and left thru" mainstream
            visible_fractions no_elongation_allowed left_means_mirror
   seq passthru []
   seq courtesy []

call "turn and left thru" c3x
            visible_fractions yoyo_is_inherited
   seq turnthru [inherit_yoyo]
   seq courtesy []

call "flutter wheel" mainstream
            rear_back_from_qtag reverse_means_mirror no_elongation_allowed
   setup 2x2 2x2 restriction not_tboned
      array [0 0 CR2N CR1S]
            alternate_definition [singlefile] mainstream
   setup 4x1 2x2
      array [CR2S CR3N 0 0]

call "ladies chain" mainstream
            rear_back_from_qtag no_elongation_allowed
   setup 2x2 2x2 restriction not_tboned
      preds "Must be normal couples."
         if boyp [0 0 0 AL3N]
         if girlp [0 0 AL0S 0]
            alternate_definition [singlefile] mainstream
   setup 4x1 2x2
      array [AL0N AL1S 0 0]

call "flare the star" c4a
            reverse_means_mirror no_elongation_allowed
   setup 2x2 2x2 restriction not_tboned
      array [0 0 L2N L1S]

call "bingo" c3 tag bingo
            no_elongation_allowed
   simple_funny
   setup 2x2 2x2 restriction wave_only
      array [AL0E CR1W AL0W CR1E]

call "stack the line" c2
            left_means_mirror
   setup 2x2 2x2 restriction forbidden peelable_box
      array [C1E A3W A2W C0E]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate restriction forbidden peelable_box
      array [C0N C1N C2N A5S A4S A3S]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate restriction forbidden peelable_box
      array [C0N C1N C2N C3N A7S A6S A5S A4S]

call "@6 finish the stack" c4
   setup 2x2 2x2
      preds "Can't tell who is selected."
         if select [0 0 ZM0N ZM0N]
         if unselect [ZM1N ZM1N ZM3N ZM3N]

call "reverse the pass" c3
   setup 2x2 2x2 restriction all_facing_same
      array [CM2S AM3S AL0S CR1S]
call "1/3 reverse the pass" c3
   setup 2x2 2x2 restriction all_facing_same
      array [CR1S AL0S ZM2N ZM3N]
call "1/2 reverse the pass" c3
   setup 2x2 1x4 restriction all_facing_same
      array [CM2S AM1S ZM3N ZM0N]
call "2/3 reverse the pass" c3
   setup 2x2 2x2 restriction all_facing_same
      array [CM2S AM3S ZM1N ZM0N]

call "zoom" mainstream tag zoom
   setup 2x2 2x2 restriction forbidden peelable_box
      array [AL3N CR2N ZM1N ZM0N]
            alternate_definition [half] mainstream
   setup 2x2 1x4 restriction forbidden peelable_box
      array [AL0S CR2S ZM3N ZM1N]

call "zing" c1 tag zing
   setup 2x2 2x2 restriction peelable_box
      array [AL3E CR2W AL1W CR0E]
            alternate_definition [1x2] c4
   setup 3x2 2x3 restriction peelable_box
      array [CR1E CR2E AL0E CR5W AL3W AL4W]
            alternate_definition [2x1] c4
   setup 3x2 2x3 restriction peelable_box
      array [CR2E AL1E AL0E CR5W CR4W AL3W]
            alternate_definition [1x3] c4
   setup 4x2 2x4 restriction peelable_box
      array [CR1E CR2E CR3E AL0E CR7W AL4W AL5W AL6W]
            alternate_definition [3x1] c4
   setup 4x2 2x4 restriction peelable_box
      array [CR3E AL2E AL1E AL0E CR7W CR6W CR5W AL4W]
            alternate_definition [2x2] c4
   setup 4x2 2x4 restriction peelable_box
      array [CR2E CR3E AL1E AL0E CR7W CR6W AL4W AL5W]
            alternate_definition [3x3] c4
   setup 6x2 2x6 restriction peelable_box
      array [CR3E CR4E CR5E AL2E AL1E AL0E CR11W CR10W CR9W AL6W AL7W AL8W]
            alternate_definition [4x4] c4
   setup 8x2 2x8 restriction peelable_box
      array [CR4E CR5E CR6E CR7E AL3E AL2E AL1E AL0E CR15W CR14W CR13W CR12W AL8W AL9W AL10W AL11W]

call "1/2 split trade circulate" c2
            dont_use_in_resolve take_right_hands
   /* We have to use the "forbidden" option, since this def'n
      is slightly sleazy, and wouldn't do the right thing
      from a leftie box. */
   setup 2x2 dmd rotate restriction forbidden magic_only
      array [R0N L0S M1W M3W]

call "_leads run" dontshow tag leadrun
   setup 2x2 2x2 restriction wave_only
      array [R1S L0S M3N M2N]

call "_beaus run" dontshow tag beaurun
   setup 1x2 1x2
      array [CR1S ZM0N]
   setup 2x2 2x2  /* To allow it from T-boned box. */
      array [CR1S ZM0N ZM3N CR2S]

call "_leads kickoff" dontshow tag leadkick
   setup 2x2 2x2
      array [CR1W AL0E AM3W CM2E]

call "_beaus kickoff" dontshow tag beaukick
   setup 1x2 1x2
      array [CR1W AM0W]

call "@6@C run" mainstream
   setup 1x2 1x2
      preds "Can't have both people run."
         if select_near_unselect [CR1S AL0S]
         if unselect_near_select [ZM1N ZM0N]
         if unselect_near_unselect [ZM0N ZM1N]
            alternate_definition [cross] mainstream
   setup 1x4 1x4
      preds "Can't have both people or neither person cross run."
         if select_once_rem_from_unselect   [CR3S CR2S AL1S AL0S]
         if unselect_once_rem_from_select   [ZM1N ZM0N ZM3N ZM2N]

call "_centers cross run" dontshow tag ctrcrossrun  /* Maybe can regularize this someday. */
   setup 1x4 1x4
      array [ZM1N CR2S ZM3N AL0S]
            alternate_definition [half] c1
   setup 1x4 2x2
      array [ZM3N CR1E ZM2N AL0W]
            alternate_definition [grand] c3a
   setup 1x6 1x6
      array [ZM1N CR5S AL0S ZM4N AL2S CR3S]
   setup 1x8 1x8
      array [ZM1N CR2S CR7S AL0S ZM5N AL6S AL3S CR4S]
            alternate_definition [grand half] c3a
   setup 1x6 2x3
      array [ZM5N CR1E AL0W ZM3N AL1W CR2E]
   setup 1x8 2x4
      array [ZM7N CR1E CR2E AL0W ZM4N AL2W AL1W CR3E]

call "@6@C kickoff" c2 tag designeeskick
   setup 2x2 2x2
      preds "Can't tell who is kicking off."
         if select [CR1W AL0E AL3E CR2W]
         if unselect [C1E A0W A3W C2E]    /* Roll is illegal. */
   setup 1x2 1x2
      preds "Can't tell who is kicking off."
         if select [CR1W AL0E]
         if unselect [C1E A0W]    /* Roll is illegal. */
            alternate_definition [cross] c2
   setup 1x4 1x4
      preds "Can't have both people or neither person cross kickoff."
         if select_once_rem_from_unselect   [CR3W CR2W AL1E AL0E]
         if unselect_once_rem_from_select   [C1E  A0W  A3W  C2E]
         if select                          [0    CR2W 0    AL0E]

call "@6@C kick by @9" c3
            neednumber
   /* It would be nice to have better selectors to catch errors if both ends
      are selected, or neither. */
   setup 1x4 1x4 nqualifier 1 none
      preds "Can't tell who is kicking."
         if select_near_unselect   [CR1W 0   AL3E 0  ]
         if unselect_near_select   [Z0N  A0W Z2N  C2E]
         if unselect_near_unselect [Z0N  Z1N Z2N  Z3N]
   setup 1x4 1x4 nqualifier 2 none
      preds "Can't tell who is kicking."
         if select_near_unselect   [CR3W 0   AL1E 0  ]
         if unselect_near_select   [Z0N  A0W Z2N  C2E]
         if unselect_near_unselect [Z0N  C3E Z2N  A1W]
   setup 1x4 1x4 nqualifier 3 none
      preds "Can't tell who is kicking."
         if select_near_unselect   [CR2W 0   AL0E 0  ]
         if unselect_near_select   [C1E  A0W A3W  C2E]
         if unselect_near_unselect [C1E  C3E A3W  A1W]
            alternate_definition [cross] c3
   setup 1x8 1x8 nqualifier 1 none
      preds "Can't tell who is kicking."
         if select   [0   0   CR7W 0   0   0   AL3E 0  ]
         if unselect [Z0N Z1N 0    C2E Z4N Z5N 0    A6W]
   setup 1x8 1x8 nqualifier 2 none
      preds "Can't tell who is kicking."
         if select   [0   0   CR5W 0   0   0   AL1E 0  ]
         if unselect [Z0N C3E 0    C2E Z4N A7W 0    A6W]
   setup 1x8 1x8 nqualifier 3 none
      preds "Can't tell who is kicking."
         if select   [0   0   CR4W 0   0   0   AL0E 0  ]
         if unselect [C1E C3E 0    C2E A5W A7W 0    A6W]

call "bounce the @6" c2
            visible_fractions single_is_inherited
   /* Selector identities *do not* get re-evaluated between parts of a sequential
      call, which makes this work.  Compare wave the <anyone>. */
   seq bounce1 [inherit_single]
   seq bounce2 []

/* These used to be:
call "_bounce the @6 part 1" dontshow tag bounce1
   ** We set up roll and stability info, even though no one turns. **
   setup 1x4 2x2 restriction forbidden 2fl_only
      preds "Can't tell who is designated."
         if select   [CR0N CR1N AL1N AL0N]
         if unselect [ZM0N ZM1N ZM1N ZM0N]
            alternate_definition [single] c2
   setup 1x2 1x2 rotate
      preds "Can't tell who is designated."
         if select   [CR0W AL0W]
         if unselect [ZM0W ZM0W]

call "_bounce part 2" dontshow tag bounce2
   setup 1x1 1x1
      preds "?"
         if roll_is_cw  [CR0S]
         if roll_is_ccw [AL0S]
         if always      [ZM0N]
*/

call "_bounce the @6 part 1" dontshow tag bounce1
   /* We set up roll info, even though no one turns.  This is slightly bogus, but moderately glorious. */
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [ZR0N ZR1N ZL1N ZL0N]
            alternate_definition [single] c2
   setup 1x2 1x2 rotate
      array [ZR0W ZL0W]

call "_bounce part 2" dontshow tag bounce2
   setup 1x1 1x1
      preds "Can't tell who is designated."
         if select_and_roll_is_cw  [CR0S]
         if select_and_roll_is_ccw [AL0S]
         if select   [0S]    /* Someone is screwing around with interruptions -- we lose. */
         if unselect [ZM0N]

call "mark time" c4a
   setup 4x2 2x4 rotate restriction wave_only
      array [CAL3S CAL4S CCR6N CCR1N AAL2S AAL5S ACR7N ACR0N]
            alternate_definition [single] c4a
   setup 2x2 1x4 restriction wave_only
      array [CCR1E AAL3W ACR0E CAL2W]

call "@6 mark time" c4a
   setup 4x2 2x4 rotate
      preds "Can't tell who is selected."
         if select   [    0     0 CCR6N CCR1N AAL2S AAL5S     0     0]
         if unselect [CAL3S CAL4S  CR3S  CR4S  AL7N  AL0N ACR7N ACR0N]
            alternate_definition [single] c4a
   setup 2x2 1x4
      preds "Can't tell who is selected."
         if select   [CCR1E AAL3W     0     0]
         if unselect [ CR2W  AL0E ACR0E CAL2W]

call "box counter rotate" a2 tag boxctrrot
   simple_funny
   setup 2x2 2x2
      array [CR1E AL0W AL1W CR0E]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate
      array [CR0N CR1N CR2N AL0S AL1S AL2S]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate
      array [CR0N CR1N CR2N CR3N AL0S AL1S AL2S AL3S]

call "_counter rotate the star" dontshow tag ctrrotstar
   setup dmd dmd rotate
      array [CR0N 0 AL0S 0]
   setup pmd dmd rotate
      array [0 CR1N 0 AL1S]
   setup star star
      array [CR1E 0 AL1W 0]

call "_circulate and quarter in" dontshow tag circ_and_quarter_in
            visible_fractions
   seq box_circ []
   seq quarterin []

call "rotate 1/4" c2 tag rot1
            parallel_conc_end       /* This makes it win if we tell the ends only
                                          to do a single rotate 1/4.  Is this OK? */
            reverse_means_mirror
   setup 4x2 1x8 rotate restriction forbidden couples_only
      array [CAL5W CAL6W AL2E AL1E AL0E AL3E CAL7W CAL4W]
   setup 2x4 1x8 restriction forbidden couples_only
      array [AL1S AL0S AL7S AL6S CAL4N CAL5N CAL2N CAL3N]
   setup 2x2 1x4 restriction forbidden couples_only
      array [AL1S AL0S CAL2N CAL3N]
            /* This variant of the call is only C1, even though the call "rotate"
               itself is C2.  This makes it possible to do a
               squared-set single rotate at C1.  The squared-set rotate,
               legal at C1, invokes this.  Level-checking is not done on
               invocation, but it is done on alternate definitions of invoked
               calls.  Declaring the single version of this call to be C1
               when the call itself is C2 therefore makes this legal from a
               squared set.  Direct use of single rotate at C1 is not legal,
               because it won't get past the C2 level in the call header. */
            alternate_definition [single] c1
   setup 4x2 2x4 rotate
      array [CAL4W CAL5W AL6E AL7E AL0E AL1E CAL2W CAL3W]
   setup 2x4 2x4
      array [AL7S AL0S AL5S AL2S CAL3N CAL4N CAL1N CAL6N]
   setup 2x2 2x2
      array [AL3S AL0S CAL1N CAL2N]
   setup 4x1 1x4 rotate
      array [CAL2W CAL3W AL0E AL1E]
   setup 6x1 1x6 rotate
      array [CAL3W CAL4W CAL5W AL0E AL1E AL2E]
   setup 8x1 1x8 rotate
      array [CAL4W CAL5W CAL6W CAL7W AL0E AL1E AL2E AL3E]
            alternate_definition [singlefile] c4
   setup 4x1 1x4 rotate
      array [CAL2W CAL3W AL0E AL1E]

call "rotate 1/2" c2 tag rot2
            reverse_means_mirror
   setup 4x2 1x8 restriction forbidden couples_only
      array [CAL5W CAL6W AL2E AL1E AL0E AL3E CAL7W CAL4W]
   setup 2x4 2x4 rotate restriction forbidden couples_only
      array [AL5N AL4N AL2N AL3N CAL0S CAL1S CAL7S CAL6S]
   setup 2x2 1x4 rotate restriction forbidden couples_only
      array [AL3N AL2N CAL0S CAL1S]
            alternate_definition [single] c1   /* See comment on "rotate 1/4" above. */
   setup 4x2 2x4
      array [CAL4W CAL5W AL6E AL7E AL0E AL1E CAL2W CAL3W]
   setup 2x4 2x4
      array [AL6E AL7E AL4E AL5E CAL2W CAL3W CAL0W CAL1W]
   setup 2x2 2x2
      array [AL2E AL3E CAL0W CAL1W]
   setup 4x1 1x4
      array [CAL2W CAL3W AL0E AL1E]
   setup 6x1 1x6
      array [CAL3W CAL4W CAL5W AL0E AL1E AL2E]
   setup 8x1 1x8
      array [CAL4W CAL5W CAL6W CAL7W AL0E AL1E AL2E AL3E]
            alternate_definition [singlefile] c4
   setup 4x1 1x4
      array [CAL2W CAL3W AL0E AL1E]

/* We need "conc_force_lines" on these because we already had so-and-so
   go into the center, so they perceive the elongation of the setup
   incorrectly.  The call "rotate 1/4" has the "parallel_conc_end"
   flag on, saying to go to antispots if it was single, which is not
   what we want here. */

call "rotate 1/4 while the others @1" c1
            sequence_starter reverse_means_mirror single_is_inherited dont_use_in_resolve
   crossconc nullcall [mandatory_anycall] rot1 [inherit_reverse inherit_single conc_force_lines]

call "rotate 1/2 while the others @1" c1
            sequence_starter reverse_means_mirror single_is_inherited dont_use_in_resolve
   crossconc nullcall [mandatory_anycall] rot2 [inherit_reverse inherit_single conc_force_lines]

call "trixie" c3x tag trixie
   setup 2x2 2x2
      array [CR0E AL1W CR2E AL3W]

call "trixie spin" c3x
            visible_fractions
   seq trixie []
   seq cast_off_34 []
   seq ctrcrossrun []

call "swap around" a1
            reverse_means_mirror
   setup 2x2 2x2 restriction not_tboned
      array [0 0 ZM1N CR2S]
            alternate_definition [half] c3a
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 ZM1W CR2N]

call "circle 4 clockwise" dontshow tag circle4
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 CR3E CR0E]

call "circle 4 with bogus flow" dontshow tag circle4flow
/* This is, of course, a complete kludge.  Doing these calls correctly
   requires careful work.  It is just a coincidence that the roll
   direction does the right thing for the few instances of the
   preceding call that are popular.  So we use the roll direction,
   but we mark it not to be used by the resolver, since the resolver
   doesn't know which popular calls happen to work correctly with this. */
   setup 2x2 2x2
      preds "Can't determine sweep direction"
         if roll_is_cw  [0 0 CR3E CR0E]
         if roll_is_ccw [0 0 AL1W AL2W]

call "circle by @b X @b" c1
            reverse_means_mirror need_two_numbers
   seq circle4 [inherit_reverse repeat_n]
   seq lft_touch_n_4 [inherit_left shift_one_number]

call "circle by @b X @0" c1
            reverse_means_mirror neednumber
   seq circle4 [inherit_reverse repeat_n]
   seq lft_touch [inherit_left]
   seq nullcall [mandatory_anycall]

call "_touch tone 0 X 0" dontshow tag touchtone00
            left_means_mirror
   setup 2x4 1x8
      array [AL1S 0 CR4S 0 0 ZM6N 0 ZM3N]

call "_finish touch tone @b X @b" dontshow tag fintouchtone
            need_two_numbers
   conc armturn_n4 [] armturn_n4 [suppress_elongation_warnings shift_one_number]

call "touch tone @b X @b" c4a
            left_means_mirror need_two_numbers
   seq touchtone00 [inherit_left]
   seq fintouchtone []

call "sweep @b" mainstream
/* This is, of course, a complete kludge.  Doing these calls correctly
   requires careful work.  It is just a coincidence that the roll
   direction does the right thing for the few instances of the
   preceding call that are popular.  So we use the roll direction,
   but we mark it not to be used by the resolver, since the resolver
   doesn't know which popular calls happen to work correctly with this. */
            dont_use_in_resolve neednumber
   seq circle4flow [repeat_n]

call "by golly" c3
/* This is, of course, a complete kludge.  Doing these calls correctly
   requires careful work.  It is just a coincidence that the roll
   direction does the right thing for the few instances of the
   preceding call that are popular.  So we use the roll direction,
   but we mark it not to be used by the resolver, since the resolver
   doesn't know which popular calls happen to work correctly with this. */
            dont_use_in_resolve
   setup 2x2 2x2
      preds "Can't determine flow direction"
         if roll_is_cw  [0 0 C1E C0E]
         if roll_is_ccw [0 0 A1W A0W]

call "_veer and turn zero" dontshow tag veer_and_turn
            dont_use_in_resolve
   setup 2x2 1x4
      preds "Can't determine veer direction"
         if roll_is_cw  [0 0 ZR1N ZR0N]
         if roll_is_ccw [0 0 ZL3N ZL2N]

call "veer and turn @b X @b" c4
/* See "by golly", above. */
            dont_use_in_resolve need_two_numbers
   seq veer_and_turn []
   seq ctrarmturn_n_ends_roll_n []

call "clean sweep @b" c3x
            reverse_means_mirror neednumber visible_fractions
   seq circle4 [allow_forced_mod inherit_reverse repeat_n]
   seq lft_veer_left [allow_forced_mod inherit_left]
   seq tagtheline [allow_forced_mod inherit_left]
   seq leadsrollright [allow_forced_mod inherit_left]

call "walk and dodge" mainstream tag walkndodge
   setup 2x2 2x2 restriction unusual wave_only
      array [ZM1N ZM0N ZM1N ZM0N]
   /* We used to have a copy of the 2x1 definition (see below) here.
      This made it possible to call plain "walk and dodge" in a 3x2.
      I don't know why I considered that to be something one would want
      to do at mainstream with no concept.  It had the unfortunate
      property of making it impossible to do a plain 4-person version
      in each box while in offset waves.  So I have taken it out. */
            alternate_definition [cross] c4a
   simple_funny
   setup 2x2 2x2 restriction unusual magic_only
      array [ZM1N ZM0N ZM0N ZM1N]
            alternate_definition [grand] c3x
   setup 4x2 2x4 restriction unusual wave_only
      array [ZM2N ZM5N ZM3N ZM4N ZM3N ZM4N ZM2N ZM5N]
            alternate_definition [1x2] c3
   setup 2x3 2x3
      preds "???"
         if inroller_is_cw_2x3 [ZM1N ZM2N    0    0 0 ZM0N]
         if always             [   0 ZM0N ZM1N ZM2N 0 0  ]
            alternate_definition [1x3] c3
   setup 2x4 2x4
      preds "???"
         if inroller_is_cw [ZM1N ZM2N ZM3N    0    0 0 0 ZM0N]
         if always         [   0 ZM0N ZM1N ZM2N ZM3N 0 0    0]
            alternate_definition [2x1] mainstream
               /* Mainstream?  Yes, you can do it if you tell them what you want.
               You will need to toggle concept levels, of course.  The manual
               even mentions this particular call. */
   setup 3x2 2x3 restriction forbidden wave_only
      array [ZM1N ZM2N ZM3N ZM2N ZM3N ZM4N]
            alternate_definition [3x1] c3
   setup 4x2 2x4 restriction forbidden wave_only
      array [ZM1N ZM2N ZM3N ZM4N ZM3N ZM4N ZM5N ZM6N]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate restriction forbidden wave_only
      array [ZM0W ZM1W ZM2W ZM0W ZM1W ZM2W]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [ZM0W ZM1W ZM2W ZM3W ZM0W ZM1W ZM2W ZM3W]

call "with the flow" c2
/* This is, of course, a complete kludge.  Doing these calls correctly
   requires careful work.  It is just a coincidence that the roll
   direction does the right thing for the few instances of the
   preceding call that are popular.  So we use the roll direction,
   but we mark it not to be used by the resolver, since the resolver
   doesn't know which popular calls happen to work correctly with this. */
            dont_use_in_resolve
   setup 2x2 2x2
      preds "Can't determine flow direction"
         if roll_is_cw  [0 0 ZM3N ZM0N]
         if roll_is_ccw [0 0 ZM1N ZM2N]

call "and a quarter more" c4
/* This is, of course, a complete kludge.  Doing these calls correctly
   requires careful work.  It is just a coincidence that the roll
   direction does the right thing for the few instances of the
   preceding call that are popular.  So we use the roll direction,
   but we mark it not to be used by the resolver, since the resolver
   doesn't know which popular calls happen to work correctly with this. */
            dont_use_in_resolve
   setup 1x2 1x2 rotate
      preds "Can't determine flow direction"
         if roll_is_cw  [CR0N CR1N]
         if roll_is_ccw [AL1S AL0S]

call "_like a couple up" dontshow tag like_coupleup
   setup 2x2 2x2
      array [CR0S AL1S M2N M3N]

call "couple up" c3a
   simple_funny
   setup 2x2 2x2
      array [CR1S AL0S AL1S CR0S]
            alternate_definition [3x3] c4
   setup 3x2 2x3 rotate restriction forbidden wave_only
      array [CR0E CR1E CR2E AL0E AL1E AL2E]
            alternate_definition [4x4] c4
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [CR0E CR1E CR2E CR3E AL0E AL1E AL2E AL3E]

call "couple up (by parts)" c3a tag coupleup
        visible_fractions funny_is_inherited
   seq box_circ [inherit_funny or_anycall]
   seq like_coupleup [roll_transparent]

call "@N couple up" c3a
        visible_fractions funny_is_inherited
   seq circnullcall [inherit_funny or_anycall]
   seq like_coupleup [roll_transparent]

call "box counter couple up" c3x
        visible_fractions funny_is_inherited
   seq boxctrrot [inherit_funny]
   seq like_coupleup [roll_transparent]

call "_divide and move along" dontshow tag div_move_along
   setup 2x2 2x2
      array [0S 1S 2N 3N]

call "_real leads divide and move along" dontshow tag real_leads_div_move_along
   setup 2x2 2x2 restriction forbidden leads_only
      array [0S 1S 0 0]
               alternate_definition [cross] c2
   setup 2x2 2x2 restriction forbidden leads_only
      array [1S 0S 0 0]

/* This is used for "ramble", in which we say that it is "unusual" for
   an end to be facing in, but we allow it. */
call "_leads divide and move along" dontshow tag leads_div_move_along
   setup 2x2 2x2 restriction unusual leads_only
      array [0S 1S 2N 3N]
               alternate_definition [cross] c2
   setup 2x2 2x2 restriction forbidden leads_only
      /* but we don't allow "cross ramble" if people are facing in -- too yucky */
      array [1S 0S 0 0]

call "split swap" c2
            reverse_means_mirror
   setup 2x2 2x2
      array [0 0 R1E M2E]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [C3E C2E 0 0]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 R0N R1N R2N]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 R0N R1N R2N R3N]

call "arky star thru" c1
   setup 2x2 2x2
      array [0 0 L1W R0E]

call "mesh" c3x
            reverse_means_mirror
   setup 2x1 1x2 rotate
      preds "???"
         if columns_tandem [M1W M0W]
         if always         [M1W 0]

call "curlique" c3x tag curlique
            rear_back_from_r_wave left_means_mirror
   setup 2x1 1x2 restriction forbidden opposite_sex
      preds "Unknown sex."
         if boyp  [CR1E 0]
         if girlp [AL1E 0]

call "curli-cross" c3x
            rear_back_from_r_wave grand_is_inherited visible_fractions
   seq curlique [allow_forced_mod]
   seq and_cross [inherit_grand]

call "_finish curli-wheel" dontshow tag fincurliwheel
   setup 2x2 2x2 restriction unusual wave_only
      array [CR1S AL0S AM1S CM0S]

call "curli-wheel" c3x
            rear_back_from_r_wave left_means_mirror first_part_visible
   seq curlique [allow_forced_mod]
   seq fincurliwheel []

call "curli-cross the top" c4
            rear_back_from_r_wave grand_is_inherited left_means_mirror first_part_visible
   seq curlique [allow_forced_mod]
   seq armturn_14 []
   seq fanthetop [inherit_grand]

call "cross and turn" c1
            reverse_means_mirror
   simple_funny
   setup 2x2 2x2
      array [0 0 A2S Z1N]

call "circle to a wave" c2
            reverse_means_mirror
   setup 2x2 2x2 restriction not_tboned
      array [0 0 C0E C1E]
            alternate_definition [single] plus
   setup 2x1 1x2 rotate
      array [C1E 0]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [C1E C2E 0 0]
            alternate_definition [3x3] c4
   setup 2x3 2x3
      array [0 0 0 0E 1E 2E]
            alternate_definition [4x4] c4
   setup 2x4 2x4
      array [0 0 0 0 0E 1E 2E 3E]

call "circle 1/2 to a wave" c2
            reverse_means_mirror
   setup 2x2 2x2 rotate restriction not_tboned
      array [0 0 0E 1E]
            alternate_definition [singlefile] c4
   setup 4x1 2x2 rotate
      array [1E 2E 0 0]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 0E 1E 2E]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 0E 1E 2E 3E]

call "cross back" c2 tag crossback
   simple_funny
   setup 2x2 2x2 restriction wave_only
      array [CR0S AL1S ZM0N ZM1N]
            alternate_definition [grand] c2
   setup 4x2 2x4 restriction wave_only
      array [ZM6N ZM5N ZM4N CR3S AL4S ZM3N ZM2N ZM1N]

call "shakedown" c1 tag shakedown
            left_means_mirror
   setup 2x2 2x2
      array [CR1W CR2W 0 0]
            alternate_definition [single] c4
   setup 2x1 1x2 rotate
      array [0 CR1S]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [0 0 CR2W CR3W]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [CR0S CR1S CR2S 0 0 0]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [CR0S CR1S CR2S CR3S 0 0 0 0]

call "mini shake" c3x
            left_means_mirror
   setup 2x2 2x2
      array [CR1W CR2W AL1W CR0E]

call "wheel thru" a1
            left_means_mirror
   setup 2x2 2x2
      array [0 0 CR2E CR1E]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 CR2N CR1N CR0N]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 CR3N CR2N CR1N CR0N]

call "lead @eright@f" mainstream
            left_means_mirror
   setup 2x2 2x2
      array [0 0 CR2E CR1E]

call "wheel fan thru" c1
            left_means_mirror
   setup 2x2 2x2
      array [0 0 CR2E C3W]

call "wheel fan & cross thru" c3x
            left_means_mirror
   setup 2x2 2x2
      array [0 0 C1E C0W]

call "ripoff" c3
            reverse_means_mirror
   setup 2x2 2x2
      array [CR1S CR2N ZM3N ZM0N]
            alternate_definition [singlefile] c4
   setup 4x1 2x2
      array [ZM0N ZM1N CR2S CR3N]

call "boomerang" c3
   setup 2x2 2x2 restriction forbidden peelable_box
      preds "Can't tell which definition to use."
         if x22_miniwave [L3N R2N M3S M2S]
         if x22_couple [L3N R2N L0S R1S]

call "_leads wheel" dontshow tag leadswheel
            reverse_means_mirror
   setup 2x2 2x2 restriction all_facing_same
      array [AL1S AL0S ZM2N ZM3N]
            alternate_definition [3x3] c4
   setup 2x3 2x3 restriction all_facing_same
      array [AL2S AL1S AL0S ZM3N ZM4N ZM5N]
            alternate_definition [4x4] c4
   setup 2x4 2x4 restriction all_facing_same
      array [AL3S AL2S AL1S AL0S ZM4N ZM5N ZM6N ZM7N]

call "_everyone wheel" dontshow tag everyonewheel
            reverse_means_mirror
   setup 1x2 1x2 restriction forbidden couples_only
      array [AL1S AL0S]
            alternate_definition [3x3] c4
   setup 2x3 2x3
      array [AL2S AL1S AL0S 0 0 0]
            alternate_definition [4x4] c4
   setup 2x4 2x4
      array [AL3S AL2S AL1S AL0S 0 0 0 0]

call "_ @B wheel" dontshow tag oddfracwheel
            reverse_means_mirror neednumber parallel_conc_end
   setup 1x2 1x2 rotate restriction forbidden couples_only nqualifier 1 none
      array [AL1S AL0S]
   setup 1x2 1x2 rotate restriction forbidden couples_only nqualifier 3 none
      array [AL0N AL1N]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only nqualifier 1 none
      array [0 0 0 AL0S AL1S AL2S]
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only nqualifier 3 none
      array [AL5N AL4N AL3N 0 0 0]
            alternate_definition [3x1] c4
   setup 1x4 2x3 rotate nqualifier 1 none
      preds "Can't find couples of 3."
         if lines_couple   [0 0    AL0S AL1S]
         if lines_miniwave [0 AL2S AL1S 0]
   setup 1x4 2x3 rotate nqualifier 3 none
      preds "Can't find couples of 3."
         if lines_couple   [AL5N AL4N 0 0]
         if lines_miniwave [AL4N 0    0 AL3N]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only nqualifier 1 none
      array [0 0 0 0 AL0S AL1S AL3S AL2S]
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only nqualifier 3 none
      array [AL7N AL6N AL4N AL5N 0 0 0 0]

call "_finish wheel the ocean" dontshow tag finwheelocean
            reverse_means_mirror split_large_setups
   setup 2x2 2x2
      /* Note that we allow left miniwaves, so we can have
         so-and-so start a wheel the ocean. */
      array [0 ZM1N ZM0N ZM3N]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 ZM5W ZM4W ZM3W]
            alternate_definition [3x1] c4
   setup 2x3 2x3 rotate
      array [0 0 0 ZM5W ZM4W ZM3W]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 ZM7W ZM6W ZM5W ZM4W]

call "_finish wheel the sea" dontshow tag finwheelsea
            reverse_means_mirror split_large_setups
   setup 2x2 2x2
      array [0 0 ZM1N ZM2N]
            alternate_definition [3x3] c4
   setup 2x3 2x3 rotate
      array [0 0 0 ZM0W ZM1W ZM2W]
            alternate_definition [3x1] c4
   setup 2x3 2x3 rotate
      array [0 0 0 ZM0W ZM1W ZM2W]
            alternate_definition [4x4] c4
   setup 2x4 2x4 rotate
      array [0 0 0 0 ZM0W ZM1W ZM2W ZM3W]

call "_finish wheel to a diamond" dontshow tag finwheeltodiamond
            reverse_means_mirror
   setup 2x2 dmd rotate
      array [0 0 3W L2S]

call "leads wheel the ocean" c2
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq leadswheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelocean [inherit_reverse inherit_3x3 inherit_4x4]

call "leads wheel the sea" c2
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq leadswheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelsea [inherit_reverse inherit_3x3 inherit_4x4]

call "leads wheel to a diamond" c4
            reverse_means_mirror visible_fractions
   seq leadswheel [inherit_reverse]
   seq finwheeltodiamond [inherit_reverse]

call "wheel the ocean" c2
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq everyonewheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelocean [inherit_reverse inherit_3x3 inherit_4x4]

call "wheel the sea" c2
            reverse_means_mirror 3x3_is_inherited 4x4_is_inherited visible_fractions
   seq everyonewheel [inherit_reverse inherit_3x3 inherit_4x4]
   seq finwheelsea [inherit_reverse inherit_3x3 inherit_4x4]

call "wheel to a diamond" c4
            reverse_means_mirror visible_fractions
   seq everyonewheel [inherit_reverse]
   seq finwheeltodiamond [inherit_reverse]

call "@B wheel the ocean" c3a
            reverse_means_mirror neednumber 3x3_is_inherited 3x1_is_inherited 4x4_is_inherited visible_fractions
   seq oddfracwheel [inherit_reverse inherit_3x3 inherit_3x1 inherit_4x4]
   seq finwheelocean [inherit_reverse inherit_3x3 inherit_3x1 inherit_4x4]

call "@B wheel the sea" c3a
            reverse_means_mirror neednumber 3x3_is_inherited 3x1_is_inherited 4x4_is_inherited visible_fractions
   seq oddfracwheel [inherit_reverse inherit_3x3 inherit_3x1 inherit_4x4]
   seq finwheelsea [inherit_reverse inherit_3x3 inherit_3x1 inherit_4x4]

call "@B wheel to a diamond" c4
            reverse_means_mirror neednumber visible_fractions
   seq oddfracwheel [inherit_reverse]
   seq finwheeltodiamond [inherit_reverse]

call "chase @eright@f" plus
            left_means_mirror
   setup 2x2 2x2
      /* The original beau cannot roll.  It is box circulate two positions.
         Callerlab plus definitions, page 1. */
      array [CM2S CR3N 0 0]

call "mini chase" c3a
            left_means_mirror
   setup 2x2 2x2
      array [CR1E CR2W 0 0]

call "fan and cross thru" c4
            rear_back_from_r_wave left_means_mirror
   setup 2x2 2x2
      array [0 0 AM2S ZM1N]

call "square chain thru" a1
            split_like_square_thru left_means_mirror yoyo_is_inherited grand_is_inherited
   seq touch [inherit_left]
   seq crosslockit []
   seq trade [inherit_yoyo]
   seq maybegrandslip [inherit_grand]
   seq trade []
   seq natstepthru []

call "square chain thru to a wave" c1
            split_like_square_thru left_means_mirror yoyo_is_inherited grand_is_inherited
   seq touch [inherit_left]
   seq crosslockit []
   seq trade [inherit_yoyo]
   seq maybegrandslip [inherit_grand]
   seq trade []

call "square chain thru, @6 to a wave" c1
            split_like_square_thru left_means_mirror yoyo_is_inherited grand_is_inherited
   seq touch [inherit_left]
   seq crosslockit []
   seq trade [inherit_yoyo]
   seq maybegrandslip [inherit_grand]
   seq trade []
   seq somedontstepthru []

call "square chain the top" c1
            split_like_square_thru yoyo_is_inherited left_means_mirror
   seq touch [inherit_left]
   seq crosslockit []
   seq trade [inherit_yoyo]
   seq fanthetop []
   seq trade []
   seq natstepthru []

call "square chain the top to a wave" c1
            split_like_square_thru yoyo_is_inherited left_means_mirror
   seq touch [inherit_left]
   seq crosslockit []
   seq trade [inherit_yoyo]
   seq fanthetop []
   seq trade []

call "square chain the top, @6 to a wave" c1
            split_like_square_thru yoyo_is_inherited left_means_mirror
   seq touch [inherit_left]
   seq crosslockit []
   seq trade [inherit_yoyo]
   seq fanthetop []
   seq trade []
   seq somedontstepthru []

call "@1@7 like a @8recoil" c3a tag recoil
            singlefile_is_inherited diamond_is_legal cross_is_inherited visible_fractions
   seq splitrecycle [or_anycall inherit_singlefile inherit_diamond inherit_cross]
   seq stepnfold [inherit_cross]

call "right anchor 1/4" c3x
   setup 2x2 2x2
      array [0 0 R2E R1E]

call "right anchor 3/4" c3x
   setup 2x2 2x2
      array [R2W R1W 0 0]

call "follow your leader" c3a
   setup 2x4 2x4 restriction wave_only
      array [4W 6E 5W 7E 4E 6W 5E 7W]
            alternate_definition [3x3 12matrix] c4   /* Same as 12 matrix */
   setup 2x6 2x6 restriction wave_only
      array [6W 9E 7W 10E 8W 11E 6E 9W 7E 10W 8E 11W]
            alternate_definition [4x4 16matrix] c4   /* Same as 16 matrix */
   setup 2x8 2x8 restriction wave_only
      array [8W 12E 9W 13E 10W 14E 11W 15E 8E 12W 9E 13W 10E 14W 11E 15W]
            alternate_definition [12matrix] c4
   setup 2x6 2x6 restriction wave_only
      array [6W 9E 7W 10E 8W 11E 6E 9W 7E 10W 8E 11W]
            alternate_definition [16matrix] c4
   setup 2x8 2x8 restriction wave_only
      array [8W 12E 9W 13E 10W 14E 11W 15E 8E 12W 9E 13W 10E 14W 11E 15W]

call "3X1 follow your leader" c4    /* Sigh.... the "left" business makes this dificult. */
            left_means_mirror
   setup 2x4 2x4
      array [4W 5W 0 6W 0 0 7W 0]

call "1X3 follow your leader" c4    /* Sigh.... the "left" business makes this dificult. */
            left_means_mirror
   setup 2x4 2x4
      array [0 4W 0 0 5W 0 6W 7W]

call "switch your leader" c3a
   seq armturn_14 []
   seq leader []

call "gee whiz" c3
   setup 2x4 2x4 rotate
      preds "Can't do this call."
         if lines_miniwave [M5E M5E M2E M2E M0W M0W M7W M7W]
         if lines_couple [R0E R1E L6E L7E M0W M1W M7W M6W]

call "straight fire" c3x
   setup 2x4 2x4 rotate restriction 2fl_only
      array [CR0E CM1E AM6E AL7E ZM1W AM4E CM3E ZM6W]
   setup pqtag 2x4
      array [ZM2N CR4S 0 0 AL3S ZM5N 0 0]
   setup qtag 2x4
      array [0 0 AM5S CM4S 0 0 CM6S AM7S]
            alternate_definition [yoyo] c4
   setup 2x4 2x4 rotate restriction wave_only
      array [CR0E CM6S AM1N AL7E ZM1W AM3N CM4S ZM6W]
   setup pqtag 2x4 restriction nice_diamonds
      array [ZM2N CR4S 0 0 AL3S ZM5N 0 0]
   setup qtag 2x4 restriction nice_diamonds
      array [0 0 AM4E CM5W 0 0 CM7W AM6E]

call "straight connect" c4
   setup qtag 2x4 restriction nice_diamonds
      array [0   0    AM2W CM3E  0   0  CM1E AM0W]
   setup pqtag 2x4 restriction nice_diamonds
      array [ZM2N CR4S  0   0  AL3S ZM5N 0 0]

call "straight wheel and deal" c4
   setup 2x4 2x4 rotate restriction 2fl_only
      array [CR0E CR7E AL0E AL7E ZM1W AL2E CR5E ZM6W]

call "fiddle around" c3x
   setup 2x4 2x4 rotate restriction 2fl_only
      array [R0E R1W L6W L7E M1W L4W R3W M6W]

call "lead the class" c4
   setup 2x4 2x4 restriction wave_only
      array [CR4W AL6E CR5W AL7E AL0E CCR6E AAL5W CR3W]

call "go first class" c3x
   simple_funny
   setup 2x4 2x4 restriction wave_only
      array [R2S L0S R3S L1S M3N M1N M2N M0N]
   setup 4x2 2x4
      array [M1N M5N 0 0 0 0 M2N M6N]

call "with a touch of class" c4a
   setup 2x4 2x4 restriction forbidden wave_only
      array [5S 7S 4S 6S 0S 6N 5N 3S]

call "link up" c3a
   setup 2x4 2x4 restriction 2fl_only
   array [7S 0S 3S 4S 1S 6S 5S 2S]
call "and anything" c3x          /* **** not right, need to allow for pushy cast */
   setup 2x4 2x4
   array [0S 2S 1S 3S 4S 6S 5S 7S]

call "_finish set back" dontshow tag finish_set_back
            funny_is_inherited
   conc crossback [inherit_funny] circulate [conc_demand_lines conc_force_lines endscando inherit_funny]

call "set back" c4a
            funny_is_inherited visible_fractions
   seq trade []
   seq finish_set_back [inherit_funny]

call "trade the diamond" c3
            left_means_mirror visible_fractions
   seq trade_duck []
   seq sglctrhinge [inherit_left]  /* Can't modify -- dancers wouldn't know
                             whether we meant this one */
   seq diamondcirc [allow_forced_mod]
   seq sglctrhinge [inherit_left]  /* Or this one */

call "_hinge and single centers hinge" dontshow tag hingesglctrhinge
   seq hinge []
   seq sglctrhinge []

call "_centers hinge" dontshow tag ctrhinge
            left_means_mirror
   conc hinge [inherit_left] nullcall []

call "_single centers hinge" dontshow tag sglctrhinge
            left_means_mirror
   singleconc hinge [inherit_left] nullcall []

call "you all" c4 tag youall
            left_means_mirror
   singleconc_together hinge [inherit_left] uturnback []

call "reverse the diamond" c4
   conc tradethewave [] uturnback []

call "beep beep" c4
            visible_fractions
   seq hinge [allow_forced_mod]
   seq youall []

call "ends cut in" c4
   setup 2x4 2x4
   array [2S 0S 3S 1S 2N 4S 7S 1N]
call "centers cut out" c4
   setup 2x4 2x4
   array [1S 3S 0S 2S 5S 3N 0N 6S]

call "relay the diamond" c4a
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fin_relay_diamond []

call "_finish relay the diamond" dontshow tag fin_relay_diamond
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
   array [5S 7N 4N 6S 1S 7S 4S 2S]

call "_gamut inner part 2" dontshow tag gamutinner2
   seq slip []
   seq tradethewave [allow_forced_mod]

call "_gamut part 1" dontshow tag gamut1
   conc armturn_34 [] circulate [conc_demand_lines conc_force_lines]

call "_gamut part 2" dontshow tag gamut2
   conc gamutinner2 [] circulate [conc_demand_lines conc_force_lines]

call "gamut" c3a
            first_part_visible
   seq gamut1 []
   seq gamut2 []
   seq cutdiamond [allow_forced_mod]

call "the gamut" c3a
            first_part_visible
   seq gamut1 []
   seq gamut2 []
   seq cutdiamond [allow_forced_mod]

call "ease off" c3a
   conc circ_and_quarter_in [] zing [conc_demand_lines conc_force_columns endscando]

call "relay the deucey" plus
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fin_relay_deucey []

call "_finish relay the deucey" dontshow tag fin_relay_deucey
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
   array [5N 4N 7N 6N 1N 0N 3N 2N]

call "barrel of fun" c4a
   setup 2x4 2x4
      array [L2N R4S L1S R3S 0 R0N L5N 0]

call "roll em" c4a
            left_means_mirror
   setup 2x4 2x4
      array [CR1S CR2S CR3S CR4N 0 0 0 0]
   setup 2x3 2x3
      array [CR1S CR2S CR3N 0 0 0]
            alternate_definition [12matrix] c4a
   setup 2x6 2x6
      array [CR1S CR2S CR3S CR4S CR5S CR6N 0 0 0 0 0 0]
            alternate_definition [16matrix] c4a
   setup 2x8 2x8
      array [CR1S CR2S CR3S CR4S CR5S CR6S CR7S CR8N 0 0 0 0 0 0 0 0]

call "roll out the barrel" c4a
            left_means_mirror
   setup 2x4 2x4
   array [1N 6N 7N 0N 0 0 0 0]

call "_line to line part 1" dontshow tag line_line_1
   conc turnthru [] pass_in [conc_demand_lines conc_force_columns]

call "_line to line part 2" dontshow tag line_line_2
   crossconc passthru [conc_demand_columns] clover [conc_demand_lines conc_force_columns]

call "line to line" c3
            visible_fractions
   seq line_line_1 []
   seq line_line_2 []
   seq pass_in [allow_plain_mod]

call "_centers plan ahead" dontshow tag cplan
            rear_back_from_r_wave left_means_mirror
   setup 2x2 2x2
      array [0 0 CCR0E CAL1W]

call "_ends plan ahead" dontshow tag eplan
            rear_back_from_r_wave left_means_mirror
   setup 2x2 2x2
      array [CR3N AACR0S ACR1W CR2W]

call "plan ahead" c3a
            left_means_mirror
   crossconc eplan [conc_demand_lines inherit_left] cplan [conc_force_columns inherit_left]

call "take @9" c3
            left_means_mirror neednumber
   setup 2x4 spindle nqualifier 1 none
      array [CM0E CM1E CM2E CR3W 0 0 0 0]
   setup 2x4 2x4 nqualifier 2 none
      array [CM1E CM2E CR3W CR4W 0 0 0 0]
   setup 2x4 3dmd rotate nqualifier 3 none
      array [CM11N CR0S CR1S CR2S 0 0 0 0]
   setup 2x4 2x4 rotate nqualifier 4 none
      array [CR0S CR1S CR2S CR3S 0 0 0 0]

call "hang loose" c3x
   setup 2x4 2x4 rotate restriction wave_only
      array [AAAACR7N CR1S AL6N CCCCAL0S AACR2S CCAL0S AACR7N CCAL5N]

/* The next few items make clear how useful "criss cross" as a heritable
   modifier will be. */

call "0 steps at a time" c3      /* Can't enter number zero!!!!  Yuk! */
   setup 4x2 2x4 restriction wave_only
      array [CR7W CR6W CR5W CR4W AL3E AL2E AL1E AL0E]

call "@9 steps at a time" c3
            neednumber
   setup 4x2 3x4 rotate restriction wave_only nqualifier 1 none
      array [CR7S CR5S CR2S AL10N CR4S AL1N AL11N AL8N]
   setup 4x2 2x4 rotate restriction wave_only nqualifier 2 none
      array [CR5S CR2S AL0N AL7N CR4S CR3S AL1N AL6N]
   setup 4x2 3x4 rotate restriction wave_only nqualifier 3 none
      array [CR5S AL0N AL10N AL9N CR6S CR4S CR3S AL11N]
   setup 4x2 2x4 restriction wave_only nqualifier 4 none
      array [AL3E AL2E AL1E AL0E CR7W CR6W CR5W CR4W]
            alternate_definition [cross] c3x
   setup 4x2 3x4 rotate restriction wave_only nqualifier 1 none
      array [CR7S CR5S CR2S CR4S AL10N AL1N AL11N AL8N]
   setup 4x2 2x4 rotate restriction wave_only nqualifier 2 none
      array [CR5S CR2S CR3S CR4S AL7N AL0N AL1N AL6N]
   setup 4x2 3x4 rotate restriction wave_only nqualifier 3 none
      array [CR5S CR3S CR4S CR6S AL9N AL10N AL0N AL11N]
   setup 4x2 2x4 restriction wave_only nqualifier 4 none
      array [CR4W CR5W CR6W CR7W AL0E AL1E AL2E AL3E]
            alternate_definition [magic] c3x
   setup 4x2 2x4 rotate restriction magic_only nqualifier 2 none
      array [AL6N CR2S CR3S AL7N CR4S AL0N AL1N CR5S]
            alternate_definition [magic cross] c3x
   setup 4x2 2x4 rotate restriction magic_only nqualifier 2 none
      array [AL6N CR2S AL0N CR4S AL7N CR3S AL1N CR5S]

call "criss cross @9 steps at a time" c3x
            neednumber
   setup 4x2 3x4 rotate restriction wave_only nqualifier 1 none
      array [AL8N AL11N AL1N CR4S AL10N CR2S CR5S CR7S]
   setup 4x2 2x4 rotate restriction wave_only nqualifier 2 none
      array [AL6N AL1N CR3S CR4S AL7N AL0N CR2S CR5S]
   setup 4x2 3x4 rotate restriction wave_only nqualifier 3 none
      array [AL11N CR3S CR4S CR6S AL9N AL10N AL0N CR5S]

call "barge thru" c4
            visible_fractions split_like_square_thru
   seq square_thru_2 [allow_forced_mod]
   seq trade_by [allow_forced_mod]

call "square the barge" c4
            split_like_square_thru
   seq square_thru_4 [allow_forced_mod]
   seq trade_by [allow_forced_mod]

call "square the barge 3/4" c4
            split_like_square_thru
   seq square_thru_3 [allow_forced_mod]
   seq trade_by [allow_forced_mod]

call "wipe out" c4a
   setup 2x4 2x4
   array [2N 3S 0S 1N 6N 7S 4S 5N]
call "stroll down the lane" c4a
            reverse_means_mirror
   setup 2x4 2x4
   array [0 0 0 0 6N 0N 5S 3S]

call "chuck-a-luck" c3
   setup 2x4 2x4
      array [2E 7E 4W 1W 6W 0 0 5E]
            alternate_definition [cross] c3
   setup 2x4 2x4
      array [5E 4W 7E 6W 1W 0 0 2E]

call "mix the line" c4
            left_means_mirror
   setup 2x4 2x4
      array [0 0 0 0 CR4E CR3E AL1W AL6W]
            alternate_definition [single] c4
   setup 2x2 1x4
      array [0 0 CR2E AL1W]

call "bend the line" mainstream tag bendtheline
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden couples_only
      array [CR0E CR3E AL1W AL2W]
            alternate_definition [3x3] mainstream
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only
      array [CR5N CR4N CR3N AL0S AL1S AL2S]
            alternate_definition [4x4] mainstream
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only
      array [CR7N CR6N CR4N CR5N AL0S AL1S AL3S AL2S]

call "retreat the line" c4
            parallel_conc_end
   setup 1x4 2x2 restriction forbidden couples_only
      array [AL3W AL0W CR2E CR1E]
            alternate_definition [3x3] c4
   setup 1x6 2x3 rotate restriction forbidden 3x3couples_only
      array [AL3S AL4S AL5S CR2N CR1N CR0N]
            alternate_definition [4x4] c4
   setup 1x8 2x4 rotate restriction forbidden 4x4couples_only
      array [AL4S AL5S AL7S AL6S CR3N CR2N CR0N CR1N]

call "ends bend" a1 tag endsbend
   setup 2x4 2x4 rotate
      array [R7N M6W M1W L0S 0 M2W M5W 0]
   setup 4x2 2x4 rotate
      array [0 M6W M1W 0 0 M2W M5W 0]

call "_square the bases part 1" dontshow tag sqbases1
   conc square_thru_3 [] pass_in [conc_demand_lines conc_force_otherway suppress_elongation_warnings]

call "square the bases" c1
   seq sqbases1 []
   seq splitsq2 [allow_forced_mod]
   seq trade_by [allow_forced_mod]

call "square the bases plus 2" c4a
   seq sqbases1 []
   seq splitsq4 [allow_forced_mod]
   seq trade_by [allow_forced_mod]

/* ****  The old stuff:
call "square the bases (old)" c1
            dont_use_in_resolve
   setup 2x4 2x4 rotate
   array [0 0 0 0 AM5E AL3W CR4W CM2E]

call "square the bases plus 2 (old)" c4
            dont_use_in_resolve
   setup 2x4 2x4 rotate
   array [0 0 0 0 AAL7E AM1W CM6W CCR0E]
*/

call "_ends regroup" dontshow tag eregroup
   setup 2x2 2x2     /* This is quarter out and trade. */
      array [A3E C2W CA1W AC0E]   /* We say that roll is ill-defined for these people. */

call "regroup" c1
   conc trade_and_roll [] eregroup [conc_demand_lines conc_force_lines endscando]

call "_ends trip the set" dontshow tag etripset
   setup 2x2 2x2     /* This is trade and roll, but they must be leads. */
      array [CR1W AL0E 0 0]
            alternate_definition [half] c3a
   setup 2x2 2x2
      array [CR1S AL0S 0 0]

call "_centers trip the set" dontshow tag ctripset
            visible_fractions
   seq quarterout []
   seq trade []

call "trip the set" c3a
   conc ctripset [] etripset [conc_demand_lines conc_force_otherway endscando]

call "siamese breakdown" c4
   setup 1x2 1x2 rotate
      preds "???"
         if 1x2_beau_or_miniwave [CR0E AL0E]
         if always [0 AL1E]
   setup 2x1 1x2 rotate
      array [AL0E CR1E]

call "_cross to dmd part 1" dontshow tag cross_to_dmd_1
   setup 2x4 2x4
      array [ZM1N CR3S AL0S ZM2N ZM5N ZM3N ZM0N ZM6N]

call "cross to a diamond" c4a
            left_means_mirror
   seq cross_to_dmd_1 []
   seq sglctrhinge [roll_transparent inherit_left]

call "_cross to wv part 2" dontshow tag cross_to_wv_2
   setup 2x4 2x4
      array [CR2S ZM0N ZM3N AL1S ZM2N ZM4N ZM7N ZM1N]
   setup 4x2 2x4 rotate
      array [ZM5W ZM7W ZM0W 0 0 ZM3W ZM4W ZM6W]

call "cross to a wave" c4
            left_means_mirror
   seq ctrhinge [inherit_left]
   seq cross_to_wv_2 []

call "presto" c4a
            take_right_hands
      /* The roll info is questionable except for then centers, who clearly
         can't roll, so it's just not worth putting in. */
   setup 2x4 2x4 rotate restriction 2fl_only
      array [C1E C2E A5E A6E A7E A4E C3E C0E]
            alternate_definition [single] c4
   setup 1x4 2x2 restriction 2fl_only
      array [C1S C2S A0S A3S]
            alternate_definition [3x3] c4
   setup 3x4 2x6 rotate restriction 2fl_only
      array [C2E C3E A8E A9E A10E A7E A11E A6E C5E C0E C1E C4E]
            alternate_definition [4x4] c4
   setup 4x4 2x8 rotate restriction 2fl_only
      array [A12E A13E A14E A10E A15E A8E C7E A9E C0E C1E C2E C6E C3E C4E A11E C5E]
            alternate_definition [2x1] c4
   setup pshort6 2x3
      array [C5S C3S C4S A1S A2S A0S]

call "_finish follow and cross" dontshow tag finfollx
   /* This is just acey-deucey, but we take no chances with weird setups. */
   conc trade [] circulate [conc_demand_lines conc_force_lines]

call "follow and cross" c4
            first_part_visible
   seq boxyscootback []
   seq followthru []
   seq finfollx []

call "follow and criss cross" c4
            first_part_visible
   seq boxyscootback []
   seq followthru [force_cross]
   seq finfollx []

call "_lines walk nowhere" dontshow tag lines_walk_nowhere
   setup 2x4 2x4 rotate
      array [0 0 0 0 ZM0W ZM2W ZM5W ZM7W]

call "lines walk @h" c4
   seq lines_walk_nowhere []
   seq quarter_maybe []

call "_sort of ends bend" dontshow tag sortofendsbend
   setup 2x2 2x2
      array [R0E L1W 0 0]

call "_centers scramble" dontshow tag cscramble
            visible_fractions
   seq quarterin []
   seq crosstrail []

call "_ends scramble" dontshow tag escramble
            visible_fractions
   seq sortofendsbend []
   seq turnthru []

call "scramble" c3
            visible_fractions
   conc cscramble [] escramble [conc_demand_lines conc_force_lines endscando]

call "ferris wheel" mainstream
   setup 2x4 2x4 rotate restriction forbidden 2fl_only
      array [CR0E CR7E AL0E AL7E AL6E AL1E CR6E CR1E]
            alternate_definition [single] c3a
   setup 2x2 1x4 rotate restriction resolve_ok wave_only
      array [CR0E AL0E AL1E CR1E]
   setup 1x4 2x2 restriction forbidden couples_only
      array [CR1S CR0S AL0S AL1S]
            alternate_definition [3x3] c4
   setup 2x6 3x4 rotate restriction forbidden 3x3couples_only
      array [CR0E CR10E CR9E AL0E AL10E AL9E AL8E AL11E AL1E CR8E CR11E CR1E]
   setup 3x4 2x6 rotate restriction forbidden 2fl_only
      array [CR0E CR11E AL0E AL11E AL10E AL1E AL9E AL2E CR9E CR2E CR1E CR10E]
            alternate_definition [4x4] c4
   setup 2x8 4x4 restriction forbidden 4x4couples_only
      array [CR0S CR14S CR13S CR12S AL0S AL14S AL13S AL12S AL10S AL15S AL3S AL1S CR10S CR15S CR3S CR1S]
   setup 4x4 2x8 rotate restriction unusual 2fl_only   /* T-bone?  What the heck. */
      array [AL15E AL14E AL13E AL1E AL12E AL3E CR12E AL2E CR3E CR2E CR1E CR13E CR0E CR15E AL0E CR14E]
            alternate_definition [3x3 single] c4
   setup 3x2 1x6 restriction forbidden wave_only
      array [CR5S CR4S CR3S AL3S AL4S AL5S]
   setup 1x6 2x3 restriction forbidden 3x3couples_only
      array [CR2S CR1S CR0S AL0S AL1S AL2S]
            alternate_definition [4x4 single] c4
   setup 4x2 1x8 restriction forbidden wave_only
      array [CR6S CR7S CR5S CR4S AL4S AL5S AL7S AL6S]
   setup 1x8 2x4 restriction forbidden 4x4couples_only
      array [CR3S CR2S CR0S CR1S AL0S AL1S AL3S AL2S]

call "step lively" c4
            visible_fractions
   seq wave_detour []
   seq slimdown []
   seq circulate []

call "recount" c4a
   setup 2x4 2x4 rotate restriction wave_only
      array [CR0N AL6S CR1N AL7S AL1S CR3S AL4N CR6N]

call "ferris to a column" c4
   setup 2x4 2x4 rotate restriction 2fl_only
      array [C1E C0E A7E A6E Z0W A5E C2E Z7W]

call "rip saw" c4
   setup 2x4 2x4 rotate
   array [2E 0E 7E 5E 0 4W 3W 0]

call "cast a shadow" a1
   setup 2x4 2x4 rotate restriction forbidden ends_are_peelable
      array [AAM7S AL6N CR1S CCM0N CM3S AM6S CM1N AM4N]

call "criss cross the shadow" c2
   setup 2x4 2x4 rotate restriction forbidden ends_are_peelable
      array [AACM7N AL5N CR2S CCAM0S AM3N CM1N AM6S CM4S]

call "shadow to a diamond" c4a
   setup 2x4 qtag restriction forbidden ends_are_peelable
      array [M0W L6S R2S M1E M4W L7S R3S M5E]

call "shadow the column" c4
   setup 4x2 2x4
      array [C5E A0E AL2E AA3W CC4E CR5W C7W A2W]

call "criss cross shadow the column" c4
   setup 4x2 2x4
      array [A2W C0W AL1E AAC3E CCA4W CR6W A7E C5E]

call "pin wheel" c4a
   setup 2x4 2x4 restriction forbidden 2fl_only
      array [L0E L7E R4W R3W L2W L5W R6E R1E]

call "_chisel1" dontshow tag chisel1
   conc pass_in [] pass_in [conc_demand_lines conc_force_lines endscando]

call "_chisel2" dontshow tag chisel2
   conc pass_out [] pass_in [conc_demand_lines conc_force_columns endscando]

call "chisel thru" c2
            visible_fractions
   seq chisel1 []
   seq chisel2 []
   seq pass_in [allow_plain_mod]

call "_pass the next person" dontshow tag passthenext
            parallel_conc_end
   setup 2x2 2x2
      array [CM1E AM0W 0 0]

call "_centers load the boat" dontshow tag cloadboat
            visible_fractions
   seq passthru []
   seq quarterout []
   seq trade []
   seq passthru []

call "_ends load the boat" dontshow tag eloadboat
            visible_fractions
   seq passthru []
   seq passthenext []
   seq passthenext []
   seq quarterin []

call "load the boat" plus
            visible_fractions
   conc cloadboat [] eloadboat [endscando]

call "_start confidence" dontshow tag startconfidence
   conc hingesglctrhinge [] circulate [force_half]

call "_end confidence" dontshow tag endconfidence
   setup crosswave 2x4 qualifier ctrwv_end2fl
      array [M0N M1N 0 0 M3N M2N 0 0]
   setup pcrosswave 2x4 qualifier ctrwv_end2fl
      array [0 0 R3E L1E 0 0 L4W R6W]
   setup crosswave 2x4 rotate qualifier ctr2fl_endwv
      array [R7N L5N 0 0 L0S R2S 0 0]
   setup pcrosswave 2x4 rotate qualifier ctr2fl_endwv
      array [0 0 M0W M1W 0 0 M3W M2W]

call "with confidence" c3
   seq startconfidence []
   seq endconfidence []

call "criss cross the deucey" c3 tag xxduck
   setup 2x4 2x4 rotate restriction forbidden wave_only
   array [1N 5N 2S 6S 3S 3N 4S 4N]

call "criss cross the diamond" c4
            visible_fractions
   seq xxduck []
   seq sglctrhinge []  /* Can't modify -- dancers wouldn't know
                             whether we meant this one */
   seq diamondcirc [allow_forced_mod]
   seq sglctrhinge []  /* Or this one */

call "easy does it" c4a
   conc zing [] zing [conc_demand_lines conc_force_otherway endscando]

call "_centers 1/4 / ends half-circ" dontshow tag lilquarterdeucey2
            12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star armturn_14 [] half_circ [conc_demand_lines]

call "_centers 1/4 / ends move up" dontshow tag lilquarterdeucey4
            12_matrix_is_inherited 16_matrix_is_inherited
   conc_diamond_line armturn_14 [] spec_drop_in [inherit_12_matrix inherit_16_matrix suppress_elongation_warnings]

call "_centers @b / ends half-circ" dontshow tag quarterdeucey2
            neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star armturn_n4 [] half_circ [conc_demand_lines]

call "_centers @b / ends move up" dontshow tag quarterdeucey4
            neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   conc_diamond_line armturn_n4 [] spec_drop_in [inherit_12_matrix inherit_16_matrix suppress_elongation_warnings]

call "@B the deucey" c3a
            step_to_wave left_means_touch_or_check neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_n4 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq quarterdeucey2 [inherit_12_matrix inherit_16_matrix]
   seq turnstarn_endsnothing [inherit_12_matrix inherit_16_matrix]
   seq quarterdeucey4 [inherit_12_matrix inherit_16_matrix]

call "@9-@9-@9-@9 quarter the deucey" c4
            step_to_wave left_means_touch_or_check need_four_numbers 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_n4 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq quarterdeucey2 [inherit_12_matrix inherit_16_matrix shift_one_number]
   seq turnstarn_endsnothing [inherit_12_matrix inherit_16_matrix shift_two_numbers]
   seq quarterdeucey4 [inherit_12_matrix inherit_16_matrix shift_three_numbers]

call "fan chain the star" c4
            /* Maybe should think about 12 matrix for this */
            step_to_wave can_be_fan left_means_touch_or_check
   seq motivate2 []
   seq turnstar2_endsnothing []
   seq finishnomod []

call "spin chain the star" c4
            /* Maybe should think about 12 matrix for this */
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq motivate2 []
   seq turnstar2_endsnothing []
   seq finishnomod []

call "swing chain the star" c4
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible 12_matrix_is_inherited 16_matrix_is_inherited
   seq tradencheck1x4 [inherit_yoyo inherit_12_matrix inherit_16_matrix]
   seq lilquarterdeucey2 [inherit_12_matrix inherit_16_matrix shift_one_number]
   seq turnstar2_endsnothing [inherit_12_matrix inherit_16_matrix]
   seq lilquarterdeucey4 [inherit_12_matrix inherit_16_matrix]

/* We can't be bothered with roll direction. */
call "_finish linear flow" dontshow tag fin_lin_flow
   setup 2x4 2x4
      array [C6S A7S C4S A5S A2S C3S A0S C1S]

call "_finish cross linear flow" dontshow tag fin_xlin_flow
   setup 2x4 2x4
      array [C6S C4S A7S A5S A2S A0S C3S C1S]

call "_finish criss cross linear flow" dontshow tag fin_xxlin_flow
   setup 2x4 2x4
      array [C5S C4S A7S A6S A1S A0S C3S C2S]

call "linear flow" c3x
   seq hinge []
   seq natural_vertical_half_tag []
   seq fin_lin_flow []
   seq slip []

call "linear flow but cross it" c3x
   seq hinge []
   seq natural_vertical_half_tag []
   seq fin_xlin_flow []
   seq slip []

call "linear flow but criss cross it" c3x
   seq hinge []
   seq natural_vertical_half_tag []
   seq fin_xxlin_flow []
   seq slip []

call "@v er's flow" c3x
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq fin_lin_flow []
   seq slip []

call "@v er's flow but cross it" c3x
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq fin_xlin_flow []
   seq slip []

call "@v er's flow but criss cross it" c3x
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq fin_xxlin_flow []
   seq slip []

call "_eroo" dontshow tag eroo
   setup 2x4 2x4 rotate restriction forbidden wave_only
   array [CM0N AL4N CR3S AM7S AL2N CR2S AL5N CR5S]

call "_the top" dontshow tag tagthetop
   /* Sorry about lack of stability info for everyone..... */
   setup 2x4 1x8 rotate
      array [CR1S L0S R0N AL1N R2N CR7S AL7N L2S]

call "_and trade" dontshow tag tagntrade
   setup 2x4 qtag
      array [CR1S CR1S AL0S AL0S AL7S AL6S CR2S CR3S]

call "_ends delight" dontshow tag elight
   setup 2x2 2x2
      array [CR2W CM3W 0 0]

call "_ends dilemma" dontshow tag elemma
   setup 2x2 2x2
      array [AM2E AL3E 0 0]

call "_ends dream" dontshow tag edream
   setup 2x2 2x2
      array [CM1E CR2W 0 0]

call "_ends nightmare" dontshow tag enight
   setup 2x2 2x2
      array [AL3E AM0W 0 0]

call "_swingslipslidethru" dontshow tag swingslipslidethru
            visible_fractions
   seq swing []
   seq slip []
   seq slidethru_in_miniwave []

call "_swingbackwindmill" dontshow tag swingbackwindmill
            visible_fractions
   seq swing []
   seq slip []
   seq slip []
   seq cast_off_34_with_warn []

call "delight" c4 tag delight
   conc swingbackwindmill [] elight [conc_demand_columns conc_force_lines]

call "dilemma" c4 tag dilemma
   conc swingbackwindmill [] elemma [conc_demand_columns conc_force_lines]

call "dream" c4 tag dream
   conc swingslipslidethru [] edream [conc_demand_columns conc_force_lines]

call "nightmare" c4 tag nightmare
   conc swingslipslidethru [] enight [conc_demand_columns conc_force_lines]

/* same def'n as follow your leader, obviously */
call "_your leader" dontshow tag leader
   setup 2x4 2x4 restriction forbidden wave_only
   array [4W 6E 5W 7E 4E 6W 5E 7W]

/* same def'n as lead the class, obviously */
call "_the class" dontshow tag class
   setup 2x4 2x4 restriction forbidden wave_only
      array [CR4W AL6E CR5W AL7E AL0E CCR6E AAL5W CR3W]

/* same as 1/2 box circulate */
call "_to a diamond" dontshow tag toadiamond
   setup 2x2 dmd rotate
      array [CR0N AL0S ZM1W ZM3W]

call "@v your neighbor" c2
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq neighbor []

call "@v your cross neighbor" c2
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq xneighbor []

call "@v your criss cross neighbor" c2
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq xxneighbor []

call "@v eroo" c4a
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq eroo []

call "switcheroo" c4
   seq armturn_14 []
   seq eroo []

call "@v the top" c3
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq tagthetop []

call "3/4 @v and trade" c4
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq tagntrade []

call "@v er's delight" c3a
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq extend []
   seq delight []

call "@v er's dilemma" c3a
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq extend []
   seq dilemma []

call "@v er's dream" c4a
            first_part_visible
   seq tagnullcall0 []
   seq extend []
   seq dream []

call "@v er's nightmare" c4a
            first_part_visible
   seq tagnullcall0 []
   seq extend []
   seq nightmare []

call "@v your leader" c3a
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq leader []

call "@v the class" c4
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq class []

call "@v to a diamond" c4
            first_part_visible left_means_mirror
   seq tagnullcall0 [inherit_left]
   seq toadiamond []

call "very center 2 trade" dontshow tag veryctr2trade
   conc2_6 trade [] nullcall []

call "center 6 trade" dontshow tag ctr6trade
   conc6_2 trade [] nullcall []

call "double the wave" c4a
            step_to_wave left_means_touch_or_check visible_fractions
   seq fanthetop [allow_forced_mod]
   seq veryctr2trade [allow_forced_mod]

call "hot foot spin" c4a
            step_to_wave left_means_touch_or_check visible_fractions
   seq fanthetop [allow_forced_mod]
   seq veryctr2trade [allow_forced_mod]
   seq spinthetop [allow_forced_mod]

call "_finish cast a net" dontshow tag fincastanet
   setup crosswave 1x8
      array [C2S A1S 0 0 A6S C5S 0 0]
   setup pcrosswave 1x8
      array [0 0 C4E C3W 0 0 A4W A3E]

call "cast a net" c4a
            first_part_visible
   seq half_circ [allow_forced_mod]
   seq fincastanet []

call "pass the top" c4a
            rear_back_from_r_wave left_means_mirror
   setup 2x4 2x4
   array [0 0 0 0 1S 7N 0S 2S]

call "_finish in roll to a wave" dontshow tag fin_inroll
   setup 2x4 2x4
      preds "???"
         if inroller_is_cw [CR1S ZM2N ZM3N    0    0 ZM6N ZM7N ZM0N]
         if always         [   0 ZM0N ZM1N AL2S ZM3N ZM4N ZM5N    0]
            alternate_definition [magic] c3
   setup 2x4 2x4
      preds "???"
         if magic_inroller_is_cw [CR6S ZM7N ZM1N    0    0 ZM3N ZM5N ZM0N]
         if always               [   0 ZM2N ZM4N AL5S ZM3N ZM6N ZM0N    0]

call "_finish out roll to a wave" dontshow tag fin_outroll
   setup 2x4 2x4
      preds "???"
         if outroller_is_cw [   0 ZM2N ZM3N AL0S AL5S ZM6N ZM7N    0]
         if always          [CR3S ZM0N ZM1N    0    0 ZM4N ZM5N CR6S]
            alternate_definition [magic] c3
   setup 2x4 2x4
      preds "???"
         if magic_outroller_is_cw [   0 ZM7N ZM1N AL0S AL2S ZM3N ZM5N    0]
         if always                [CR3S ZM2N ZM4N    0    0 ZM6N ZM0N CR1S]

call "_finish zoom roll to a wave" dontshow tag fin_zoomroll
   setup 2x4 2x4
      preds "???"
         if outroller_is_cw [   0 ZM2N ZM3N CR4N AL5S ZM6N ZM7N    0]
         if always          [AL7N ZM0N ZM1N    0    0 ZM4N ZM5N CR6S]
            alternate_definition [magic] c4
   setup 2x4 2x4
      preds "???"
         if magic_outroller_is_cw [   0 ZM7N ZM1N CR4N AL2S ZM3N ZM5N    0]
         if always                [AL7N ZM2N ZM4N    0    0 ZM6N ZM0N CR1S]

call "in roll to a wave" c4
            magic_is_inherited
   seq sglctrhinge []
   seq fin_inroll [inherit_magic]

call "out roll to a wave" c4
            magic_is_inherited
   seq sglctrhinge []
   seq fin_outroll [inherit_magic]

call "zoom roll to a wave" c4
            magic_is_inherited
   seq sglctrhinge []
   seq fin_zoomroll [inherit_magic]

call "_outpost part 1" dontshow tag outpost1
            left_means_mirror
   setup 2x4 qtag rotate
      preds "Can't determine outpost direction."
         if outposter_is_cw  [CR5N CR7N CR0N AL6S AL1S AL3S AL4S    0]
         if outposter_is_ccw [CR6N AL5S AL7S AL0S    0 CR1N CR3N CR4N]

call "_outpost part 3" dontshow tag outpost3
   conc ahso [] two_o_circs [conc_demand_columns conc_force_otherway endscando]

call "outpost" c4
            left_means_mirror visible_fractions
   seq outpost1 [inherit_left]
   seq ctr6trade []
   seq outpost3 []

call "chip off" c3x
            left_means_mirror
   setup 2x4 2x4
      preds "Can't determine direction to go."
         if outposter_is_cw [M1N R2S R3S 4S M5N L6S 0 0]
         if outposter_is_ccw [7S L0S L1S M2N 0 0 R5S M6N]

call "ship ahoy" c3x
   setup 2x4 2x4 rotate
      preds "???"
         if outroller_is_cw [0 R1E L0E L7E M2W L5E L4W 0]
         if always [R0E R7E L6E 0 0 R3W R2E M5W]

call "extend" mainstream tag extend
   setup 4x1 dmd qualifier 2fl_only  /* 0/4 tag to 1/4 tag */
      array [0N 1N 0 0]
   setup 2x2 dmd rotate qualifier miniwaves
      array [0W 0W 1W 3W]            /* 1/2 tag to 3/4 tag */
   setup pmd 1x4 qualifier 3_4_tag   /* 3/4 tag to 4/4 tag */
      array [0 3N 2N 3N]
   setup pmd 2x2 qualifier 1_4_tag
      preds "???"                    /* 1/4 tag to 1/2 tag */
         if dmd_ctrs_rh [0N 1N 0 2N]
         if always [3N 1N 0 2N]
   setup 2x1 1x2 rotate
      array [0W 0]         /* People facing: touch. */
   setup 1x2 1x2 rotate qualifier miniwaves
      array [0W 0W]        /* Lone miniwave: step thru. */

call "cross town roll" c4a
            fudge_to_q_tag
   setup 2x2 dmd rotate restriction forbidden wave_only
      array [CR1E AL3E AL2E CR2E]
   setup pmd 2x2
      preds "???"
         if dmd_ctrs_rh [ZM0N CR3S ZM2N 0]
         if always      [ZM3N 0    ZM1N AL0S]
   setup dmd 2x2
      preds "???"
         if dmd_ctrs_rh [ZM0N 0 ZM2N 0]
         if always      [ZM3N 0 ZM1N 0]

call "inlet" c2
            diamond_is_legal
   setup 2x4 qtag restriction unusual wave_only
      array [CR1S AL6S CR2S AL0S AL3S CR4N AL5N CR7S]
            alternate_definition [diamond] c4
   setup 2x4 qtag restriction forbidden wave_only
      array [CR1E AL6S CR2S AL0W AL3S CR4W AL5E CR7S]

call "outlet" c2
            diamond_is_legal left_means_mirror
   setup qtag 2x4
      array [CR3S 0 0 CR4S ZM7N CR6S CR1S ZM0N]
            alternate_definition [diamond] c4
   setup qtag 2x4 restriction unusual wave_only
      preds "Must be in diamonds."
         if q_tag_front  [0 0 0 CR4S 0 0 CR1S 0]
         if q_tag_back   [0 0 0 CR4S 0 0 CR1S 0]
         if q_line_front [0 0 0 0    0 0 CR1S ZM0N]
         if q_line_back  [0 0 0 0    0 0 CR1S ZM0N]
   setup pqtag 2x4 restriction unusual wave_only
      preds "Must be in diamonds."
         if q_tag_front  [CR3E 0    0 0 0 0 0 0]
         if q_tag_back   [0    CR2W 0 0 0 0 0 0]
         if q_line_front [CR3E 0    0 0 0 0 0 0]
         if q_line_back  [0    CR2W 0 0 0 0 0 0]

call "_start splash" dontshow tag startsplash
   setup 2x4 2x4 rotate
      preds "Can't do this call in this formation."
         if lines_miniwave [CM0N AM5E CM2E AM7S ZM0W AM5S CM2N ZM7W]
         if lines_couple   [CM1N CM0N AM7S AM6S ZM0W ZM1W ZM7W ZM6W]

call "_finish splash @h" dontshow tag finsplash
   setup 2x4 2x4
      array [ZM0N ZM1N ZM2N ZM3N 0 0 0 0]
   setup 4x2 2x4
      preds "Illegal direction."
         if rightp   [0 0 CR2E CR3E CR4E CR5E 0 0]
         if leftp    [0 0 AL2W AL3W AL4W AL5W 0 0]
         if inp      [0 0 CR2E CR3E AL4W AL5W 0 0]
         if outp     [0 0 AL2W AL3W CR4E CR5E 0 0]
         if zigzigp  [0 0 CR2E CR3E CR4E CR5E 0 0]
         if zagzagp  [0 0 AL2W AL3W AL4W AL5W 0 0]
         if zigzagp  [0 0 AL2W CR3E CR4E AL5W 0 0]
         if zagzigp  [0 0 CR2E AL3W AL4W CR5E 0 0]
         if no_dir_p [0 0 ZM2N ZM3N ZM4N ZM5N 0 0]

call "splash @h" c4a
   seq startsplash []
   seq finsplash [roll_transparent]

call "_sets in motion 1" dontshow tag setnmotion1
   conc hingentrade [force_single] box_circ_15 [conc_demand_lines]

call "_sets in motion 2" dontshow tag setnmotion2
   setup 3x1dmd 3x1dmd
      array [CR0E 0 0 0 AL4W 0 0 0]
   setup p3x1dmd 3x1dmd
      array [0 ZM1N ZM2N ZM3N 0 ZM5N ZM6N ZM7N]
   setup 1x8 1x8
      array [CR0E CR1E 0 0 AL4W AL5W 0 0]
   setup 8x1 1x8
      array [0 0 ZM2N ZM3N 0 0 ZM6N ZM7N]
   setup crosswave crosswave
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]

call "_sets in motion 3" dontshow tag setnmotion3
   setup p3x1dmd qtag rotate
      array [ZM7W CR1E AL0E ZM6W 0 0 0 ZM2W]
   setup 8x1 2x4
      array [ZM1N ZM2N AL3S CR4S 0 0 0 0]
   setup crosswave rigger
      array [ZM6N ZM7N 0 0 ZM2N ZM3N CR1S AL0S]

call "_sets in motion 3 plus @9" dontshow tag setnmotion3plusn
            neednumber
   setup p3x1dmd spindle rotate nqualifier 1 none
      array [AL1E CR2E AL0E ZM7W 0 0 0 ZM3W]
   setup 8x1 3dmd rotate nqualifier 1 none
      array [ZM11W AL1E AL0E CR2E 0 0 0 0]
   setup 8x1 2x4 rotate nqualifier 2 none
      array [CR2E AL1E AL0E CR3E 0 0 0 0]

call "sets in motion but hold the column" c2
   seq setnmotion1 []
   seq setnmotion2 []

call "sets in motion" c2
   seq setnmotion1 []
   seq setnmotion2 []
   seq setnmotion3 []

call "sets in motion plus @9" c4a
            neednumber
   seq setnmotion1 []
   seq setnmotion2 []
   seq setnmotion3plusn []

call "trade by" mainstream tag trade_by
   setup 4x2 2x4
      array [0 ZM2N 0 CR4S AL3S 0 ZM5N 0]
   setup 2x4 2x4
      array [0 0 0 0 0 ZM2N ZM1N 0]

call "roll out to a column" c4a
            left_means_mirror take_right_hands
   setup 4x2 2x4 restriction unusual 2fl_only
      array [0 CA5N C6S C4S C5S C7S CA4N 0]
            alternate_definition [3x3 12matrix] c4
   setup 4x3 2x6
      /* We assume the third part has to be "circulate 1-1/2". */
      array [0 CA8N C9S C6S C7S C10S C8S C11S CA6N 0 0 CA7N]
            alternate_definition [4x4 16matrix] c4
      /* We assume the third part has to be "circulate 2". */
   setup 4x4 2x8 rotate
      array [C3E C7E CA0W C6E 0 0 0 CA1W 0 CA3W C4E CA2W C0E C1E C2E C5E]

call "2/3 roll out to a column" c4a
            left_means_mirror
   setup 4x2 2x6
      array [0 CA9N CR8S CR6S CR7S CR9S CA8N 0]
            /* No 3x3 -- can't do 2x9 setup. */
            alternate_definition [4x4 16matrix] c4
   setup 4x4 2x8 rotate
      /* Some people just can't be handled.  Sorry. */
      array [C1E C5E 2W C4E 0 0 0 3W 0 5W C2E 4W 0 0 C0E C3E]

call "hit the wall" c4a
            visible_fractions
   conc pass_out [] partnertag [conc_demand_columns conc_force_spots endscando]

call "centers trade" dontshow tag ctrstrade
   conc trade [] nullcall []

call "@6 advance to a column" c4a
            visible_fractions
   seq starthopping []
   /* Q: Why use "column circulate" instead of just "circulate"?  Wouldn't
      it be more general and creative to allow any circulate?
      A: It would be way too general.  It would have no defense against
      "beaus advance to a column" from facing lines. */
   seq realcolcirc []
   seq ctrstrade []
   seq realcolcirc []

/* We make this a separate call because "finish beaus advance to a column"
   is really stupid, and this is the way people call it. */
call "finish advance to a column" c4a
            visible_fractions
   seq realcolcirc []
   seq ctrstrade []
   seq realcolcirc []

call "_swing to a column centers part 1" dontshow tag touch_1_2_and_roll
            step_to_wave left_means_mirror
   seq trade []
   seq roll []

call "_swing to a column part 1" dontshow tag swingtocol1
            left_means_mirror
   conc touch_1_2_and_roll [inherit_left] div_move_along [conc_demand_columns conc_force_otherway]

call "_swing to a column part 1" dontshow tag swingtocol2
            left_means_mirror
   setup bone 2x4
      array [0 0 0 0 CR4W CM1E 0 0]
   setup pbone 2x4
      array [0 0 0 ZM3N 0 0 ZM2N 0]
   setup pqtag 2x4
      array [0 0 0 ZM3N 0 0 ZM2N 0]

call "swing to a column" c4a
            left_means_mirror
   seq swingtocol1 [inherit_left]
   seq swingtocol2 [inherit_left]

call "_grand chain 8 part 1" dontshow tag gc8p1
            rear_back_from_r_wave rear_back_from_qtag
   setup 2x4 2x4
      array [0 0 0 0 ZM3N ZM2N ZM1N ZM0N]
   setup 4x2 2x4
      preds "Can't tell which version of grand chain 8 to do."
         if columns_tandem     [ZM0N ZM2N 0    0 0 0    ZM5N ZM7N]
         if columns_antitandem [ZM1N 0    ZM3N 0 0 ZM4N 0    ZM6N]

call "_finish grand chain 8" dontshow tag gc8p2
            left_means_mirror
   setup 2x4 2x4 rotate
      array [AL0E AL1W AL6W AL7E 0 0 0 0]
   setup 4x2 2x4
      array [AL1E AL2E AL3E AL4S AL3S AL4W AL5W AL6W]

call "grand chain 8" c2
            first_part_visible left_means_mirror
   seq gc8p1 []
   seq gc8p2 [inherit_left]

call "_centers finish grand chain 8" dontshow tag ctrfingc8
   setup 2x2 2x2
      array [AL1N AL0N 0 0]

call "_centers grand chain 8" dontshow tag ctrgc8
            first_part_visible left_means_mirror
   seq passthru []
   seq ctrfingc8 [inherit_left]

call "_ends finish grand chain 8" dontshow tag endfingc8
   setup 2x2 2x2
      array [AL1S AL0S 0 0]

call "_ends grand chain 8" dontshow tag endgc8
            first_part_visible left_means_mirror
   seq passthru []
   seq endfingc8 [inherit_left]

call "grand chain 8 (centers and ends)" c2
            first_part_visible left_means_mirror
   conc ctrgc8 [inherit_left] endgc8 [inherit_left conc_demand_lines conc_force_otherway endscando]

call "chain the square" c2
            rear_back_from_r_wave left_means_mirror
   setup 4x2 2x4 rotate
      array [0W 0 3E 0 0 2E 0 5E]
            alternate_definition [magic] c3
   setup 4x2 2x4 rotate
      array [5E 0 2E 0 0 3E 0 0W]

call "turn away" c4a
            left_means_mirror
   setup 4x2 2x4 rotate
      array [CR5E CR4E CR2E CR3E CM4E CM5E CR7W CR6W]
            alternate_definition [single] c4
   setup 2x2 2x2
      array [CR1S CM2S CR3N CR2S]
            alternate_definition [1x3] c4
   setup 4x2 2x4 rotate
      array [0 CR1E CR2E CR3E CM4E 0 0 0]
            alternate_definition [3x1] c4
   setup 4x2 2x4 rotate
      array [0 0 0 CR3E CM4E CM5E CM6E 0]
            alternate_definition [3x3] c4
   setup 6x2 2x6 rotate
      array [CR8E CR7E CR6E CR3E CR4E CR5E CM6E CM7E CM8E CR11W CR10W CR9W]
            alternate_definition [4x4] c4
   setup 8x2 2x8 rotate
      array [CR11E CR10E CR9E CR8E CR4E CR5E CR6E CR7E CM8E CM9E CM10E CM11E CR15W CR14W CR13W CR12W]

call "hang a @eright@f" c4
            left_means_mirror
   setup 4x2 2x4 rotate
      array [0 0 R3E M4E M5E R2E 0 0]
            alternate_definition [single] c4
   setup 4x1 2x2
      array [0 0 M3S R2S]

call "_the axle part 1" dontshow tag axle1
            rear_back_from_qtag
   setup 4x2 2x4 rotate
      array [0 ZM1W ZM1W CR3E AL0E ZM2W ZM2W 0]

call "the axle" c1
            visible_fractions
   seq axle1 []
   seq trade [allow_forced_mod]
   seq slip [allow_forced_mod roll_transparent]

call "@2pass @3the axle" c1
            visible_fractions
   seq passthru [or_anycall]
   seq axle1 []
   seq trade [allow_forced_mod]
   seq slip [allow_forced_mod roll_transparent]

call "centers cast off 3/4" dontshow tag ctrmaybecast3
            single_is_inherited grand_is_inherited
   maybegrandsingleconc armturn_34 [or_anycall] nullcall []

call "_centers do mandatory call" dontshow tag ctrdomandatorycall
            single_is_inherited grand_is_inherited
   maybegrandsingleconc nullcall [mandatory_anycall] nullcall []

call "_rotary nothing" dontshow tag rotary
            left_means_mirror single_is_inherited grand_is_inherited
   setup 4x2 qtag rotate
      array [0 ZM7W 0 AL1N AL0N 0 ZM2W 0]
            alternate_definition [single] c3a
   setup 4x1 dmd
      array [0 ZM3N AL2E 0]
            alternate_definition [grand single] c4a
   setup 8x1 spindle
      array [0 ZM6N ZM5N 0 AL3E 0 0 ZM4N]

call "_finish rotary @2spin@3" dontshow tag fin_rot_spin
            left_means_mirror single_is_inherited grand_is_inherited
   seq rotary [inherit_left inherit_single inherit_grand]
   seq ctrmaybecast3 [inherit_single inherit_grand]

call "_finish rotary @0" dontshow tag fin_rot_anything
            left_means_mirror single_is_inherited grand_is_inherited
   seq rotary [inherit_left inherit_single inherit_grand]
   seq ctrdomandatorycall [inherit_single inherit_grand]

call "rotary @2spin@3" c1
            first_part_visible left_means_mirror single_is_inherited magic_is_inherited grand_is_inherited
   seq passthru [inherit_left inherit_magic]
   seq fin_rot_spin [inherit_left inherit_single inherit_grand]

call "rotary @0" c2
            first_part_visible left_means_mirror single_is_inherited magic_is_inherited grand_is_inherited
   seq passthru [inherit_left inherit_magic]
   seq fin_rot_anything [inherit_left inherit_single inherit_grand]



/* The original stuff follows:

call "_finish rotary @2spin@3" dontshow tag fin_rot_spin
            left_means_mirror single_is_inherited
   seq rotary [inherit_left inherit_single]
   seq ctrmaybecast3 [inherit_single]

call "_finish rotary @0" dontshow tag fin_rot_anything
            left_means_mirror single_is_inherited
   seq rotary [inherit_left inherit_single]
   seq ctrdomandatorycall [inherit_single]

call "rotary @2spin@3" c1
            first_part_visible left_means_mirror single_is_inherited magic_is_inherited
   seq passthru [inherit_left inherit_magic]
   seq fin_rot_spin [inherit_left inherit_single]

call "rotary @0" c2
            first_part_visible left_means_mirror single_is_inherited magic_is_inherited
   seq passthru [inherit_left inherit_magic]
   seq fin_rot_anything [inherit_left inherit_single]
*/




call "the plank" c4 tag plank
   conc walkndodge [] leadrun [conc_demand_columns conc_force_columns]

call "@2walk @3the plank" c4
            visible_fractions magic_is_inherited
   seq colcirc [or_anycall inherit_magic]
   seq plank []

call "cut across" c4a
   setup 4x2 2x4
      array [M0W L5W M2W R7W L0E M5E R2E M7E]
   setup 2x4 2x4
      array [R4W R5W L6E L7E M4E M5E M6W M7W]

call "_pass and roll someone" dontshow tag passnroll
            left_means_mirror
   setup 4x1 2x2
      array [C3S 0 0 C2S]

call "pass and roll your neighbor" a2
            rear_back_from_r_wave left_means_mirror
   seq passnroll [inherit_left]
   seq neighbor []

call "pass and roll your cross neighbor" c3
            rear_back_from_r_wave left_means_mirror
   seq passnroll [inherit_left]
   seq xneighbor []

call "pass and roll your criss cross neighbor" c3
            rear_back_from_r_wave left_means_mirror
   seq passnroll [inherit_left]
   seq xxneighbor []

call "double your pleasure" c3x
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [L4W R6W R1W M7E M4E L2W L5W R7W]
   setup 3x2 bone6 rotate restriction forbidden wave_only
      array [L3W R5W M4E M3E L2W R4W]
            alternate_definition [magic] c3x
   setup 4x2 2x4 rotate restriction forbidden magic_only
      array [4W 5W 2W 7E 4E 1W 6W 7W]
            alternate_definition [cross] c3x
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [R7W R6W R1W M4E M7E L2W L5W L4W]
   setup 3x2 bone6 rotate restriction forbidden wave_only
      array [R4W R5W M3E M4E L2W L3W]

call "criss cross double your pleasure" c3x
            take_right_hands
   setup 4x2 2x4 rotate restriction forbidden wave_only
      array [L4W R6W R1W M4E M7E L2W L5W R7W]

call "mini pleasure" c4
   setup 4x2 qtag rotate restriction forbidden wave_only
      array [CR4W CM2E CR1E AM7E CM3E AL0E CM6E AL5W]
            alternate_definition [cross] c4
   setup 4x2 qtag rotate
      array [CR4W CM2E CR1E CM3E AM7E AL0E CM6E AL5W]

call "cheerio" c4a
   setup 4x2 2x4 rotate
      preds "???"
         if columns_miniwave [5W 4W 3E 2E 1E 0E 7W 6W]
         if columns_couple   [6W 4W 3E 2E 1E 0E 7W 5W]
         if always            [0 4W 3E 2E 1E 0E 7W 0]

call "something new" c3a
   setup 4x2 qtag rotate
      array [ZM6W CR7E CR0E CR1E AL0E AL1E AL3E ZM2W]
            alternate_definition [magic] c3
   setup 4x2 qtag rotate
      array [ZM2W CR7E AL1E CR1E AL0E CR0E AL3E ZM6W]

call "_jam thru part 2" dontshow tag jam_thru_2
   setup 4x2 2x4 rotate
      array [0 CM2N 0 CR3S AL0N 0 AM1S 0]

call "jam thru" c4a
            first_part_visible
   seq passthru []
   seq jam_thru_2 []

call "_ride the tide part 2" dontshow tag ridetide2
   conc square_thru_2 [] clover [conc_force_otherway conc_demand_columns]

call "ride the tide" c4a
            visible_fractions
   seq crosstrail []
   seq ridetide2 []
   seq slidethru []

call "change-O" c4a
   setup 4x2 2x4
      array [6N 5N 3N 4S 3S 4N 2N 1N]
            alternate_definition [reverse] c4
   setup 4x2 2x4
      array [1N 5N 4N 4S 3S 3N 2N 6N]

call "quick step part 1" dontshow tag quickstep1
   setup 4x2 3x4 rotate restriction forbidden quarterbox_or_col
      preds "Must be in quarter box setup."
         if columns_tandem     [ZM10W ZM11W ZM0W ZM1W ZM2W ZM3W ZM5W ZM4W]
         if columns_antitandem [ZM8W  ZM11W ZM0W    0    0 ZM3W ZM5W ZM7W]
         if always             [   0  ZM11W ZM0W    0    0 ZM3W ZM5W    0]
            alternate_definition [magic] c3a
   setup 4x2 3x4 rotate restriction forbidden quarterbox_or_magic_col
      preds "Must be in quarter box setup."
         if columns_magic_tandem     [ZM4W  ZM11W ZM3W ZM1W ZM2W ZM0W ZM5W ZM10W]
         if columns_magic_antitandem [ZM8W  ZM11W ZM3W    0    0 ZM0W ZM5W ZM7W]
         if always                   [   0  ZM11W ZM3W    0    0 ZM0W ZM5W    0]

call "quick step part 2" dontshow tag quickstep2
            fudge_to_q_tag    /* Which means fudge *OUT OF* qtag in this case. */
   in_out_triple_squash ahso [or_anycall] quickfix []

call "quick anything part 2" dontshow tag quickany2
            fudge_to_q_tag    /* Which means fudge *OUT OF* qtag in this case. */
   in_out_triple_squash nullcall [mandatory_anycall] quickfix []

call "quick step fixup" dontshow tag quickfix
   setup 1x4 2x2 restriction forbidden 2fl_only
      array [ZM3N ZM0N ZM2N ZM1N]

call "quick @2step@3" c3a
            magic_is_inherited
   seq quickstep1 [inherit_magic]
   seq quickstep2 []

call "quick @0" c3a
            magic_is_inherited
   seq quickstep1 [inherit_magic]
   seq quickany2 []

call "make magic" c1
   /* If anyone is in lines, this restriction will behave improperly. */
   setup 4x2 2x4 restriction unusual quarterbox_or_magic_col
      preds "???"
         if columns_antitandem       [ZM1N ZM5N ZM3N ZM3N ZM4N ZM4N ZM2N ZM6N]
         if columns_someone_in_front [ZM0N ZM5N ZM2N ZM3N ZM4N ZM5N ZM2N ZM7N]
         if always                   [   0 ZM5N    0 ZM3N ZM4N    0 ZM2N    0]  /* This could happen if lots of phantoms. */
   /* But it doesn't matter, because this next restriction will be sure the warning is raised. */
   setup 2x4 2x4 restriction unusual alwaysfail
      array [0 0 0 0 0 ZM1N ZM2N 0]

call "open up the column" c3a tag openup
   setup 4x2 2x4 restriction forbidden wave_only
      array [CM0W CM2W AL3E CR5W AL2E CR4W AM5E AM7E]
            alternate_definition [magic] c3a
   setup 4x2 2x4 restriction forbidden magic_only
      array [AM7E CM2W CR5W CR4W AL3E AL2E AM5E CM0W]

call "_open up and part 1" dontshow tag opnup1
   /* we would like to say "restriction wave_only" (and similar things elsewhere),
      but the restrictions are not defined for calls that accept T-bone setups. */
   setup 4x2 2x4 rotate
      array [ZM6W ZM1W AL0N CR3S AL0N CR3S ZM2W ZM5W]
   setup 2x4 qtag
      array [0 0 0 0 ZM2N ZM3N ZM7N ZM6N]
            alternate_definition [magic] c1
   setup 4x2 2x4 rotate
      array [ZM5W ZM1W CR3S CR3S AL0N AL0N ZM2W ZM6W]
   setup 2x4 qtag
      array [0 0 0 0 ZM2N ZM3N ZM7N ZM6N]

call "open up and @0" c3a
            magic_is_inherited
   seq opnup1 [inherit_magic]
   seq transf2 []

call "_replace the column 1" dontshow tag replacecol1
         /* These are just the appropriate flavors of invert the column 3/4, of course. */
   setup 4x2 3x4 rotate restriction forbidden wave_only
      array [ZM11W AL0E AM10E AM9E CM6E CM4E CR3E ZM5W]
            alternate_definition [cross] c3x
   setup 4x2 3x4 rotate restriction forbidden wave_only
      array [ZM11W CR3E CM4E CM6E AM9E AM10E AL0E ZM5W]
            alternate_definition [magic] c4
   setup 4x2 3x4 rotate restriction forbidden magic_only
      array [ZM5W CR3E CM4E AM9E CM6E AM10E AL0E ZM11W]
            alternate_definition [magic cross] c4
   setup 4x2 3x4 rotate restriction forbidden magic_only
      array [ZM5W AL0E AM10E CM6E AM9E CM4E CR3E ZM11W]

call "_replace the column 2" dontshow tag replacecol2
   setup 3x4 qtag
      array [CR1E 0 0 AL0W AL1W ZM3N ZM2N 0 0 ZM6N CR0E ZM7N]

call "_replace the column 3" dontshow tag replacecol3
            cross_is_inherited
   conc 23recycle [or_anycall inherit_cross] nullcall []

call "replace the column@7 but @8" c3x
            first_part_visible
            cross_is_inherited magic_is_inherited
   seq replacecol1 [inherit_cross inherit_magic]
   seq replacecol2 []
   seq replacecol3 [inherit_cross]

call "quick wrap" c3x
   setup 4x2 2x4 restriction wave_only
      array [L2W L1E R3E R4E L3W L4W R6W R5E]
            alternate_definition [magic] c3x
   setup 4x2 2x4 restriction magic_only
      array [R5E L1E L4W R4E L3W R3E R6W L2W]
            alternate_definition [2x1] c3x
   setup 3x2 2x3 restriction wave_only
      array [AL1E CR2E CR3E AL2W AL3W CR4W]
            alternate_definition [magic 2x1] c3x
   setup 3x2 2x3 restriction magic_only
      array [CR4W AL3W CR3E AL2W CR2E AL1E]
            alternate_definition [1x2] c3x
   setup 3x2 short6 rotate restriction wave_only
      array [AL0S AL5N CR1N AL1S CR3S CR2N]
            alternate_definition [magic 1x2] c3x
   setup 3x2 short6 rotate restriction magic_only
      array [CR2N AL5N CR1N AL1S CR3S AL0S]

call "dive thru" mainstream
   setup 4x2 2x4
      array [ZM1N 0 CR4S 0 0 AL3S 0 ZM6N]

call "pass to the center" mainstream
            rear_back_from_r_wave
   setup 4x2 2x4
      array [ZM1N 0 CR4S 0 0 AL3S 0 ZM6N]

call "_square out stuff" dontshow tag square_out_stuff
   setup 2x4 1x8 rotate restriction forbidden wave_only
      array [C3S A2S A2N C3N C1S A0S A0N C1N]

call "square out" c4a
            left_means_mirror
   seq touch [inherit_left]
   seq square_out_stuff []
   seq natstepthru []

call "square out to a wave" c4a
            left_means_mirror
   seq touch [inherit_left]
   seq square_out_stuff []

call "square out, @6 to a wave" c4a
            left_means_mirror
   seq touch [inherit_left]
   seq square_out_stuff []
   seq somedontstepthru []

call "cross chain thru" c1
            rear_back_from_r_wave left_means_mirror
   setup 4x2 2x4
      array [5N 0 4S 0 0 3S 0 2N]
            alternate_definition [magic] c3
   setup 4x2 2x4
      array [2N 0 3S 0 0 4S 0 5N]

call "cross chain and roll" c1
            rear_back_from_r_wave left_means_mirror
   setup 4x2 2x4
      array [L5W 0 L4E 0 0 L3E 0 L2W]
            alternate_definition [magic] c3
   setup 4x2 2x4
      array [L2W 0 L3E 0 0 L4E 0 L5W]

call "checkover" c1
   setup 4x2 2x4 restriction unusual wave_only
   array [0W 1W 6W 7W 0E 1E 6E 7E]

call "turnover" c4
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [CM3S AM3N AL2N CR2S]

call "turn by" c4
   /* Do we actually allow this from a single 8-chain?  Isn't it the equivalent of a trade by,
      and hence usable only from a single trade-by setup?  Perhaps, but the fact is that things
      like "turn by, go once and a half" do get called in situations in which it is expected
      that the call be treated as either a pass thru or a single trade by. */
   setup 4x1 1x4
      array [ZM1N ZM3N CR2S ZM2N]
            alternate_definition [half] c4
   setup 4x1 2x2 qualifier 8_chain
      array [ZM0N 0 0 ZM1N]
   setup 4x1 dmd qualifier trade_by
      array [0 ZM1N CR2E 0]

call "triple play" c3a
   setup 4x2 2x4 restriction forbidden wave_only
      array [CC1E C0W C2W C7W A0E A5E A7E AA6W]
            alternate_definition [magic] c3a
   setup 4x2 2x4 restriction forbidden magic_only
      array [CC1E CCA7E A5E C7W A0E C2W AAC0W AA6W]

call "double play" c3x
   setup 3x2 2x3 restriction forbidden wave_only
      array [CC0E C1W C5W A0E A4E AA5W]
            alternate_definition [magic] c3x
   setup 3x2 2x3 restriction forbidden magic_only
      array [CC0E A4E C5W A0E C1W AA5W]

/* We do not allow the 2x2 (box/split transfer) to be called "transfer the
   column".  It just looks stupid to have a card say "transfer the column"
   when in waves.  So the 2x2 version can be called "split transfer",
   or "box transfer", but not "transfer the column".  All others are
   "transfer the column". */

call "transfer the column" a1 tag transfer
   setup 4x2 2x4 restriction forbidden wave_only
      array [CM0W CM2W CR5W CR7W AL0E AL2E AM5E AM7E]
            alternate_definition [magic] c1
   setup 4x2 2x4 restriction forbidden magic_only
      array [AM7E CM2W AL3E CR6W AL1E CR4W AM5E CM0W]
            alternate_definition [1x2] c4
   setup 3x2 2x3 restriction forbidden wave_only
      array [M0W M2W R4W L1E M3E M5E]
            alternate_definition [magic 1x2] c4
   setup 3x2 2x3 restriction forbidden magic_only
      array [M0W M3E R4W L1E M2W M5E]
            alternate_definition [2x1] c4
   setup 3x2 2x3 restriction forbidden wave_only
      array [M1W R3W R5W L0E L2E M4E]
            alternate_definition [magic 2x1] c4
   setup 3x2 2x3 restriction forbidden magic_only
      array [M4E L2E R5W L0E R3W M1W]
            alternate_definition [1x3] c2
   setup 4x2 2x4 restriction forbidden wave_only
      array [M0W M1W M3W R6W L1E M4E M6E M7E]
            alternate_definition [magic 1x3] c2
   setup 4x2 2x4 restriction forbidden magic_only
      array [M7E M1W M3W R5W L2E M4E M6E M0W]
            alternate_definition [3x1] c2
   setup 4x2 2x4 restriction forbidden wave_only
      array [M1W R4W R6W R7W L0E L1E L3E M6E]
            alternate_definition [magic 3x1] c2
   setup 4x2 2x4 restriction forbidden magic_only
      array [M6E L3E L2E R7W L0E R5W R4W M1W]
            alternate_definition [12matrix] c4
   setup 6x2 2x6 restriction forbidden wave_only
      array [M0W M2W M4W R7W R9W R11W L0E L2E L4E M7E M9E M11E]
            alternate_definition [16matrix] c4
   setup 8x2 2x8 restriction forbidden wave_only
      array [M0W M2W M4W M6W R9W R11W R13W R15W L0E L2E L4E L6E M9E M11E M13E M15E]
            alternate_definition [3x3 12matrix] c4   /* same as 12 matrix */
   setup 6x2 2x6 restriction forbidden wave_only
      array [M0W M2W M4W R7W R9W R11W L0E L2E L4E M7E M9E M11E]
            alternate_definition [4x4 16matrix] c4   /* same as 16 matrix */
   setup 8x2 2x8 restriction forbidden wave_only
      array [M0W M2W M4W M6W R9W R11W R13W R15W L0E L2E L4E L6E M9E M11E M13E M15E]
            alternate_definition [single] c4
   setup 2x2 2x2 restriction forbidden wave_only
      array [CR2W AL3E AM2E CM3W]

call "box transfer" a2
   setup 2x2 2x2 restriction forbidden wave_only
      array [CR2W AL3E AM2E CM3W]

/* Both "split" and "box" are legal on Callerlab lists. */
call "split transfer" a2
   setup 2x2 2x2 restriction forbidden wave_only
      array [CR2W AL3E AM2E CM3W]

call "_transfer and part 1" dontshow tag transf1
   setup 4x2 2x4 rotate restriction forbidden siamese_in_quad
      array [ZM6W ZM1W CR3S CR4S AL7N AL0N ZM2W ZM5W]
   setup 2x4 qtag restriction forbidden siamese_in_quad
      array [0 0 0 0 ZM2N ZM3N ZM7N ZM6N]
            alternate_definition [magic] c1
   setup 4x2 2x4 rotate
      array [ZM5W ZM1W AL0N CR4S AL7N CR3S ZM2W ZM6W]
   setup 2x4 qtag
      array [0 0 0 0 ZM2N ZM3N ZM7N ZM6N]

call "_transfer and @0 part 2" dontshow tag transf2
   conc nullcall [mandatory_anycall] nullcall [conc_demand_columns conc_force_columns]

call "transfer and @0" a2
            magic_is_inherited
   seq transf1 [inherit_magic]
   seq transf2 []

/* See nomenclatural comment above for transfer the column. */

call "checkmate the column" a2
   setup 4x2 2x4 restriction wave_only
      array [M5E M4E R6W R7W L0E L1E M3W M2W]
            alternate_definition [2x1] c4
   setup 3x2 2x3 restriction wave_only
      array [M3E R4W R5W L0E L1E M2W]
            alternate_definition [1x2] c4
   setup 3x2 2x3 restriction wave_only
      array [M4E M3E R5W L0E M2W M1W]
            alternate_definition [3x1] c2
   setup 4x2 2x4 restriction wave_only
      array [M4E R5W R6W R7W L0E L1E L2E M3W]
            alternate_definition [1x3] c2
   setup 4x2 2x4 restriction wave_only
      array [M6E M5E M4E R7W L0E M3W M2W M1W]
            alternate_definition [single] c4
   setup 2x2 2x2 restriction wave_only
      array [CR2W AL3E AM0W CM1E]

call "box checkmate" c3a
   setup 2x2 2x2 restriction wave_only
      array [CR2W AL3E AM0W CM1E]

/* This name is legal on Callerlab lists. */
call "split checkmate" c3a
   setup 2x2 2x2 restriction wave_only
      array [CR2W AL3E AM0W CM1E]

call "push off" c4a
   setup 4x2 2x4
   array [5S 0N 3N 0 0 4S 7S 6S]

call "countershake" c4
            left_means_mirror
   setup 4x2 2x4
      array [0 0 C1W C6W C7W C0W 0 0]
            alternate_definition [single] c4
   setup 4x1 2x2
      array [0 0 C3W C0W]
            alternate_definition [3x3 12matrix] c4
   setup 4x3 2x6
      array [0 0 C2W C9W C10W C1W C11W C0W 0 0 0 0]
            alternate_definition [4x4 16matrix] c4
   setup 4x4 2x8 rotate
      array [C7S C8S 0 C9S 0 0 0 0 0 0 C11S 0 C4S C5S C6S C10S]

/* This has the unfortunate property that a modifier like "single" or
   "3x3" will come before the fraction "2/3".  We should really do this
   right by fractionalizing it properly.  But that will require a
   "maybe12matrixconc" schema, which the world isn't yet ready for. */
call "2/3 countershake" c4
            left_means_mirror
   setup 4x2 qtag
      array [0 0 C7W C4S C5S C6W 0 0]
            alternate_definition [single] c4
   setup 4x1 dmd rotate
      array [0 0 C2W C3S]
            alternate_definition [3x3 12matrix] c4
   setup 4x3 3dmd
      array [0 0 C11W C6S C7S C10W C8S C9W 0 0 0 0]
            alternate_definition [4x4 16matrix] c4
   setup 4x4 4dmd rotate
      array [C3E C4S 0 C5S 0 0 0 0 0 0 C7S 0 C0E C1E C2E C6S]

call "triple scoot" plus tag triple_scoot
   setup 4x2 2x4 restriction forbidden wave_only
      array [CM7S CM6S CM5S CR4S AL3S AM2S AM1S AM0S]

call "triple cross" c1 tag triplecross
   setup 4x2 2x4 restriction quarterbox_or_col
      preds "Don't know whether to cross."
         if columns_magic_tandem     [ZM0N ZM5N ZM2N ZM3N ZM4N ZM5N ZM2N ZM7N]
         if columns_magic_antitandem [ZM6N ZM5N ZM4N ZM3N ZM4N ZM3N ZM2N ZM1N]
/* We would like the next 3 lines to look like this:
         if columns_antitandem       [ZM0N ZM5N    0 ZM3N ZM4N    0 ZM2N ZM7N]
         if columns_tandem           [ZM6N ZM5N    0 ZM3N ZM4N    0 ZM2N ZM1N]
         if always                   [   0 ZM5N    0 ZM3N ZM4N    0 ZM2N    0]
but, until there is an "assume 1/4 box" concept, we can't do it.  The definition
seems to be "those who can pull by on the diagonal do so."  So the #2
person can't know whether to go unless his diagonal opposite in his box exists.
If that person exists, one of the first two clauses will be satisfied.  If
we get to the third clause, that person can't know what to do.  But, in
deference to what we consider to be less-than-completely-correct usage,
we will assume that the setup is either real columns or a quarterbox, and
have the #2 person look at the spot immediately in front of him. */
         if columns_antitandem       [ZM0N ZM5N ZM4N ZM3N ZM4N ZM3N ZM2N ZM7N]
         if columns_tandem           [ZM6N ZM5N ZM4N ZM3N ZM4N ZM3N ZM2N ZM1N]
         if always                   [   0 ZM5N    0 ZM3N ZM4N    0 ZM2N    0]

call "fancy" c3a tag fancy
   setup 4x2 2x4 restriction forbidden wave_only
      array [CR2S CR5S CR3S CR4S AL3S AL4S AL2S AL5S]

call "scoot and fancy" c3a
            first_part_visible
   seq triple_scoot []
   seq fancy []

call "@k tie" c4a
            yield_if_ambiguous
   setup 4x2 2x4
      preds "Tandems must be selected/deselected together."
         if select_near_select     [L7W L6W L1E L0E R7W R6W R1E R0E]
         if unselect_near_unselect [M6E M7E M4E M5E M2W M3W M0W M1W]
            alternate_definition [cross] c4a
   setup 4x2 2x4
      preds "Tandems must be selected/deselected together."
         if select_near_select     [R0E R1E R6W R7W L0E L1E L6W L7W]
         if unselect_near_unselect [M1W M0W M3W M2W M5E M4E M7E M6E]

call "no one tie" c4a
            cross_is_inherited visible_fractions
   seq crossable_peeloff [inherit_cross]
   seq bendtheline []
   seq circulate []

call "everyone tie" c4a
            cross_is_inherited visible_fractions
   seq crossable_peeloff [inherit_cross]
   seq circulate []
   seq bendtheline []

call "circle to a line" mainstream
   setup 4x2 2x4 rotate
      array [5W 0 3E 0 0 2E 0 4W]

call "expand the column" c3a
   setup 4x2 2x4 rotate
      array [M1W L7E L0E M2E M1E R3E R4E M2W]
            alternate_definition [magic] c3
   setup 4x2 2x4 rotate
      array [M2W L7E L0E M1E M2E R3E R4E M1W]

call "file to a line" c2
   setup 4x2 2x4 rotate
      array [ZM7W ZM1W CR2E ZM0W ZM3W AL1E ZM2W ZM4W]
            alternate_definition [magic] c2
   setup 4x2 2x4 rotate
      array [ZM7W ZM2W AL1E ZM0W ZM3W CR2E ZM1W ZM4W]

call "walk out to a wave" c2
   /* We can't be bothered to figure out roll info.  People would flame
      incessantly on electronic mailing lists if we even considered it. */
   setup 4x2 2x4 rotate restriction wave_only
      array [Z0W C1E C3E C2W A1W A0E A2E Z3W]
            alternate_definition [magic] c2
   setup 4x2 2x4 rotate restriction magic_only
      array [Z0W A2E A0E C2W A1W C3E C1E Z3W]

call "walk out to a column" c3x
   /* **** Do roll/stability stuff! */
   setup 2x4 2x4 rotate restriction wave_only
   array [6E 1E 5E 2E 0E 0W 7W 7E]
            alternate_definition [magic] c3x
   setup 2x4 2x4 rotate restriction wave_only
   array [6E 1E 5E 2E 7E 7W 0W 0E]

call "_disband part 1" dontshow tag disbp1
   /* By not putting a "conc_demand_columns" or "conc_demand_lines"
      on this, we allow the call to be done from either setup. */
   conc boxctrrot [] settle_back1 [conc_force_columns]

call "_disband part 2" dontshow tag disband2
   crossconc maybe_magic_box_circ [] uturnaway [conc_force_lines]

call "disband" c3
            visible_fractions
   seq disbp1 []
   seq disband2 []

/* These are enormous crocks.  3x3 and 4x4 versions of these calls can't
   follow the definition. */
call "3x3 disband" c4
   setup 3x4 3x4 rotate    /* **** Need to put in restrictions, if anyone cares. */
      array [AM2N CAL0S ACR9N CM7S CM5S ACR10N CM2S ACR0N CAL9S AM7N AM5N CAL10S]
call "4x4 disband" c4
   setup 4x4 4x4 rotate    /* **** Need to put in restrictions, if anyone cares. */
      array [CM9W CM11W CM7W ACR13E CM2W ACR0E CAL12W ACR14E AM9E AM11E AM7E CAL13W AM2E CAL0W ACR12E CAL14W]

call "wind the bobbin" c3a
   setup 4x2 2x4 rotate restriction unusual wave_only
   array [5E 3W 6W 4W 7W 5W 0W 6E]
            alternate_definition [cross] c4a
   setup 4x2 2x4 rotate restriction unusual wave_only
   array [5E 0W 6W 7W 4W 5W 3W 6E]

call "criss cross wind the bobbin" c4a
   setup 4x2 2x4 rotate restriction unusual wave_only
   array [6E 0W 5W 7W 4W 6W 3W 5E]

/*
call "REWIND wind the bobbin" c4
   setup 2x4 2x4 rotate
   array [3W 5W 2W 4W 6W 4E 3E 1W]
*/

call "explosion" c4a
   setup 4x2 2x4 rotate restriction wave_only
   array [0W 5E 3E 2E 1E 0E 6E 3W]

call "explode the@C clover" c4
            cross_is_inherited
   conc trade_and_roll [] clover [inherit_cross conc_demand_columns conc_force_columns endscando]

call "press for time" c4
   setup 4x2 2x4 rotate restriction wave_only
      /* Since no one can roll, we don't even specify that.  We make roll simply illegal. */
      array [Z7W Z0W C5E C2E A1E A6E Z3W Z4W]
            alternate_definition [single] c4
   setup 2x2 1x4 restriction wave_only
      array [C3S A1S Z2N Z0N]

call "_horseshoe centers" dontshow tag horsey
   setup 1x2 1x2           /* This is partner tag, of course. */
      array [M1E M0W]
            alternate_definition [cross] c3x
   setup 2x2 2x2
      array [2E 3W 0W 1E]

call "horseshoe turn" a1
            cross_is_inherited
   conc horsey [inherit_cross] clover [inherit_cross conc_demand_columns conc_force_columns endscando]

call "with finesse" c4a
   setup 4x2 1x8
      array [0W 7E 1E 6W 6E 1W 7W 0E]
   setup 3x2 1x6
      array [0W 1E 5W 5E 1W 0E]

call "polly wally" c3a
            reverse_means_mirror
   setup 4x2 2x4 rotate
      array [CR5E CAL2W AL7E AL0E AL1E AL6E CAL3W CR4E]
            alternate_definition [single] c3a
   setup 4x1 2x2
      array [CR3S CAL2N AL1S AL0S]
            alternate_definition [grand single] c4
   setup 8x1 2x4
      array [CR7S CAL6N CAL5N AL0S AL3S AL2S AL1S CAL4N]
   setup 6x1 2x3
      array [CR5S CAL4N AL0S AL2S AL1S CAL3N]

call "_sidetrack part 1" dontshow tag sidetrack1
            reverse_means_mirror
   /* We put this in to give the "unusual" warning if called from lines. */
   setup 2x4 2x4 restriction unusual alwaysfail
      array [CR0E CR1E CR2E CR3E AL4W AL5W AL6W AL7W]
   /* Having done that, we need this (without the warning) to
      keep things happy in a T-boned 2x4. */
   setup 4x2 2x4
      array [AL0W CR1E AL2W CR3E CR4E AL5W CR6E AL7W]
   setup 2x2 2x2        /* This is just zig zag, of course. */
      array [CR0E CR1E AL2W AL3W]
   setup 2x1 1x2        /* This is just zig zag, of course. */
      array [AL0W CR1E]

call "sidetrack" c3
            reverse_means_mirror visible_fractions
   seq sidetrack1 [inherit_reverse]
   seq ctr_rot []
   seq roll []

call "slim down" c3x tag slimdown
   setup 2x4 2x4 rotate
      array [ZM6W ZM7W ZM0W ZM1W ZM2W ZM3W ZM4W ZM5W]
   setup 4x2 2x4 rotate
      array [ZM6W ZM7W ZM0W ZM1W ZM2W ZM3W ZM4W ZM5W]
            alternate_definition [single] c4
   setup dmd dmd rotate
      array [ZM3W ZM0W ZM1W ZM2W]
   setup pmd dmd rotate
      array [ZM3W ZM0W ZM1W ZM2W]
            alternate_definition [3x3] c4
   setup 2x6 2x6 rotate
      array [ZM9W ZM10W ZM11W ZM0W ZM1W ZM2W ZM3W ZM4W ZM5W ZM6W ZM7W ZM8W]
   setup 6x2 2x6 rotate
      array [ZM9W ZM10W ZM11W ZM0W ZM1W ZM2W ZM3W ZM4W ZM5W ZM6W ZM7W ZM8W]
            alternate_definition [4x4] c4
   setup 2x8 2x8 rotate
      array [ZM12W ZM13W ZM14W ZM15W ZM0W ZM1W ZM2W ZM3W ZM4W ZM5W ZM6W ZM7W ZM8W ZM9W ZM10W ZM11W]
   setup 8x2 2x8 rotate
      array [ZM12W ZM13W ZM14W ZM15W ZM0W ZM1W ZM2W ZM3W ZM4W ZM5W ZM6W ZM7W ZM8W ZM9W ZM10W ZM11W]

call "step and slide" a1
   setup 1x4 2x3 rotate
      array [ZM4W ZM5W ZM1W ZM0W]

call "step and flip" c1
   setup 1x4 2x3 rotate
      array [CR4E ZM5W AL1E ZM0W]

call "lickety split" c3
   simple_funny
   setup 2x4 2x4
      array [CR1S AL0W CR3E AL2S ZM3N CR2E AL1W ZM0N]
   setup 4x2 2x4
      array [ZM1N CR6E CR3E CR4S AL3S AL4W AL1W ZM6N]

call "INVERT lickety split" c4
   simple_funny
   setup 2x4 2x4
      array [CR1E AL0S CR3S AL2W AL3W ZM2N ZM1N CR0E]
   setup 4x2 2x4
      array [CR1E CR6S ZM3N CR4E AL3W ZM4N AL1S AL6W]

call "circulate" mainstream tag circulate
            take_right_hands
   simple_funny
   setup 2x4 2x4
      array [CR3S CR2S AL1S AL0S ZM3N ZM2N ZM1N ZM0N]
   setup 4x2 2x4
      array [ZM1N ZM2N ZM3N CR4S AL3S ZM4N ZM5N ZM6N]
   setup 2x3 2x3 no_cutting_through
      array [CR2S 0 AL0S ZM2N ZM1N ZM0N]
   setup 3x2 2x3 no_cutting_through
      array [ZM1N ZM2N CR3S AL2S ZM3N ZM4N]
   setup 2x2 2x2 no_cutting_through
      array [CR1S AL0S ZM1N ZM0N]
   setup star star
      array [CR1E 0 AL1W 0]
   setup short6 short6 qualifier didnt_say_triangle
      array [CR1E 0 AL1W ZM2N 0 ZM0N]
   setup pshort6 short6 qualifier didnt_say_triangle
      preds "???"
         if next62spot_is_tboned [ZM1N CR2E CR3S AL2S AL3W ZM4N]
         if always [ZM1N ZM2N CR3S AL2S ZM3N ZM4N]
   setup trngl trngl qualifier said_triangle
      array [0 R2S L1S 0 L3W R3E]
   setup ptrngl trngl qualifier said_triangle
      preds "???"
         if nexttrnglspot_is_tboned [L2W M2N R0S R4E L3S M4N]
         if always                  [L2S M2N R0S R4S L3S M4N]
   setup spindle spindle qualifier didnt_say_triangle
      array [0 0 0 AL2W 0 0 0 CR0E]
   setup pspindle spindle qualifier didnt_say_triangle
      array [ZM1N ZM2N CR3E 0 AL3W ZM4N ZM5N 0]
            alternate_definition [magic] c1
   simple_funny
   setup 4x2 2x4
      array [ZM6N ZM2N ZM4N CR4S AL3S ZM3N ZM5N ZM1N]
   setup 3x2 2x3 no_cutting_through
      array [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
   setup pshort6 short6 qualifier didnt_say_triangle
      preds "???"
         if next_magic62spot_is_tboned [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
         if always [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
   setup spindle spindle qualifier didnt_say_triangle
      array [0 0 0 AL2W 0 0 0 CR0E]
   setup pspindle spindle qualifier didnt_say_triangle
      array [ZM5N ZM4N CR3E 0 AL3W ZM2N ZM1N 0]
            alternate_definition [12matrix] c3a
   simple_funny
   setup 3x4 3x4
      array [CR3S CR2S AL1S AL0S ZM3N ZM2N ZM4N ZM5N ZM11N ZM10N ZM0N ZM1N]
   setup 2x6 2x6
      array [CR5S CR4S CR3S AL2S AL1S AL0S ZM5N ZM4N ZM3N ZM2N ZM1N ZM0N]
   setup 6x2 2x6
      array [ZM1N ZM2N ZM3N ZM4N ZM5N CR6S AL5S ZM6N ZM7N ZM8N ZM9N ZM10N]
            alternate_definition [16matrix] c3a
   simple_funny
   setup 4x4 4x4
      array [AL12S ZM0N ZM1N ZM14N ZM2N ZM7N ZM11N ZM3N ZM9N ZM10N ZM12N ZM15N CR0S CR14S AL13S ZM13N]
   setup 2x8 2x8
      array [CR7S CR6S CR5S CR4S AL3S AL2S AL1S AL0S ZM7N ZM6N ZM5N ZM4N ZM3N ZM2N ZM1N ZM0N]
   setup 8x2 2x8
      array [ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N CR8S AL7S ZM8N ZM9N ZM10N ZM11N ZM12N ZM13N ZM14N]
            alternate_definition [half] mainstream
   simple_funny
   setup 2x4 crosswave rotate
      array [CR0N CR1N AL1S AL0S ZM2W ZM3W ZM7W ZM6W]
   setup 2x2 dmd rotate no_cutting_through
      array [CR0N AL0S ZM1W ZM3W]
   setup 4x2 spindle
      array [ZM0N ZM1N ZM2N CR3E AL3W ZM4N ZM5N ZM6N]
   setup 3x2 short6 rotate no_cutting_through
      array [ZM5W ZM0W CR1N AL1S ZM2W ZM3W]
            alternate_definition [magic half] c1
   simple_funny
   setup 4x2 spindle
      array [ZM0N ZM1N ZM4N CR3E AL3W ZM2N ZM5N ZM6N]
   setup 3x2 short6 rotate no_cutting_through
      array [ZM5W ZM2W CR1N AL1S ZM0W ZM3W]

call "circulate @9 times" mainstream
            neednumber visible_fractions distribute_repetitions
   seq circulate [repeat_n]

call "couples circulate" mainstream
   /* The "as couples" concept is illegal at mainstream, so we include this. */
   setup 2x4 2x4 restriction forbidden 2fl_only
      array [CR3S CR2S AL1S AL0S ZM3N ZM2N ZM1N ZM0N]
            alternate_definition [half] mainstream
   setup 2x4 crosswave rotate restriction forbidden 2fl_only
      array [CR0N CR1N AL1S AL0S ZM2W ZM3W ZM7W ZM6W]

call "column circulate" mainstream tag colcirc
            take_right_hands
   simple_funny
   setup 4x2 2x4
      array [ZM1N ZM2N ZM3N CR4S AL3S ZM4N ZM5N ZM6N]
   setup 3x2 2x3
      array [ZM1N ZM2N CR3S AL2S ZM3N ZM4N]
            alternate_definition [magic] c1
   simple_funny
   setup 4x2 2x4 restriction magic_only
      array [ZM6N ZM2N ZM4N CR4S AL3S ZM3N ZM5N ZM1N]
   setup 3x2 2x3
      array [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
            alternate_definition [12matrix] c3a
   simple_funny
   setup 6x2 2x6
      array [ZM1N ZM2N ZM3N ZM4N ZM5N CR6S AL5S ZM6N ZM7N ZM8N ZM9N ZM10N]
            alternate_definition [16matrix] c3a
   simple_funny
   setup 8x2 2x8
      array [ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N CR8S AL7S ZM8N ZM9N ZM10N ZM11N ZM12N ZM13N ZM14N]
            alternate_definition [half] mainstream
   simple_funny
   setup 4x2 spindle
      array [ZM0N ZM1N ZM2N CR3E AL3W ZM4N ZM5N ZM6N]
   setup 3x2 short6 rotate
      array [ZM5W ZM0W CR1N AL1S ZM2W ZM3W]
            alternate_definition [magic half] c1
   simple_funny
   setup 4x2 spindle
      array [ZM0N ZM1N ZM4N CR3E AL3W ZM2N ZM5N ZM6N]
   setup 3x2 short6 rotate no_cutting_through
      array [ZM5W ZM2W CR1N AL1S ZM0W ZM3W]

call "column (usually) circulate" dontshow tag usualcolcirc
            take_right_hands
   setup 2x4 2x4 restriction unusual alwaysfail
      array [CR3S CR2S AL1S AL0S ZM3N ZM2N ZM1N ZM0N]
   setup 4x2 2x4 restriction unusual wave_only
      array [ZM1N ZM2N ZM3N CR4S AL3S ZM4N ZM5N ZM6N]
   setup 3x2 2x3 restriction unusual wave_only
      array [ZM1N ZM2N CR3S AL2S ZM3N ZM4N]
            alternate_definition [magic] c1
   setup 4x2 2x4 restriction unusual magic_only
      array [ZM6N ZM2N ZM4N CR4S AL3S ZM3N ZM5N ZM1N]
   setup 3x2 2x3
      array [ZM4N ZM3N CR3S AL2S ZM2N ZM1N]
            alternate_definition [half] mainstream
   setup 2x4 crosswave rotate restriction unusual alwaysfail
      array [CR0N CR1N AL1S AL0S ZM2W ZM3W ZM7W ZM6W]
   setup 4x2 spindle restriction unusual wave_only
      array [ZM0N ZM1N ZM2N CR3E AL3W ZM4N ZM5N ZM6N]
   setup 3x2 short6 rotate no_cutting_through
      array [ZM5W ZM0W CR1N AL1S ZM2W ZM3W]
            alternate_definition [magic half] c1
   simple_funny
   setup 4x2 spindle
      array [ZM0N ZM1N ZM4N CR3E AL3W ZM2N ZM5N ZM6N]
   setup 3x2 short6 rotate no_cutting_through
      array [ZM5W ZM2W CR1N AL1S ZM0W ZM3W]

call "real column circulate" dontshow tag realcolcirc
   /* Used in advance to a column.  The restriction will make it get unhappy if
      we call so-and-so advance to a column for inappropriate
      designees or in an inappropriate setup for them. */
   setup 4x2 2x4 restriction forbidden wave_only
      array [ZM1N ZM2N ZM3N CR4S AL3S ZM4N ZM5N ZM6N]

call "1/2 circulate" mainstream tag half_circ
            take_right_hands
   setup 2x4 crosswave rotate
      array [CR0N CR1N AL1S AL0S ZM2W ZM3W ZM7W ZM6W]
   setup 2x2 dmd rotate no_cutting_through
      array [CR0N AL0S ZM1W ZM3W]
   setup 4x2 spindle
      array [ZM0N ZM1N ZM2N CR3E AL3W ZM4N ZM5N ZM6N]
   setup 3x2 short6 rotate no_cutting_through
      array [ZM5W ZM0W CR1N AL1S ZM2W ZM3W]

call "circulate 1-1/2" mainstream
            take_right_hands
   setup 2x4 crosswave rotate
      array [CM2E CM3E ZM7E AM6E AL0S AL1S CR1N CR0N]
   setup 2x2 dmd rotate no_cutting_through
      array [CM1E AM3E AL0S CR0N]
   setup 4x2 spindle
      array [ZM1N ZM2N CR3E CM4S AM2S AL3W ZM4N ZM5N]
   setup 3x2 short6 rotate no_cutting_through
      array [ZM0W CR1N CM2E AM0E AL1S ZM2W]

call "tag circulate" c4
   setup 2x4 2x4 restriction 2fl_only
      array [CR2S CR3S ACR0N ACR1N ZM3N ZM2N ZM1N ZM0N]
            alternate_definition [single] c4
   setup 2x2 2x2 restriction wave_only
      array [CR1S ACR0N ZM1N ZM0N]
            alternate_definition [3x3] c4
   setup 2x6 2x6 restriction 3x3couples_only
      array [CR3S CR4S CR5S ACR0N ACR1N ACR2N ZM5N ZM4N ZM3N ZM2N ZM1N ZM0N]
            alternate_definition [4x4] c4
   setup 2x8 2x8 restriction 4x4couples_only
      array [CR4S CR5S CR6S CR7S ACR0N ACR1N ACR2N ACR3N ZM7N ZM6N ZM5N ZM4N ZM3N ZM2N ZM1N ZM0N]

call "box circulate" mainstream tag box_circ
            take_right_hands
   simple_funny
   setup 2x2 2x2 no_cutting_through
      array [CR1S AL0S ZM1N ZM0N]
            alternate_definition [half] mainstream
   setup 2x2 dmd rotate
      array [CR0N AL0S ZM1W ZM3W]

call "_maybe magic box circulate" dontshow tag maybe_magic_box_circ
   /* For magic hocus-pocus.  Unfortunately, the sleazy way we do this
      does not allow us to specify roll information reliably, so we have
      taken it out.  Someday, of course, we will code hocus pocus correctly.
      So little time; so much to do. */
   simple_funny
   setup 2x2 2x2
      array [C1S A0S Z1N Z0N]
            alternate_definition [magic] c3
   /* This is cross back. */
   simple_funny
   setup 2x2 2x2 restriction wave_only
      array [C0S A1S Z0N Z1N]

call "1/2 box circulate" mainstream    /* We put this in to make it easier to type. */
            dont_use_in_resolve take_right_hands
   setup 2x2 dmd rotate
      array [CR0N AL0S ZM1W ZM3W]

call "1/2 split circulate" mainstream   /* Same here. */
            dont_use_in_resolve take_right_hands
   setup 2x2 dmd rotate
      array [CR0N AL0S ZM1W ZM3W]

call "box circulate 1-1/2" mainstream tag box_circ_15
            dont_use_in_resolve take_right_hands
   setup 2x2 dmd rotate
      array [ZM1E ZM3E AL0S CR0N]

call "split circulate 1-1/2" mainstream /* Same here. */
            dont_use_in_resolve take_right_hands
   setup 2x2 dmd rotate
      array [ZM1E ZM3E AL0S CR0N]

call "_1/2 box circulate in miniwaves" dontshow tag halfboxcirc_miniwaves
            take_right_hands
   setup 2x2 dmd rotate qualifier miniwaves  /* A restriction would be better, but this is good enough. */
      array [CR0N AL0S ZM1W ZM3W]

call "double down" c4
            take_right_hands
   setup 2x4 2x4
      preds "Can't tell which way my adjacent end is facing."
         if inner_active_lines [0    AM7S CM4S 0    AL2S CR3S AL0S CR1S]
         if outer_active_lines [CR3S CR2S AL1S AL0S 0    ZM2N ZM1N 0]
   setup 4x2 2x4
      preds "Can't tell which way my adjacent end is facing."
         if column_double_down [CR6S ZM2N ZM3N CM5S AM2S ZM4N ZM5N AL1S]
            alternate_definition [cross] c4
   setup 2x4 2x4
      preds "Can't tell which way my adjacent end is facing."
         if inner_active_lines [0    AM7S CM4S 0    AL2S CR3S AL0S CR1S]
         if outer_active_lines [CR2S CR3S AL0S AL1S 0    ZM3N ZM0N 0]
   setup 4x2 2x4
      preds "Can't tell which way my adjacent end is facing."
         if column_double_down [CR6S ZM5N ZM4N CM5S AM2S ZM3N ZM2N AL1S]
            alternate_definition [half] c4
   setup 2x4 hyperglass
      preds "Can't tell which way my adjacent end is facing."
         if inner_active_lines [0    AL2S CR5S 0    ZM5N 0    0    ZM2N]
         if outer_active_lines [CR3E CR4E AL4W AL3W 0    ZM7N ZM1N 0]

call "_finish clear out" dontshow tag finclearout
   setup 2x4 2x4
      array [CR0S CR2S AL1S AL3S ZM4N AL2S CR1S ZM7N]
   setup 4x2 2x4
      array [ZM0N CR2S CR5S CR3S AL4S AL2S AL5S ZM7N]

call "@1clear out" c4a
            first_part_visible magic_is_inherited
   seq circulate [or_anycall inherit_magic]
   seq finclearout [roll_transparent]

call "@N clear out" c4a
            first_part_visible magic_is_inherited
   seq circnullcall [or_anycall inherit_magic]
   seq finclearout [roll_transparent]

call "lift off" c3
            reverse_means_mirror
   setup 2x4 2x4 rotate
      array [0 3S 5S 0 0 0 0 0]
   setup 4x2 2x4 rotate
      array [0W 0 0 0 0 0 0 2E]

call "_start wave the whomever" dontshow tag startwave
   /* This is just a press ahead, but legal only in a "liftoff" setup. */
   setup 2x4 2x4 rotate
      array [0 7W 0W 0 0 0 0 0]
   setup 4x2 2x4 rotate
      array [6W 0 0 0 0 0 0 5W]

call "finish wave the @6" c3 tag finishwave
   /* Selector identities *do* get re-evaluated for the new centers and ends,
      which makes this work.  Compare patch the <anyone>. */
   conc starthopping [] designeeskick [conc_demand_columns conc_force_lines]

call "wave the @6" c3
   seq startwave []
   seq finishwave []

call "split grand chain 8" c2
            sequence_starter rear_back_from_r_wave
   setup 2x4 2x4
      array [0 0 0 0 0 L3S L0S 0]
   setup 4x2 2x4
      array [L1E 0 0 0 0 0 0 L6W]

call "_spin the pulley but" dontshow tag spinpulleypart1
            left_means_mirror
   setup 2x4 2x4
      array [0 0 0 0 0 CM1W CM0W 0]
   setup 4x2 2x4
      array [ZM6N 0 0 0 0 0 0 ZM7N]

call "spin the pulley" c3a
            sequence_starter left_means_mirror
   seq spinpulleypart1 [inherit_left]
   seq peeloff [allow_plain_mod]

call "the pulley" c3a
   seq triplecross []
   seq peeloff [allow_plain_mod]

call "curli-pass" c3x
            sequence_starter
   setup 2x4 2x4
      preds "Must be facing opposite sex."
         if x22_boy_facing_girl [0 0 0 0 0 3E 1E 0]
         if x22_girl_facing_boy [0 0 0 0 0 3E 1E 0]
   setup 4x2 2x4
      array [0N 0 0 0 4N 0 0 6N]

call "_split mixed up and nothing" dontshow tag mixedup
            sequence_starter
   setup 2x4 2x4
   array [0 0 0 0 0 4S 7S 0]
   setup 4x2 2x4
   array [1E 0 0 0 0 0 0 6W]

call "_centers do @0" dontshow tag centers_mandatory_call
   conc nullcall [mandatory_anycall] nullcall []

call "split mixed up, new ctrs @0" c3x
            sequence_starter dont_use_in_resolve
   seq mixedup []
   seq centers_mandatory_call []

call "hocus pocus" c2
            magic_is_inherited yoyo_is_inherited
   /* Inheriting yoyo to the ends' part of course makes it illegal to call
      just "yoyo hocus pocus".  We have to say "centers work yoyo, hocus pocus". */
   conc trade [inherit_yoyo] two_o_circs [inherit_yoyo inherit_magic conc_force_otherway endscando]

call "_wheel and" dontshow tag wheel
            reverse_means_mirror
   setup 2x2 2x2
      array [L0E L3E 0 0]

call "_8by" dontshow tag 8by
            visible_fractions left_means_mirror
   seq passthru []
   seq courtesy []
   seq roll []

call "wheel and @0" c1
            reverse_means_mirror dont_use_in_resolve
   conc nullcall [mandatory_anycall] wheel [inherit_reverse conc_demand_columns conc_force_columns]

call "buckle and @0" c4a
            dont_use_in_resolve
   conc nullcall [mandatory_anycall] coupleup [conc_demand_lines conc_force_columns]

call "cloverleaf" mainstream tag cloverleaf
   setup 4x2 2x4 rotate
      array [0 0 AL0N AL1N CR2S CR3S 0 0]
            alternate_definition [cross] c1
   setup 4x2 2x4 rotate
      array [0 0 CR3S CR2S AL1N AL0N 0 0]
            alternate_definition [single] c4
   setup 2x2 2x2
      array [AL0E CR1W 0 0]
            alternate_definition [single cross] c4
   setup 2x2 2x2
      array [CR1W AL0E 0 0]
            alternate_definition [3x3 12matrix] c4
   setup 6x2 2x6 rotate
      array [0 0 0 AL0N AL1N AL2N CR3S CR4S CR5S 0 0 0]
            alternate_definition [3x3 12matrix cross] c4
   setup 6x2 2x6 rotate
      array [0 0 0 CR5S CR4S CR3S AL2N AL1N AL0N 0 0 0]
            alternate_definition [4x4 16matrix] c4
   setup 8x2 2x8 rotate
      array [0 0 0 0 AL0N AL1N AL2N AL3N CR4S CR5S CR6S CR7S 0 0 0 0]
            alternate_definition [4x4 16matrix cross] c4
   setup 8x2 2x8 rotate
      array [0 0 0 0 CR7S CR6S CR5S CR4S AL3N AL2N AL1N AL0N 0 0 0 0]

call "_cloverflow 1" dontshow tag clovflow1
   conc passthru [] clover [conc_demand_columns conc_force_columns]

call "_cloverflow 2" dontshow tag clovflow2
   crossconc passthru [conc_demand_columns] clover [conc_force_columns]

call "cloverflow" c4
            visible_fractions
   seq clovflow1 []
   seq clovflow2 []

call "_cloverleaf turn 1" dontshow tag clovturn1
   conc turnthru [] clover [conc_demand_columns conc_force_columns]

call "_cloverleaf turn 2" dontshow tag clovturn2
   crossconc turnthru [conc_demand_columns] clover [conc_force_columns]

call "cloverleaf turn" c4
            visible_fractions
   seq clovturn1 []
   seq clovturn2 []

call "_clover and" dontshow tag clover
   setup 2x2 2x2
      array [AL0E CR1W 0 0]
            alternate_definition [cross] a1
   setup 2x2 2x2
      array [CR1W AL0E 0 0]

call "clover and @0" a1
            dont_use_in_resolve cross_is_inherited
   conc nullcall [mandatory_anycall] clover [inherit_cross conc_demand_columns conc_force_columns]

call "eight by @0" c3a
            dont_use_in_resolve left_means_mirror
   conc nullcall [mandatory_anycall] 8by [inherit_left conc_demand_lines conc_force_otherway]

call "_fly away ctrs" dontshow tag flyback
   setup 2x2 2x2
      array [R3N R2N 0 0]

call "_fly away ends" dontshow tag flyend
   seq trade []
   seq nullcall [mandatory_anycall]

call "fly away, new centers @0" c3x
            dont_use_in_resolve
   crossconc flyend [conc_demand_lines] flyback [conc_demand_lines conc_force_columns]

call "_ends detour" dontshow tag endsdetour
   setup 2x2 2x2 restriction forbidden peelable_box
      array [AL3E CR2W CR1E AL0W]

call "_ends shadow" dontshow tag endsshadow
   setup 2x2 2x2 restriction forbidden peelable_box
      array [AL0W CR1E CR2W AL3E]

call "detour" c2 tag detour
   conc ctr_rot [conc_force_otherway] endsdetour [conc_demand_lines conc_force_columns endscando]

call "detour from waves" dontshow tag wave_detour
   setup 2x4 2x4 restriction wave_only
      array [AL7E CR2E AL1W CR4W CR3E AL2W CR1E AL0W]

call "team up" c3a
   conc beaurun [] half_circ_and_hinge [conc_force_columns endscando]   /* the "force columns" makes the hingers stay together */

call "_tunnel part 1" dontshow tag tunnel1
           single_is_inherited
   maybesinglecrossconc verticalhalftag [inherit_single conc_demand_columns] partnertagbypairs [inherit_single conc_force_columns]

call "_tunnel thru part 1" dontshow tag tunnelthru1
           single_is_inherited
   maybesinglecrossconc verticaltag [inherit_single conc_demand_columns] partnertagbypairs [inherit_single conc_force_columns]

call "_tunnel @h part 2" dontshow tag tunnel2
           single_is_inherited
   maybesingleconc quarter_maybe [] maybesingletrade [inherit_single]

call "_tunnel thru @h part 2" dontshow tag tunnelthru2
           single_is_inherited
   maybesingleconc face_dir [] maybesingletrade [inherit_single]

call "tunnel @h" c4a
           single_is_inherited
   seq tunnel1 [inherit_single]
   seq tunnel2 [inherit_single]

call "tunnel thru @h" c4a
           single_is_inherited
   seq tunnelthru1 [inherit_single]
   seq tunnelthru2 [inherit_single]

call "_start zip" dontshow tag startzip
   setup 2x2 2x2
      array [R0E L1W R2W L3E]

call "_extend zip" dontshow tag extendzip
   setup 2x2 2x2
      array [R0E L1W M1N M0N]

call "_zipn" dontshow tag zipn
            neednumber
   seq startzip []
   seq extendzip [repeat_nm1]

call "zip code @9, new centers @0" c2
            dont_use_in_resolve neednumber
   crossconc nullcall [mandatory_anycall] zipn [conc_demand_columns conc_force_lines]

call "_finish hoop-de-do" dontshow tag hoopdedo
   seq startzip []
   seq star_thru []

call "hoop-de-do, new centers @0" c4
            dont_use_in_resolve
   crossconc nullcall [mandatory_anycall] hoopdedo [conc_demand_columns conc_force_columns]

call "acey deucey" plus tag aceydeucey
            half_is_inherited
   conc trade [inherit_half] circulate [inherit_half endscando]

call "mix the deucey" c4a
   seq mix []
   seq aceydeucey []

call "trade the deucey" c3a tag trade_duck
   setup 2x4 2x4
      array [CR2S CR3S AL0S AL1S ZM2N AM7S CM4S ZM1N]
   setup 4x2 2x4 rotate
      array [ZM5W CM4E CM3E 0 0 AM0E AM7E ZM6W]
   setup qtag ptpd
      array [0 0 AM6S CM4S 0 0 CM2S AM0S]
   setup pqtag ptpd
      array [ZM7N CR5S 0 0 AL7S ZM5N 0 0]

call "mix the deal" c4a
            single_is_inherited
   maybesingleconc wheelanddeal [inherit_single] wheelanddeal [inherit_single]

call "mix the turn and deal" c4
            single_is_inherited
   maybesingleconc turnanddeal [inherit_single] natturnanddeal [inherit_single]

call "_o-late" dontshow tag olate
   setup 2x4 2x4
      array [CM6S ZM0N ZM3N AM5S R6N ZM4N ZM7N L5N]

call "@2swing@3-o-late" c3
   seq swingslip [or_anycall]
   seq olate []

call "snap the lock" c3a
   setup 2x4 2x4
   array [5S 7S 4S 6S 1N 3N 0N 2N]

call "_ctrs fan chain thru" dontshow tag ctrs_fanchainthru
   seq cast_off_34 []
   seq slip []
   seq cast_off_34 []

call "_ends fan tag the deucey part 2" dontshow tag ends_fantag2
   seq partnertag []
   seq quarter_right []
   seq circulate []

call "_ends fan tag the deucey @h part 2" dontshow tag ends_fantag2dir
   seq partnertag []
   seq quarter_maybe []
   seq circulate []

call "_fan tag the deucey part 2" dontshow tag fantag2
   conc ctrs_fanchainthru [] ends_fantag2 [conc_demand_lines conc_force_spots]

call "_fan tag the deucey @h part 2" dontshow tag fantag2dir
   conc ctrs_fanchainthru [] ends_fantag2dir [conc_demand_lines conc_force_spots]

call "fan tag the deucey" c4 tag fantagduck
            step_to_wave left_means_touch_or_check
   seq check1x4 []
   seq fantag2 []

call "fan tag the deucey @h" c4 tag fantagduckdir
            step_to_wave left_means_touch_or_check
   seq check1x4 []
   seq fantag2dir []

call "spin tag the deucey" c4       /* Andy B. loves this call. */
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fantagduck []

call "spin tag the deucey @h" c4
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fantagduckdir []

call "_check_1x4" dontshow tag check1x4
            12_16_matrix_means_split
   setup 1x4 1x4
      array [ZM0N ZM1N ZM2N ZM3N]

call "_trade and check 1x4" dontshow tag tradencheck1x4
            yoyo_is_inherited 12_matrix_is_inherited 16_matrix_is_inherited
   seq trade [inherit_yoyo inherit_12_matrix inherit_16_matrix]
   seq check1x4 [roll_transparent inherit_12_matrix inherit_16_matrix]

call "rims trade @2back@3" c2
            visible_fractions
   seq tradencheck1x4 []
   seq rims_trade_2 []

call "hubs trade @2back@3" c2
            visible_fractions
   seq tradencheck1x4 []
   seq hubs_trade_2 []

call "_rims trade part 2" dontshow tag rims_trade_2
   singleconc_together circulate [or_anycall] nullcall []

call "_hubs trade part 2" dontshow tag hubs_trade_2
   singleconc_together nullcall [] circulate [or_anycall]

call "round off" c3x
   setup 2x4 2x4
   array [1E 0E 3W 2W 0 0 0 0]
call "round & cross" c3x
   setup 2x4 2x4
   array [6E 7E 4W 5W 0 0 0 0]
call "round the horn" c3x
   setup 2x4 2x4
   array [2E 7S 4S 1W 0 0 0 0]

call "fan chain thru" c3 tag fan_chain_thru
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction forbidden wave_only
      /* **** This can be improved when we get better stability encodings. */
      array [ZM0N R6N L5N ZM3N ZM4N AAL6S CCR5S ZM7N]

call "spin chain thru" mainstream
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fan_chain_thru []

call "swing chain thru" c3a
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
   array [6S 0S 3S 5S 6N 4S 7S 5N]

call "_counteract part 1" dontshow tag counteract1
            yoyo_is_inherited
   /* Inheriting yoyo to the centers will make it fail, of course.  This is
      only legal if the yoyo modifier is given just to the outsides. */
   conc ctr_rot [inherit_yoyo] trade [inherit_yoyo conc_demand_columns conc_force_spots]

call "_counteract part 2" dontshow tag counteract2
/*
   setup 4x2 4x4
      array [CR15E CR15S CR5S CR2E AL1W AL14S AL11S AL11W]
*/
   setup 4x2 c1phan
      array [CR2E CR3S CR9S CR8E AL5W AL4S AL14S AL15W]
   setup 2x4 2x4
      array [0 CR3S AL0S 0 0 AL5S CR6S 0]

call "counteract" c3x
            visible_fractions yoyo_is_inherited
   seq counteract1 [inherit_yoyo]
   seq counteract2 []

call "_centers 3/4 / ends half-circ" dontshow tag motivate2
            12_matrix_is_inherited 16_matrix_is_inherited
   maybematrix_conc_star armturn_34 [] half_circ [conc_demand_lines]

call "@1motivate" a2
            12_matrix_is_inherited first_part_visible
   seq circulate [inherit_12_matrix or_anycall]
   seq motivate2 [inherit_12_matrix]
   seq turnstar2_endstrade [inherit_12_matrix]
   seq finishnomod [inherit_12_matrix]   /* Can't allow the cast off 3/4 to be replaced, because there are two of them. */

call "@N motivate" c2
            12_matrix_is_inherited first_part_visible
   seq circnullcall [inherit_12_matrix or_anycall]
   seq motivate2 [inherit_12_matrix]
   seq turnstar2_endstrade [inherit_12_matrix]
   seq finishnomod [inherit_12_matrix]   /* Can't allow the cast off 3/4 to be replaced, because there are two of them. */

call "relay the top" c1
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible 12_matrix_is_inherited 16_matrix_is_inherited
   seq tradencheck1x4 [inherit_yoyo inherit_12_matrix inherit_16_matrix]
   seq motivate2 [inherit_12_matrix inherit_16_matrix]
   seq turnstar1_endstrade [inherit_12_matrix inherit_16_matrix]
   seq finishnomod [inherit_12_matrix inherit_16_matrix]      /* Can't allow the cast off 3/4 to be replaced, because there are two of them. */

call "relay the yoyo" c4    /* Leave this in until the text fudging is done. */
            step_to_wave left_means_touch_or_check first_part_visible 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_34 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq motivate2 [inherit_12_matrix inherit_16_matrix]
   seq turnstar1_endstrade [inherit_12_matrix inherit_16_matrix]
   seq finishnomod [inherit_12_matrix inherit_16_matrix]      /* Can't allow the cast off 3/4 to be replaced, because there are three of them. */

call "@9-@9-@9-@9 relay the top" c4
            step_to_wave left_means_touch_or_check first_part_visible need_four_numbers 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_n4 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq quarterdeucey2 [inherit_12_matrix inherit_16_matrix shift_one_number]
   seq turnstarn_endstrade [inherit_12_matrix inherit_16_matrix shift_two_numbers]
   seq quarterdeucey4 [inherit_12_matrix inherit_16_matrix shift_three_numbers]

call "@b cast and relay" c3
            step_to_wave left_means_touch_or_check first_part_visible neednumber 12_matrix_is_inherited 16_matrix_is_inherited
   seq armturn_n4 [inherit_12_matrix inherit_16_matrix]
   seq check1x4 [inherit_12_matrix inherit_16_matrix]
   seq motivate2 [inherit_12_matrix inherit_16_matrix]
   seq turnstarn_endstrade [inherit_12_matrix inherit_16_matrix]
   seq finishnomod [inherit_12_matrix inherit_16_matrix]      /* Can't allow the cast off 3/4 to be replaced, because there are two of them. */

call "fan chain the gears" c3 tag fan_chain_gears
            step_to_wave
   seq fanback []
   seq veryctr2trade []
   seq turnstar3 [or_anycall]
   seq fudge_to_parallel_diamonds []
   seq veryctr2trade []
      /* The final ends U-turn away, not toward the center.
         Callerlab plus definitions, page 6. */
   seq ctrarmturn_34_utaway []

call "spin chain the gears" plus
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq tradencheck1x4 [inherit_yoyo]
   seq fan_chain_gears []

call "swing chain the gears" c4
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq tradencheck1x4 [inherit_yoyo]
   seq youall []
   seq veryctr2trade []
   seq turnstar1 [or_anycall]
   seq fudge_to_parallel_diamonds []
   seq veryctr2trade []
   seq ctrarmturn_14_utaway []

call "_finish spin chain and exchange the gears" dontshow tag fan_chain_exch_gears
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
      array [R5N L0S R3S L6N L1N R0N L3N R2N]

call "spin chain and exchange the gears" plus
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fan_chain_exch_gears []

call "_finish spin chain and circulate the gears" dontshow tag fan_chain_circ_gears
            step_to_wave left_means_touch_or_check
   setup 2x4 2x4 restriction wave_only
      array [L1S L4N R7N R2S R5S M0N M3N L6S]

call "spin chain and circulate the gears" c3x
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq trade [inherit_yoyo]
   seq fan_chain_circ_gears []

call "scoot back" mainstream tag scootback
            fudge_to_q_tag
   setup 2x2 2x2 restriction wave_only
      array [CR1S AL0S AM3S CM2S]
   setup pmd dmd qualifier dmd_ctrs_rh
      array [C0S C3S 0 0]
   setup pmd dmd qualifier dmd_ctrs_lh
      array [A0S 0 0 A1S]
   setup pmd dmd
      array [0S 0 0 0]   /* Nobody home?  Ends can still sort of do it. */
            alternate_definition [yoyo] c4
   setup qtag qtag rotate qualifier dmd_ctrs_rh
      array [0 0   0 C7S C2S C4S C5S   0]
   setup qtag qtag rotate qualifier dmd_ctrs_lh
      array [0 0 A0N   0 A1N A2N   0 A7N]
               alternate_definition [interlocked] c3a
   setup qtag qtag
      preds "Must be in quarter line setup."
         if q_line_front [0 0 7S 6S 4S 5S 3S 2S]
         if q_line_back [0 0 7S 6S 4S 5S 3S 2S]

call "scoot back in 1/4 tag" dontshow tag qtagscootback
            fudge_to_q_tag
   setup pmd dmd qualifier dmd_ctrs_rh
      array [C0S C3S 0 0]
   setup pmd dmd qualifier dmd_ctrs_lh
      array [A0S 0 0 A1S]
   setup pmd dmd
      array [0S 0 0 0]   /* Nobody home?  Ends can still sort of do it. */
            alternate_definition [yoyo] c4
   setup qtag qtag rotate qualifier dmd_ctrs_rh
      array [0 0   0 C7S C2S C4S C5S   0]
   setup qtag qtag rotate qualifier dmd_ctrs_lh
      array [0 0 A0N   0 A1N A2N   0 A7N]
               alternate_definition [interlocked] c3a
   setup qtag qtag
      preds "Must be in quarter line setup."
         if q_line_front [0 0 7S 6S 4S 5S 3S 2S]
         if q_line_back [0 0 7S 6S 4S 5S 3S 2S]

call "_boxy scoot back" dontshow tag boxyscootback
   setup 2x2 2x2 restriction forbidden wave_only
      array [CR1S AL0S AM3S CM2S]
               alternate_definition [3x3] c4a
   setup 3x2 2x3
      array [CM5S CM4S CR3S AL2S AM1S AM0S]
               alternate_definition [4x4] c4a
   setup 4x2 2x4
      array [CM7S CM6S CM5S CR4S AL3S AM2S AM1S AM0S]

call "_fudgy boxy scoot back" dontshow tag fudgyboxyscootback
   /* What's fudgy about this?  The yoyo version, that's what.  Real dancers wouldn't
      do it, because the leads are just turning around.  This is only legal if followed
      by a "backemup" operation. That is, it is only legal if it is actually being done
      "to a wave", as the scoot back in things like "scoot reaction" is done.  But we
      do the whole thing, with the extend to a wave the way no human would, followed by
      backing up, so that the "scoot reaction" can be done in the presence of lots of
      phantoms.  That is, by having the original lead step back into a wave, he knows
      what handedness to use for the chain reaction.  If he just became the point of a
      1/4-tag, the centers might be phantoms, and he wouldn't know what to do. */
   setup 2x2 2x2 restriction forbidden wave_only
      array [CR1S AL0S AM3S CM2S]
            alternate_definition [yoyo] c4
   setup 2x2 2x2 restriction unusual alwaysfail
      array [CR0S AL1S AL2E CR3W]

call "scoot back to a wave" c1
   setup 2x2 dmd rotate restriction forbidden wave_only
      array [CR0E AL0E AL3E CR1E]
   setup pmd 2x2 qualifier dmd_ctrs_rh
      array [CR3S CR2S 0 0]
   setup pmd 2x2 qualifier dmd_ctrs_lh
      array [AL0S 0 0 AL1S]
            alternate_definition [yoyo] c4
   setup 2x2 thar restriction unusual alwaysfail
      array [CR2S AL2S AL7E CR7W]
   setup pmd 1x4 qualifier dmd_ctrs_rh
      array [CR0W CR3W 0 0]
   setup pmd 1x4 qualifier dmd_ctrs_lh
      array [AL0E 0 0 AL3E]

/* This call requires the "left" modifier to be given if called from
   a left-handed setup.  The purpose is to avoid losing if we call
   "scoot and little" from a leftie.  The official rules require that
   people go left on the outside, even though we didn't say "left",
   since they observed the handedness of the setup during the scoot back.
   The way we address this problem is to forbid the scoot back from a leftie
   unless the word "left" is explicitly used.  This way, both the dancers
   and the program know to go left on the outside.  The calls little/little
   more/plenty/rally by themselves are legal from either handedness and
   always go right, in accordance with the rules. */
call "right scoot back" dontshow tag rtqtagscootback
            left_means_mirror fudge_to_q_tag
   setup pmd dmd qualifier miniwaves
      array [C0S C3S 0 0]
            alternate_definition [yoyo] c4
   setup qtag qtag rotate qualifier miniwaves
      array [0 0 0 C7S C2S C4S C5S 0]
               alternate_definition [interlocked] c3a
   setup qtag qtag
      preds "Must be in quarter line setup."
         if q_line_front [0 0 0 0 4S 5S 3S 2S]
         if q_line_back  [0 0 0 0 4S 5S 3S 2S]

call "_fix scoot the diamond" dontshow tag fixscootdiamond
   setup pmd dmd qualifier dmd_ctrs_rh
      array [0 ZM1N CR2E 0]
   setup pmd dmd qualifier dmd_ctrs_lh
      array [0 0 AL2W ZM3N]
               alternate_definition [interlocked] c3a
   setup qtag qtag qualifier ctr_pts_rh
      array [CR0E CR1E ZM2N ZM3N 0 0 ZM6N ZM7N]
   setup qtag qtag qualifier ctr_pts_lh
      array [AL0W AL1W ZM2N ZM3N 0 0 ZM6N ZM7N]

call "scoot the diamond" c3a
            visible_fractions intlk_is_inherited yoyo_is_inherited
   seq scootback [inherit_intlk inherit_yoyo]
   seq fixscootdiamond [inherit_intlk]
   seq diamondcirc [inherit_intlk]

call "_fudgy scatter scoot" dontshow tag fudgyscatscoot
   /* The yoyo version of this has the same fudge as "fudgyboxyscootback".  See above. */
   setup 2x4 2x4 restriction forbidden wave_only
      array [CR3S CR2S AL1S AL0S AM5S CM4S AM7S CM6S]
            alternate_definition [yoyo] c4
   setup 2x4 2x4 restriction unusual alwaysfail
      array [CR2S CR3S AL0S AL1S 0 0 0 0]
   setup 4x2 2x4 restriction unusual alwaysfail
      array [CR0W 0 CR2W 0 0 AL5E 0 AL7E]

call "_fix scoot chain thru" dontshow tag fixscootchainthru
   setup 2x4 2x4 restriction forbidden wave_only
      array [CM6S CCAM3N AACM0N AM5S ZM4N ZM5N ZM6N ZM7N]
   setup qtag qtag qualifier dmd_ctrs_rh
      array [C7S AAC0N   0 AAC6N 0 0 C5S 0]
   setup qtag qtag qualifier dmd_ctrs_lh
      array [CCA1N A3S A4S     0 0 0   0 CCA2N]

call "scoot chain thru" a2 tag scootchainthru
            yoyo_is_inherited
   seq scootback [inherit_yoyo]  /* The yoyo version is only legal in a 1/4-tag. */
   seq fixscootchainthru []

call "_fudgy scoot chain thru" dontshow tag fudgyscootchainthru
   /* The yoyo version of this has the same fudge as "fudgyboxyscootback".  See above. */
            yoyo_is_inherited
   seq fudgyboxyscootback [inherit_yoyo]
   seq fixscootchainthru []

call "scoot chain thru to a wave" c1
   setup qtag 2x4 qualifier dmd_ctrs_rh
      array [0 0   0 CR2N CR5N  R4S R3S 0]
   setup qtag 2x4 qualifier dmd_ctrs_lh
      array [0 0 L0S    0  L7S AL6N   0 AL1N]
   setup 2x4 qtag restriction forbidden wave_only
      array [C0S A0S C1S A1S L6S CR3N AL7N R2S]
            alternate_definition [yoyo] c4
   setup pmd 1x4 qualifier dmd_ctrs_rh restriction unusual alwaysfail
      array [CCR1E R0W 0 0]
   setup pmd 1x4 qualifier dmd_ctrs_lh restriction unusual alwaysfail
      array [AAL1W 0 0 L0E]

call "scoot and dodge" a1 tag scootndodge
   setup 2x2 2x2 restriction forbidden wave_only
      array [Z1N Z0N A3S C2S]

call "scoot chain thru and dodge" c4 tag scootchainthrundodge
   setup 2x4 2x4 restriction forbidden wave_only
      array [ZM1N ZM0N ZM3N ZM2N 7S CM2N AM1N 4S]

call "_fudgy scatter scoot chain thru" dontshow tag fudgyscatscootchainthru
   /* The yoyo version of this has the same fudge as "fudgyboxyscootback".  See above. */
            yoyo_is_inherited
   seq fudgyscatscoot [inherit_yoyo]  /* The yoyo version is only legal in a T-bone. */
   seq fixscootchainthru []

call "scatter scoot" c1
   seq fudgyscatscoot []    /* Note that we refuse to pass "yoyo". */

call "scatter scoot to a wave" c1
            yoyo_is_inherited
   seq fudgyscatscoot [inherit_yoyo]  /* We allow yoyo in a T-bone. */
   seq backemup []

call "scatter scoot chain thru" c1 tag scatscootchainthru
   seq fudgyscatscoot []
   seq fixscootchainthru []

call "scatter scoot chain thru to a wave" c1
            yoyo_is_inherited
   seq fudgyscatscoot [inherit_yoyo]  /* We allow yoyo in a T-bone. */
   seq fixscootchainthru []
   seq backemup []

call "quick change" c4
   conc trade_and_roll [] circ_and_quarter_in [conc_demand_lines conc_force_spots]

call "deuces wild" c4
            half_is_inherited
   conc trade [inherit_half] zoom [inherit_half endscando]

call "nice and easy" c4
   conc trade_and_roll [] zing [conc_demand_lines conc_force_columns]

call "drift apart" c3a
   setup 2x4 2x4
      array [CM6S CM4S AM7S AM5S AL2S AL0S CR3S CR1S]
   setup 4x2 2x4
      array [CR6S ZM4N AL3S CM5S AM2S CR4S ZM3N AL1S]
            alternate_definition [12matrix] c3a
   setup 3x4 3x4
      array [CM11S CM4S AM10S AM5S AL2S AL0S ZM3N ZM3N ZM0N ZM0N CR1S CR3S]
            alternate_definition [3x3 12matrix] c4
   setup 3x4 3x4
      array [C8S C6S A9S A7S A5S A10S A2S A0S C3S C1S C11S C4S]
            alternate_definition [4x4 16matrix] c4
   setup 4x4 4x4
      array [A5S A7S A3S A9S A14S A12S C0S A10S C13S C15S C11S C1S C6S C4S A8S C2S]

call "INVERT drift apart" c4
   setup 2x4 2x4
      array [CM5S AM7S CM4S AM6S AL1S CR3S AL0S CR2S]

call "drift around" c4
            reverse_means_mirror
   setup 2x2 2x2
      array [CR1S CR2N 0 0]

call "change your image" c3
   setup 2x4 2x4 rotate
      array [M5E R0E L7E M2E L1E M0W M7W R6E]
   setup 4x2 2x4
      array [R6S M3N R4S M5S M2S L3S M4N L1S]
            alternate_definition [magic] c3
   setup 2x4 2x4 rotate
      array [M5E AL7E CR0E M2E AL1E M7W M0W CR6E ]
   setup 4x2 2x4
      array [AL1S M4N AL3S M2S M5S CR4S M3N CR6S]

call "turntable" c4a
         left_means_mirror reverse_means_mirror
   setup 2x4 2x4
      array [5E 4W 7W 6E 1W 0W 3W 2W]
   setup 4x2 2x4
      array [5W 4W 7W 6E 1E 0W 3W 2W]

call "centers go as you are, turntable" c4a
         left_means_mirror reverse_means_mirror
   setup 2x4 2x4
      array [5E 4S 7S 6E 1W 0S 3S 2W]
   setup 4x2 2x4
      array [5W 4S 7S 6E 1E 0S 3S 2W]

call "switch to an hourglass" a2
   setup 2x4 hrglass rotate
      array [R6N L5E R0E L6S M3W R1E L4E M7W]

call "hourglass circulate" a2
            fudge_to_q_tag
   simple_funny
   setup hrglass hrglass
      array [0 0 L1W 0 0 0 R0E 0]
   setup phrglass hrglass
      array [M3N R2E 0 M1N L2W M7N 0 M4N]

call "squeeze the hourglass" c1
   setup hrglass galaxy
      array [0 0 ZM4N 0 0 0 ZM0N 0]
   setup phrglass galaxy
      array [CR7S CR5S 0 CR6S AL3S AL1S 0 AL2S]

call "squeeze the galaxy" c1
   setup galaxy hyperglass
      preds "???"
         if next_galaxyspot_is_tboned [ZM0N CR5S 0 AL2S ZM6N AL11S 0 CR8S]
                            if always [CR7S CR5S 0 AL2S AL1S AL11S 0 CR8S]

call "squeeze the butterfly" c1
   setup 4x4 4x4
      array [AL13S 0 0 AL10S AL6S 0 0 AL9S CR5S 0 0 CR2S CR14S 0 0 CR1S]

call "squeeze the O" c1
   setup 4x4 4x4
      array [0 AL15S AL11S 0 0 AL8S CR4S 0 0 CR7S CR3S 0 0 CR0S AL12S 0]

/* Beware!  This call isn't really right. */
call "@6 squeeze" c1
            dont_use_in_resolve
   setup 4x2 4x4
      preds "???"
         if select [CR8S CR6S CR5S CR4S AL0S AL14S AL13S AL12S]
         if always [ZM10N ZM15N ZM3N ZM1N ZM2N ZM7N ZM11N ZM9N]
   setup 4x4 4x4
      preds "???"
         if select [AL13S AL15S AL11S AL10S AL6S AL8S CR4S AL9S CR5S CR7S CR3S CR2S CR14S CR0S AL12S CR1S]
         if always [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N ZM8N ZM9N ZM10N ZM11N ZM12N ZM13N ZM14N ZM15N]

call "flip the hourglass" a2
            fudge_to_q_tag take_right_hands
   setup hrglass 2x4 rotate
      array [0 0 L0S 0 0 0 R7N 0]
   setup phrglass 2x4 rotate
      array [R6E R1E 0 M0W L2E L5E 0 M3W]

call "cut the hourglass" a2
            fudge_to_q_tag take_right_hands
   setup hrglass 2x4 rotate
      array [0 0 L0S 0 0 0 R7N 0]
   setup phrglass 2x4 rotate
      array [R5E R2E 0 M0W L1E L6E 0 M3W]

call "galaxy circulate" c1
   simple_funny
   setup galaxy galaxy
      preds "???"
         if next_galaxyspot_is_tboned [R1E R2E 0 L2W L3W M4N 0 M0N]
         if always [M1N R2E 0 L2W M3N M4N 0 M0N]

call "flip the galaxy" c2
   setup galaxy thar
      array [CR1S CR2E 0 AL2W AL5S ZM4N 0 ZM0N]
            alternate_definition [reverse] c2
   setup galaxy 2x4
      preds "???"
         if next_galaxyspot_is_tboned [R1E L0S 0 R3S L2W R4S 0 L7S]
         if always                    [M1N L0S 0 R3S M2N R4S 0 L7S]

call "cut the galaxy" c2
   setup galaxy thar
      array [CR5S CR2E 0 AL2W AL1S ZM4N 0 ZM0N]
            alternate_definition [reverse] c2
   setup galaxy 2x4
      preds "???"
         if next_galaxyspot_is_tboned [R1E R3S 0 L0S L2W L7S 0 R4S]
         if always                    [M1N R3S 0 L0S M2N L7S 0 R4S]

call "the K" c2 tag the_k
            half_is_inherited
   singleconc_together trade [inherit_half] uturnaway [inherit_half]

call "@2cross @3the K" c2
            visible_fractions
   seq crosstrail [or_anycall]
   seq the_k []

call "counterpoint" c4a
            reverse_means_mirror singlefile_is_inherited diamond_is_legal cross_is_inherited
   conc recycle [inherit_reverse inherit_singlefile inherit_diamond inherit_cross] ctr_rot [conc_force_otherway]

call "@2turn @3the key" c3
            visible_fractions
   seq trade [or_anycall]
   seq ctr_rot [allow_forced_mod]
   seq hinge [allow_forced_mod]

call "_clear the way ends to centers" dontshow tag clearwayec
   seq hinge []
   seq hinge []
   seq verticalhalftag []
   seq ctr_rot []

call "_clear the way centers to ends" dontshow tag clearwayce
   setup 1x4 2x2 restriction wave_only
      array [0W 2W 1E 3E]
            alternate_definition [cross] c3x
   setup 1x4 2x2 restriction wave_only
      array [3W 1W 2E 0E]

call "clear the way" c3x
            cross_is_inherited
   crossconc clearwayec [conc_demand_columns] clearwayce [conc_force_lines inherit_cross suppress_elongation_warnings]

call "create a column" c3x
   setup 4x4 2x4 rotate
      array [AM6E AL7E ZM0W AL7E ZM1W ZM1W ZM6W ZM0W ZM6W ZM7W CR0E ZM7W CM1E CM1E AM6E CR0E]

call "_twist part 1" dontshow tag twist1
   setup 2x4 2x4 rotate
      array [C6N CR0E AL7E A1S A2S 0 0 C5N]

call "_twist part 2" dontshow tag twist2
   conc star_thru [or_anycall] nullcall []

call "twist @4the line @5@7and @8@1" c1
   seq twist1 []
   seq twist2 []

call "_ctrs pass thru/ends slide thru" dontshow tag pass_thru_slide_thru
   conc passthru [] slidethru [conc_demand_lines conc_force_columns]

call "push open the gate" c4a
   seq centersin [allow_forced_mod]
   seq cast_off_34 [allow_forced_mod]
   seq endsbend []
   seq pass_thru_slide_thru []

call "centers thru and close the gate" c4
   seq centersin []
   seq twist1 []
   seq twist2 []

call "mini busy" a2
   setup 2x4 qtag
      array [R0S R1S L0S L1S L3S L6S R2S R7S]

call "2/3 mini busy" c1
   setup 2x4 hrglass
      array [R0E R1E L0W L1W M2N L3W R3E M6N]

call "hinge/flip/stepnfold" dontshow tag hngflpstpnfld
   setup 1x4 2x2 restriction forbidden 2fl_only
       array [CM3S CR2N AM2S AL3N]

call "_busy nothing" dontshow tag busy_nothing
   setup 2x4 bone restriction forbidden siamese_in_quad
       array [CM4S CM1S AM0S AM5S ZM2N ZM3N ZM7N ZM6N]
   setup 4x2 2x4 restriction forbidden siamese_in_quad
       array [ZM1N ZM2N 0 0 0 0 ZM5N ZM6N]

call "_busy_part_2" dontshow tag busy_part_2
   conc hngflpstpnfld [or_anycall] nullcall [suppress_elongation_warnings]

call "_busy_anything_part_2" dontshow tag busy_any_part_2
   conc nullcall [mandatory_anycall] nullcall [suppress_elongation_warnings]

call "@4keep @5busy@1" c3a
   seq busy_nothing []
   seq busy_part_2 []

call "busy @0" c3a
   seq busy_nothing []
   seq busy_any_part_2 []

call "_make a pass part 1" dontshow tag makepass_1
   setup qtag qtag
      preds "Must be in quarter tag setup."
         if q_tag_front  [0N 1N 2N 1N 4N 5N 6N 0N]
         if q_line_back  [0N 1N 2N 1N 4N 5N 6N 0N]
         if q_tag_back   [0N 1N 2N 1N 3N 7N 6N 0N]
         if q_line_front [0N 1N 2N 1N 3N 7N 6N 0N]
            /* We make this C3 so that cross nuclear reaction will be C3. */
            alternate_definition [cross] c3
   setup qtag qtag
      preds "Must be in quarter tag setup."
         if q_tag_front  [0N 1N 2N 0N 7N 3N 6N 1N]
         if q_line_back  [0N 1N 2N 0N 7N 3N 6N 1N]
         if q_tag_back   [0N 1N 2N 0N 4N 5N 6N 1N]
         if q_line_front [0N 1N 2N 0N 4N 5N 6N 1N]

call "_finish make a pass" dontshow tag finmakepass
   conc cast_off_34 [or_anycall] trade_and_roll [conc_force_lines]

call "make a pass@7 but@8@1" c4a
            cross_is_inherited
   seq makepass_1 [inherit_cross]
   seq finmakepass []

call "straight away part 1" dontshow tag straightaway1
            fudge_to_q_tag
   setup qtag 3x4
      preds "???"
         if q_tag_front  [ZM1N ZM2N ZM3N CR4S ZM7N ZM8N  ZM0N AL10S]
         if q_tag_back   [   0    0 ZM3N CR4S ZM5N ZM11N ZM0N AL10S]
         if q_line_front [ZM1N ZM2N ZM3N CR4S ZM7N ZM8N  ZM0N AL10S]
         if q_line_back  [   0    0 ZM3N CR4S ZM5N ZM11N ZM0N AL10S]
         if always       [   0    0 ZM3N CR4S   0   0    ZM0N AL10S]
            alternate_definition [cross] c3x
   setup qtag 3x4
      preds "???"
         if q_tag_front  [ZM1N ZM2N ZM3N CR4S ZM7N  ZM8N  ZM0N AL10S]
         if q_tag_back   [   0    0 ZM3N CR4S ZM11N ZM5N  ZM0N AL10S]
         if q_line_front [ZM1N ZM2N ZM3N CR4S ZM7N  ZM8N  ZM0N AL10S]
         if q_line_back  [   0    0 ZM3N CR4S ZM11N ZM5N  ZM0N AL10S]
         if always       [   0    0 ZM3N CR4S   0     0   ZM0N AL10S]

call "straight away part 2" dontshow tag straightaway2
   in_out_triple_squash waverecycle [allow_plain_mod] nullcall []

call "straight away" c3x
            cross_is_inherited
   seq straightaway1 [inherit_cross]
   seq straightaway2 []

call "_fix spindle" dontshow tag spindlefudge
   setup spindle galaxy
      array [1N 2N 3N 4N 5N 6N 7N 0N]
   setup pspindle galaxy
      array [1N 2N 3N 4N 5N 6N 7N 0N]

call "_nuclear reaction part 2" dontshow tag nuclear_nucleus
   crossconc verticalhalftag [] cast_1_4_roll [conc_force_lines suppress_elongation_warnings]

call "_reactivate part 2" dontshow tag reactivate2
            take_right_hands
   setup galaxy 4x4
      preds "???"
         if next_galaxyspot_is_tboned [CR13E CR3S 0 AL15S AL14W AL11S 0 CR7S]
         if always                    [CM2S  CR3S 0 AL15S AM9S  AL11S 0 CR7S]

call "_backemup" dontshow tag backemup
   setup 2x4 qtag restriction forbidden wave_only
      array [6N 7N 3N 2N 4N 4N 5N 5N]

call "_chain react part 1" dontshow tag chreact_1
   setup qtag spindle rotate
      preds "Must be in quarter tag setup."
         if q_tag_front  [6W 0W 7S 0W 2W 4W 7N 6W]
         if q_tag_back   [6W 0W 7S 0W 1W 5W 7N 6W]
         if q_line_front [6W 0W 7S 0W 1W 5W 7N 6W]
         if q_line_back  [6W 0W 7S 0W 2W 4W 7N 6W]
            alternate_definition [cross] c3a
   setup qtag spindle rotate
      preds "Must be in quarter tag setup."
         if q_tag_front  [6W 0W 7S 6W 5W 1W 7N 0W]
         if q_tag_back   [6W 0W 7S 6W 2W 4W 7N 0W]
         if q_line_front [6W 0W 7S 6W 2W 4W 7N 0W]
         if q_line_back  [6W 0W 7S 6W 5W 1W 7N 0W]

call "_wave chain react part 1" dontshow tag wvchreact_1
   setup 2x4 spindle rotate
      array [7N 6W 0W 7S 1W 2W 4W 5W]
            alternate_definition [cross] c3a
   setup 2x4 spindle rotate
      array [7N 0W 6W 7S 2W 5W 1W 4W]

call "_chain react part 2" dontshow tag chreact_2
            left_means_mirror
   ckpt_star nullcall [] hinge [inherit_left]

call "_wave chain react part 2" dontshow tag wvchreact_2
   ckpt_star nullcall [] armturn_14 []

call "chain reaction" a1
            left_means_mirror cross_is_inherited
   seq chreact_1 [inherit_cross]
   seq chreact_2 [inherit_left]
   seq turnstar1_endstrade []
   seq finish []

/* We don't put in "inherit_left" in the hinge of the chain reaction of these
   compound calls, because, in the case of tag reaction, left applies to the
   tag, and in the case of scoot reaction is it just too weird.  Also,
   we don't allow the final cast off 3/4 in scoot reaction to be replaced,
   because we might change it to a revert the tag reaction, which has another
   cast off 3/4. */

call "scoot@C reaction" c3a
            cross_is_inherited yoyo_is_inherited
   seq fudgyboxyscootback [inherit_yoyo]
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "scatter scoot@C reaction" c3
            cross_is_inherited yoyo_is_inherited
   seq fudgyscatscoot [inherit_yoyo]
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "scoot chain thru@C reaction" c3
            cross_is_inherited yoyo_is_inherited
   seq fudgyscootchainthru [inherit_yoyo]
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "scatter scoot chain thru@C reaction" c3
            cross_is_inherited yoyo_is_inherited
   seq fudgyscatscootchainthru [inherit_yoyo]
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "@v@C reaction" c3a
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq boxyscootback []
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "@v and scatter@C reaction" c4
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq fudgyscatscoot []    /* Note that we refuse to pass "yoyo". */
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "@v chain thru@C reaction" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "@v chain thru and scatter@C reaction" c4
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scatscootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "trans@j cross chain re@laction" c3x
            magic_is_inherited cross_is_inherited
   seq transfer [inherit_magic]
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "open up @jcross chain @lreaction" c4
            magic_is_inherited cross_is_inherited
   seq openup [inherit_magic]
   seq wvchreact_1 [inherit_cross]
   seq wvchreact_2 []
   seq turnstar1_endstrade []
   seq finishwitharmturn []

call "reactivate" c3
            cross_is_inherited
   seq chreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "scoot@C reactivate" c3
            cross_is_inherited yoyo_is_inherited
   seq fudgyboxyscootback [inherit_yoyo]
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "scatter scoot@C reactivate" c3
            cross_is_inherited yoyo_is_inherited
   seq fudgyscatscoot [inherit_yoyo]
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "scoot chain thru@C reactivate" c3
            cross_is_inherited yoyo_is_inherited
   seq fudgyscootchainthru [inherit_yoyo]
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "scatter scoot chain thru@C reactivate" c3
            cross_is_inherited yoyo_is_inherited
   seq fudgyscatscootchainthru [inherit_yoyo]
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@v@C reactivate" c3
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq boxyscootback []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@v and scatter@C reactivate" c4
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq fudgyscatscoot []    /* Note that we refuse to pass "yoyo". */
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@v chain thru@C reactivate" c4
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "@v chain thru and scatter@C reactivate" c4
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scatscootchainthru []
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "trans@j cross re@lactivate" c4
            magic_is_inherited cross_is_inherited
   seq transfer [inherit_magic]
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "open up@C reactivate" c4
            magic_is_inherited cross_is_inherited
   seq openup [inherit_magic]
   seq wvchreact_1 [inherit_cross]
   seq spindlefudge []
   seq reactivate2 []

call "nuclear reaction" c3
            cross_is_inherited
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "scoot@C nuclear reaction" c3x
            cross_is_inherited yoyo_is_inherited
   seq fudgyboxyscootback [inherit_yoyo]
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "scatter scoot@C nuclear reaction" c3x
            cross_is_inherited yoyo_is_inherited
   seq fudgyscatscoot [inherit_yoyo]
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "scoot chain thru@C nuclear reaction" c3x
            cross_is_inherited yoyo_is_inherited
   seq fudgyscootchainthru [inherit_yoyo]
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "scatter scoot chain thru@C nuclear reaction" c3x
            cross_is_inherited yoyo_is_inherited
   seq fudgyscatscootchainthru [inherit_yoyo]
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@v@C nuclear reaction" c3x
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq boxyscootback []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@v and scatter@C nuclear reaction" c4
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq fudgyscatscoot []    /* Note that we refuse to pass "yoyo". */
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@v chain thru@C nuclear reaction" c3x
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scootchainthru []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "@v chain thru and scatter@C nuclear reaction" c4
            left_means_mirror cross_is_inherited first_part_visible
   seq tagnullcall0 [inherit_left]
   seq scatscootchainthru []
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "trans@C nuclear reaction" c4a
            magic_is_inherited cross_is_inherited
   seq transfer [inherit_magic]
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "open up@C nuclear reaction" c4
            magic_is_inherited cross_is_inherited
   seq openup [inherit_magic]
   seq backemup []
   seq makepass_1 [inherit_cross]
   seq nuclear_nucleus []
   seq ctr_rot []

call "first @2choice@3" c4a
   seq first_nothing []
   seq first_part_2 []

call "_first nothing" dontshow tag first_nothing
   setup 2x4 bone restriction wave_only
      array [CM1S AM5S CM4S AM0S ZM2N ZM3N ZM7N ZM6N]

call "_first part 2" dontshow tag first_part_2
   conc lock_the_hinge [or_anycall] nullcall [suppress_elongation_warnings]

call "lock the hinge" c3a tag lock_the_hinge
            cross_is_inherited visible_fractions
                  /* We must not allow modifications, even forced ones, on this
                     part, because this is invoked under locker's choice, which
                     also has a modifiable lockit.  We can't allow the same base
                     call to be modified in two different places in the definition
                     of a compound call.  In any case, it doesn't make much sense
                     to say "lock the hinge, but replace the lockit with a ... " */
   seq lockit [inherit_cross]
   seq hinge []

call "hinge the@C lock" c3a tag hinge_the_lock
            cross_is_inherited visible_fractions
   seq hinge []
   seq lockit [inherit_cross]

call "@0 the@C lock" c3a
            cross_is_inherited visible_fractions dont_use_in_resolve
   seq nullcall [mandatory_anycall]
   seq lockit [inherit_cross]

call "hinge the top" c3a
            visible_fractions
   seq hinge []
   seq fanthetop []

call "lock 'em up" c3x
   seq lockit []
   seq hinge []
   seq finlockemup []

call "_finish lock em up" dontshow tag finlockemup
   conc hinge_the_lock [] coupleup [conc_force_otherway]

call "@2split @3the difference" c4a
            visible_fractions funny_is_inherited
   seq box_circ [or_anycall inherit_funny]
   seq cast_off_34 []
   seq slip [allow_forced_mod]
   seq cast_off_34 []

call "the difference" c4a
            visible_fractions
   seq cast_off_34 []
   seq slip [allow_forced_mod]
   seq cast_off_34 []

call "contour the line" c4
            visible_fractions
   seq hinge []
   seq box_circ []
   seq box_circ []
   seq hinge []

call "_hinge/half circ" dontshow tag hinge_and_half_circ
   seq hinge []
   seq half_circ []

call "_half circ/hinge" dontshow tag half_circ_and_hinge
   seq circulate [force_half]
   seq hinge []

call "_finish right on" dontshow tag finish_right_on
   setup 1x2 1x2 rotate
      array [R1W L1W]

call "_explode the top part 2" dontshow tag plodetop2
            left_means_mirror
   setup 2x4 qtag rotate
      array [0 0 0 0 A0E C1E CCA7S C6N]   /* This stability stuff is highly questionable! */

call "_explode the top part 4" dontshow tag plodetop4
   setup qtag 2x4 rotate
      array [0 0 A0S C1S 0 0 C7N A6N]
   setup pqtag 2x4 rotate
      array [C4W C2E 0 0 A1E A7W 0 0]

call "explode the top" c3a
            left_means_mirror first_part_visible
   seq explode []
   seq plodetop2 [inherit_left]
   seq diamondcirc []
   seq plodetop4 []

call "explode the top, turn the star 1 less than usual" c3a
            left_means_mirror first_part_visible
   seq explode []
   seq plodetop2 [inherit_left]
   seq plodetop4 []

call "explode the top, turn the star @9 more than usual" c3a
            left_means_mirror neednumber first_part_visible
   seq explode []
   seq plodetop2 [inherit_left]
   seq diamondcirc []
   seq diamondcirc [repeat_n]
   seq plodetop4 []

call "_centers bits and pieces part 1" dontshow tag c_bits_pieces1
   setup 2x2 1x4 qualifier wave_only
      array [AL0S CR2S AL1S CR3S]
   setup 2x2 1x4 qualifier in_or_out
      array [CR1S CR2S AL1S CR2S]

call "_centers bits and pieces" dontshow tag c_bits_pieces
            visible_fractions
   seq c_bits_pieces1 []
   seq ahso []

call "_two o circs" dontshow tag two_o_circs
   /* For magic hocus-pocus.  Unfortunately, the sleazy way we do this
      does not allow us to specify roll information reliably, so we have
      taken it out.  Someday, of course, we will code hocus pocus correctly.
      So little time; so much to do. */
            parallel_conc_end
   simple_funny
   setup 2x2 2x2
      array [C1S A0S Z1N Z0N]
            alternate_definition [magic] c3
   /* This is cross back. */
   simple_funny
   setup 2x2 2x2 restriction wave_only
      array [C0S A1S Z0N Z1N]

call "_two o circs and trade" dontshow tag two_o_circs_and_trade
            visible_fractions yoyo_is_inherited
   seq two_o_circs []
   seq trade [inherit_yoyo]

call "bits and pieces" c4a
            visible_fractions yoyo_is_inherited
   /* Inheriting yoyo to the centers will make it fail, of course.  This is
      only legal if the yoyo modifier is given just to the outsides. */
   /* We no longer put "conc_demand_lines" on the outsides part.  This allows
      reverse order to work.  The trade part will complain anyway if the elongation
      isn't right. */
   conc c_bits_pieces [inherit_yoyo] two_o_circs_and_trade [inherit_yoyo endscando]

call "_fascinate part 1" dontshow tag fascinate1
   conc nat34thru [] box_circ_15 [conc_demand_lines]

call "_finish fascinat@pe@q@ning@o@t" dontshow tag fascinate2
   conc diamond_ends_isolate [] 2facedwheelanddeal [or_secondary_call conc_concentric_rules suppress_elongation_warnings]

call "_finish fascinating @0" dontshow tag fascinating2
   conc diamond_ends_isolate [] nullcall [mandatory_anycall conc_concentric_rules suppress_elongation_warnings]

call "fascinat@pe@q@ning@o@t" c2
   seq fascinate1 []
   seq fascinate2 []

call "fascinating @0" c2
   seq fascinate1 []
   seq fascinating2 []

call "_fan the gate part 1" dontshow tag fanthegate1
   conc nat34_34 [] box_circ_15 [conc_demand_lines]

call "_finish fan the gat@pe@q@ning@o@t" dontshow tag fanthegate2
   conc nullcall [] bendtheline [or_secondary_call conc_force_spots]

call "fan the gat@pe@q@ning@o@t" c4a
   seq fanthegate1 []
   seq fanthegate2 []

call "_do yellow brick stuff" dontshow tag do_yellow_brick
   setup 2x4 3x1dmd rotate restriction forbidden wave_only
      array [M2N M3E M7E M2S M5S L0S R0N M5N]

call "follow the yellow brick@ning@o@r road@s" c4
   seq neighbor []
   seq do_yellow_brick []
   seq fascinate2 []

call "@v the yellow brick@ning@o@r road@s" c4
            first_part_visible
   seq tagnullcall0 []
   seq neighbor []
   seq do_yellow_brick []
   seq fascinate2 []

call "snap" c4 tag snap
   seq partnertag []

call "crackle" c4 tag crackle
   conc pass_ocean [] hinge []

call "pop" c4 tag pop
   seq explodeline []

call "snap, crackle, and pop" c4
            visible_fractions
   seq partnertag []
   seq crackle []
   seq explodeline []

call "single scoot and trade" c4a
   setup pmd 1x4 rotate
      preds "???"
         if dmd_ctrs_rh [CR0W CR1W 0 0]
         if always      [AL2W 0 0 AL3W]

call "_slant touch and nothing" dontshow tag slant_touch_nothing1
   setup 2x4 3x4 restriction forbidden 2fl_only
      array [Z0N Z1N Z2N Z3N Z5N Z10N Z5N Z10N]

call "_outers @2wheel and deal@3" dontshow tag slant_touch_wheel2
   in_out_triple_squash wheelanddeal [or_anycall] nullcall []

call "_outers @m" dontshow tag slant_touch_nothing2
   in_out_triple_squash wheelanddeal [mandatory_secondary_call] nullcall []

call "slant touch and @2wheel@3" c3a
   seq slant_touch_nothing1 []
   seq slant_touch_wheel2 []

call "slant touch and @m" c3a
   seq slant_touch_nothing1 []
   seq slant_touch_nothing2 []

call "_rear back from right wave" dontshow tag rwave_rear_back
   setup 1x4 2x2 qualifier right_wave
      array [ZM3N 0 0 ZM2N]

call "_maybe wheel and deal but actually @m" dontshow tag maybe_wheel
   seq wheelanddeal [mandatory_secondary_call]

call "_slant rear back and @0" dontshow tag slant_centers
   seq rwave_rear_back []
   seq nullcall [mandatory_anycall]

call "_centers rear back and @0 while ends @m" dontshow tag slant_secondary_nothing2
   in_out_triple_squash maybe_wheel [] slant_centers []

call "slant @0 and @m" c3a
   seq slant_touch_nothing1 []
   seq slant_secondary_nothing2 []

call "_centers slip" dontshow tag ctrs_slip
   /* This call, and the one following, create serious problems for
      the concentric call mechanism.  If we are doing diamond chain thru
      in, say, split phantom diamonds with only the points as real people
      (that is, we physically have columns far apart), then the outsides
      will all be phantoms when the setup is concentrified.  The concentric
      call mechanism has a hard time figuring out the result setup in such
      a case.  Special code has been added to look for the case of outsides
      being phantoms and the call being "nullcall", in which case it make
      the outsides hold the setup that the phantoms were occupying, and
      forces the "conc_force_spots" flag to be obeyed. */
   conc slip [allow_forced_mod] nullcall []

call "_centers cast 3/4" dontshow tag ctrs_cast_3_4
   /* See the previous call. */
   singleconc_together cast_off_34 [allow_forced_mod] nullcall []

call "_start sterling chain thru" dontshow tag startsterl
   setup 2x4 qtag rotate
   array [6N 1E 4E 6S 3S 1W 4W 3N]

call "@2diamond @3chain thru" a2
            intlk_is_inherited magic_is_inherited funny_is_inherited visible_fractions
   seq diamondcirc [or_anycall inherit_intlk inherit_magic inherit_funny]
   seq ctrs_slip []
   seq ctrs_cast_3_4 []

call "sterling chain thru" c3x
   seq startsterl []
   seq ctrs_slip []
   seq ctrs_cast_3_4 []

call "_double circulate" dontshow tag dblcirc
   seq circulate []
   seq circulate []

call "_start @B chain and circ in" dontshow tag startchcircin
            neednumber
   conc armturn_n4 [] dblcirc [conc_demand_lines]

call "_start 3/4 chain and circ in" dontshow tag start34chcircin
   /* It would be nice if there were an invocation modifier that would pass a number. */
   conc armturn_34 [] dblcirc [conc_demand_lines conc_force_lines]

call "@B chain and circulate in" c4
            neednumber
   seq startchcircin []
   seq ctrs_slip []
   seq ctrs_cast_3_4 []
   seq spread []

call "fan chain and circulate in" c4
            step_to_wave can_be_fan left_means_touch_or_check
   seq start34chcircin []
   seq ctrs_slip []
   seq ctrs_cast_3_4 []
   seq spread []

call "spin chain and circulate in" c4
            step_to_wave yoyo_is_inherited can_be_fan left_means_touch_or_check first_part_visible
   seq swing [inherit_yoyo]
   seq start34chcircin []
   seq ctrs_slip []
   seq ctrs_cast_3_4 []
   seq spread []

call "scoot and weave" a2
            fudge_to_q_tag
   setup 2x2 1x4 rotate restriction unusual wave_only
      array [CCCAL3N AAACR3S AL2N CR2S]
   /* I'm not sure that the use of precise stability stuff is tasteful
      for scoot and weave from a 1/4 tag, but here it is anyway. */
   setup pmd 1x4 qualifier right_wave
      array [CR0W CCCAL1E 0 0]
   setup pmd 1x4 qualifier left_wave
      array [AL0E 0 0 AAACR1W]

call "scoot and weave (by parts)" a2
            visible_fractions
   seq scootback []
   seq weave []

call "turn and weave" c3x
            step_to_wave left_means_mirror
   setup 2x2 1x4 rotate restriction forbidden wave_only
      array [L3N R3S L2N R2S]
/* ***** not right: need predicate so can do it from leftie. */
   setup pmd 1x4
      array [L3W R0W 0 0]

call "_fold to face" dontshow tag foldtoface
   setup 1x2 1x2 rotate restriction wave_only
      array [CR0E AL0E]
               alternate_definition [cross] c2
   setup 1x4 2x2 restriction wave_only
      array [CR1S CR1S AL0S AL0S]
               alternate_definition [interlocked] c3
   setup 1x4 2x2 restriction 2fl_only
      array [CR0S CR1S AL1S AL0S]

call "_ctrs ramble" dontshow tag ctrsramble
            cross_is_inherited intlk_is_inherited visible_fractions
   seq foldtoface [inherit_cross inherit_intlk]
   seq slidethru []

call "_ends ramble" dontshow tag endsramble
            cross_is_inherited visible_fractions
   seq leads_div_move_along [inherit_cross]
   seq slidethru []

call "ramble" c1 tag ramble
            fudge_to_q_tag cross_is_inherited intlk_is_inherited
   conc ctrsramble [inherit_cross inherit_intlk] endsramble [inherit_cross conc_demand_columns conc_force_otherway endscando]

call "_check ctrs cross counter" dontshow tag check_cross_counter
   setup 1x2 1x2
      array [ZM0N ZM1N]
               alternate_definition [cross] c3a
   setup 1x4 1x4 restriction forbidden wave_only
      array [CR3S CR2S AL1S AL0S]

/* We have to split this up this way so that the checking won't count as a visible fraction. */
call "_ctrs cross counter part 1" dontshow tag ctr_counter_1
            cross_is_inherited intlk_is_inherited
   seq check_cross_counter [inherit_cross]
   seq cast_off_34 [inherit_intlk]

call "_ctrs counter" dontshow tag ctrscounter
            visible_fractions cross_is_inherited intlk_is_inherited
   seq ctr_counter_1 [inherit_cross inherit_intlk]
   seq splitctrrot []

call "_ends counter" dontshow tag endscounter
/* Might actually like for this to have 3 parts. */
            left_means_mirror cross_is_inherited
   setup 2x2 2x2
      array [R0S M1N 0 0]
               alternate_definition [cross] c3a
   setup 2x2 2x2
      array [M1N R0S 0 0]

call "counter" c2 tag counter
            fudge_to_q_tag left_means_mirror cross_is_inherited intlk_is_inherited
   conc ctrscounter [inherit_cross inherit_intlk] endscounter [inherit_left inherit_cross conc_demand_columns conc_force_otherway endscando]

call "_ctrs rally" dontshow tag ctrsrally
            visible_fractions intlk_is_inherited
   seq stepnfold_c3b_intlk [inherit_intlk]
   seq peelntrail [allow_plain_mod]

call "_ends rally" dontshow tag endsrally
            left_means_mirror
   setup 2x2 1x4
      array [CR2S CR3N 0 0]

call "rally" c3a tag rally
            fudge_to_q_tag left_means_mirror intlk_is_inherited
   conc ctrsrally [inherit_intlk] endsrally [inherit_left conc_demand_columns endscando]

call "_ends little" dontshow tag endslittle
            left_means_mirror
   seq quarter_right [inherit_left]
   seq ctr_rot []

call "_ends little, face @h" dontshow tag endslittledir
   seq quarter_maybe []
   seq ctr_rot []

call "_centers finish plenty" dontshow tag cfinplenty
   setup 2x2 1x4 qualifier wave_only
      array [AL0S CR2S ZM3N ZM1N]
   setup 2x2 1x4 qualifier in_or_out
      array [AL1S CR2S ZM3N ZM0N]

call "_ends finish plenty" dontshow tag efinplenty
   seq ctr_rot []
   seq roll []

call "_finish plenty" dontshow tag finishplenty
   conc cfinplenty [] efinplenty [conc_force_otherway endscando]

call "_centers little more" dontshow tag clilmore
            intlk_is_inherited
   seq stepnfold [inherit_intlk]
   seq circulate []

call "little" c1 tag little
            fudge_to_q_tag left_means_mirror intlk_is_inherited
   conc stepnfold [inherit_intlk] endslittle [inherit_left conc_force_otherway endscando]

call "little, ends go as you are" c1 tag little_ends_as_are
            fudge_to_q_tag intlk_is_inherited
   conc stepnfold [inherit_intlk] ctr_rot [conc_demand_lines conc_force_otherway endscando]

call "little, ends face @h" c1 tag little_ends_face_dir
            fudge_to_q_tag intlk_is_inherited
   conc stepnfold [inherit_intlk] endslittledir [conc_demand_columns conc_force_otherway endscando]

call "little more" c2 tag lilmore
            fudge_to_q_tag left_means_mirror intlk_is_inherited
   conc clilmore [inherit_intlk] endslittle [inherit_left conc_force_otherway endscando]

call "little more, ends go as you are" c2 tag lilmore_ends_as_are
            fudge_to_q_tag intlk_is_inherited
   conc clilmore [inherit_intlk] ctr_rot [conc_demand_lines conc_force_otherway endscando]

call "little more, ends face @h" c2 tag lilmore_ends_face_dir
            fudge_to_q_tag intlk_is_inherited
   conc clilmore [inherit_intlk] endslittledir [conc_demand_columns conc_force_otherway endscando]

call "plenty" c1 tag plenty
            left_means_mirror intlk_is_inherited
   seq little [inherit_left inherit_intlk]
   seq turnstar2 [allow_forced_mod]
   seq finishplenty []

call "plenty, ends go as you are" c1 tag plenty_ends_as_are
            intlk_is_inherited
   seq little_ends_as_are [inherit_intlk]
   seq turnstar2 [allow_forced_mod]
   seq finishplenty []

call "plenty, ends face @h" c1 tag plenty_ends_face_dir
            intlk_is_inherited
   seq little_ends_face_dir [inherit_intlk]
   seq turnstar2 [allow_forced_mod]
   seq finishplenty []

call "@2scoot @3and little" c1
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq little [inherit_left inherit_intlk]

call "@2scoot @3and little, ends go as you are" c1
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq little_ends_as_are [inherit_intlk]

call "@2scoot @3and little, ends face @h" c1
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq little_ends_face_dir [inherit_intlk]

call "@2scoot @3and little more" c2
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq lilmore [inherit_left inherit_intlk]

call "@2scoot @3and little more, ends go as you are" c2
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq lilmore_ends_as_are [inherit_intlk]

call "@2scoot @3and little more, ends face @h" c2
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq lilmore_ends_face_dir [inherit_intlk]

call "@2scoot @3and plenty" c1
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq plenty [inherit_left inherit_intlk]

call "@2scoot @3and plenty, ends go as you are" c1
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq plenty_ends_as_are [inherit_intlk]

call "@2scoot @3and plenty, ends face @h" c1
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq plenty_ends_face_dir [inherit_intlk]

call "_start good and plenty" dontshow tag start_good_and
   conc recoil [] dblcirc [conc_demand_lines conc_force_lines]

call "good and plenty" c3x
   seq start_good_and []
   seq turnstar2 [allow_forced_mod]
   seq finishplenty []

call "@2scoot @3and@C ramble" c1
            intlk_is_inherited cross_is_inherited yoyo_is_inherited
   seq qtagscootback [or_anycall inherit_intlk inherit_yoyo]
   seq ramble [inherit_intlk inherit_cross]

call "@2scoot @3and@C counter" c2
            left_means_mirror cross_is_inherited intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq counter [inherit_left inherit_cross inherit_intlk]

call "@2scoot @3and rally" c3a
            left_means_mirror intlk_is_inherited yoyo_is_inherited
   seq rtqtagscootback [or_anycall inherit_left inherit_intlk inherit_yoyo]
   seq rally [inherit_left inherit_intlk]

call "LINES @0 THRU" c2
            dont_use_in_resolve
   conc nullcall [mandatory_anycall] circulate [conc_force_spots]

call "spin a wheel" c4
   seq hinge [cpls_unless_single]
   seq tripletrade []
   seq hinge [cpls_unless_single]

call "stack the wheel" c4a
            single_is_inherited visible_fractions
   seq hinge [cpls_unless_single]
   seq roll []

call "_3x1 couples hinge" dontshow tag 3x1cplshinge
   setup 1x4 1x4 rotate
      preds "Can't find couples of 3."
         if lines_couple   [CR0N CR1N AL0S AL1S]
         if lines_miniwave [CR0N AL3S AL0S CR3N]

call "3x1 stack the wheel" c4
            visible_fractions
   seq 3x1cplshinge []
   seq roll []

call "cross and wheel" c2 tag crossnwheel
            single_is_inherited visible_fractions
   seq hinge [cpls_unless_single]
   seq stepnfold [cpls_unless_single]

call "_cross trade and wheel part 2" dontshow tag crosstradewheel2
   setup 1x8 1x8           /* very center 2 trade */
      array [M0N M1N R6S M3N M4N M5N L2S M7N]
            alternate_definition [single] c2
   setup 1x4 1x4           /* center 2 trade */
      array [M0N R3S M2N L1S]
            alternate_definition [grand] c2
   setup 1x8 1x8           /* center 6 trade */
      array [M0N R3S R6S L1S M4N L7S L2S R5S]
            alternate_definition [grand single] c2
   setup 1x8 1x8           /* center 6 trade */
      array [M0N R3S R6S L1S M4N L7S L2S R5S]

call "_cross trade and wheel part 3" dontshow tag crosstradewheel3
   setup 1x4 2x2 qualifier miniwaves
      array [R0S M0N L1S M1N]
   setup 1x4 2x2
      array [R0S M3N L1S M2N]
            alternate_definition [single] c2
   setup 1x4 2x2 qualifier miniwaves           /* same */
      array [R0S M0N L1S M1N]
   setup 1x4 2x2
      array [R0S M3N L1S M2N]
            alternate_definition [grand] c2
   setup 1x4 2x2           /* same */
      array [R0S M0N L1S M1N]
            alternate_definition [grand single] c2
   setup 1x8 2x4           /* 6 step; 2 fold */
      array [R0S M0N M1N M1N L3S M3N M2N M2N]

call "cross trade and wheel" c2
            visible_fractions grand_is_inherited single_is_inherited
   seq hinge [cpls_unless_single]
   seq crosstradewheel2 [inherit_grand inherit_single]
   seq crosstradewheel3 [cpls_unless_single inherit_grand inherit_single]

call "hinge and trade" c4 tag hingentrade
            single_is_inherited
   seq hinge [cpls_unless_single]
   seq slip [cpls_unless_single roll_transparent]
   seq roll [cpls_unless_single]

call "_hinge & circ part 2" dontshow tag hc2
   setup 1x4 dmd rotate
      array [CR0N CR1E AL0S AL3E]

call "hinge and circulate @h" c4
            single_is_inherited
   seq hinge [cpls_unless_single]
   seq hc2 [cpls_unless_single]
   seq quarter_maybe [cpls_unless_single]

call "_stim part 2" dontshow tag stim2
   conc6_2 armturn_14 [] ctr_rot []

call "@1stimulate the column" c3
            first_part_visible
   seq colcirc [or_anycall]
   seq half_circ []
   seq stim2 []
   seq finishwithplainmod []

call "@N stimulate the column" c3
            first_part_visible
   seq circnullcall [or_anycall]
   seq half_circ []
   seq stim2 []
   seq finishwithplainmod []

call "_coordinate part 3" dontshow tag coord3
            take_right_hands
   setup spindle 2x4 rotate
      array [0 0 0 AL0S 0 0 0 CR7N]
   setup 1x8 qtag
      array [CR0E ZM6N ZM0N ZM7N AL1W ZM2N ZM1N ZM3N]
   setup pspindle 2x4 rotate
      array [ZM6W ZM0W ZM1W 0 ZM2W ZM3W ZM5W 0]
   setup 1x3dmd qtag
      array [CR0E ZM6N ZM7N 0 AL1W ZM2N ZM3N 0]
   setup p1x3dmd qtag
      array [0 0 0 ZM1N 0 0 0 ZM4N]

call "@1coordinate" plus
            magic_is_inherited first_two_parts_visible
   seq usualcolcirc [or_anycall inherit_magic]
   seq usualcolcirc [force_half inherit_magic]
   seq tripletrade []
   /* The roll_transparent stuff actually doesn't do the right thing here -- sorry. */
   seq coord3 [roll_transparent]

call "@N coordinate" c2
            first_two_parts_visible
   seq circnullcall [or_anycall]
   seq usualcolcirc [force_half]
   seq tripletrade []
   /* The roll_transparent stuff actually doesn't do the right thing here -- sorry. */
   seq coord3 [roll_transparent]

call "_cooperate 2" dontshow tag coop2
   conc6_2 invert_2_3 [allow_forced_mod] nullcall []

call "_cooperate 3" dontshow tag coop3
   conc dropin [allow_forced_mod] nullcall []

call "@1cooperate" c4
            first_two_parts_visible
   seq colcirc [or_anycall]
   seq colcirc [force_half]
   seq coop2 []
   seq coop3 []

call "@N cooperate" c4
            first_two_parts_visible
   seq circnullcall [or_anycall]
   seq colcirc [force_half]
   seq coop2 []
   seq coop3 []

call "_set your pace 2" dontshow tag pace2
   conc6_2 followthru [force_grand] nullcall []

call "_set your pace 3" dontshow tag pace3
   conc cyclewheel [] cyclewheel []

call "@2set @3your pace" c4
            first_two_parts_visible
   seq colcirc [or_anycall]
   seq colcirc [force_half]
   seq pace2 []
   seq pace3 []

call "@N set your pace" c4    /* We leave the word "set" in for stuff like
                                    "split counter set your pace". */
            first_two_parts_visible
   seq circnullcall [or_anycall]
   seq colcirc [force_half]
   seq pace2 []
   seq pace3 []

call "_percolate part 2" dontshow tag percolate2
   conc box_circ [force_half] box_circ [force_half]

call "_percolate part 3" dontshow tag percolate3
            yoyo_is_inherited
   conc nicely [] natturnthru [inherit_yoyo endscando suppress_elongation_warnings]

call "@1percolate" c1
            yoyo_is_inherited first_two_parts_visible
   seq circulate [or_anycall]
   seq circulate [force_half]
   seq percolate3 [inherit_yoyo]

call "@N percolate" c2
            yoyo_is_inherited first_two_parts_visible
   seq circnullcall [or_anycall]
   seq circulate [force_half]
   seq percolate3 [inherit_yoyo]

call "finish percolate" c2
            yoyo_is_inherited first_part_visible
   /* People do "central percolate"-types of things, so we have to recognize
      that the circulate is concentric, at the cost of not being able to do
      other things that might also be interesting. */
   seq percolate2 []
   seq percolate3 [inherit_yoyo]

call "turn up" dontshow tag hinge_circ_trade
            visible_fractions
   seq hinge []
   seq circulate []
   seq trade []

call "_finish perk up" dontshow tag finperk
   conc hinge_circ_trade [] dblcirc []

call "@1perk up" c2
            first_part_visible
   seq circulate [or_anycall]
   seq halfboxcirc_miniwaves []
   seq finperk []

call "@N perk up" c2
            first_part_visible
   seq circnullcall [or_anycall]
   seq halfboxcirc_miniwaves []
   seq finperk []

call "_finish cover up" dontshow tag fincover
   conc recycle [allow_plain_mod] about [suppress_elongation_warnings]

call "@1cover up" c4a
            visible_fractions
   seq circulate [or_anycall]
   seq circulate [force_half]
   seq fincover []

call "@N cover up" c4a
            visible_fractions
   seq circnullcall [or_anycall]
   seq circulate [force_half]
   seq fincover []

call "choice" c3x tag choice
            visible_fractions dont_use_in_resolve
   conc lock_the_hinge [allow_forced_mod] tradestpnfld [allow_forced_mod suppress_elongation_warnings]

call "@2lock@3er's choice" c3a
            cross_is_inherited
   seq lockit [inherit_cross or_anycall]
   seq choice []

call "cy-kick" c4a
      /* ***** make sure we do a "fudge to 3/4 tag" */
            cross_is_inherited
   conc 23recycle [inherit_cross] beaukick [endscando]

call "_ends reciprocate" dontshow tag endrecip
            left_means_mirror
   seq div_move_along []
   seq touch_3_4 [inherit_left]

call "reciprocate" c4
            left_means_mirror
   conc swingslipcast3 [inherit_left] endrecip [inherit_left conc_demand_columns conc_force_columns endscando]

call "_ctrs scamper" dontshow tag ctrs_scamper
            step_to_wave
   seq armturn_14 []
   seq circulate []

call "_ends scamper" dontshow tag ends_scamper
   seq div_move_along []
   seq touch_1_4 []

call "ends divide" mainstream
      /* ***** make sure we do a "fudge to 3/4 tag" */
   conc nullcall [] div_move_along [conc_demand_columns conc_force_lines]

call "scamper" c4
      /* ***** make sure we do a "fudge to 3/4 tag" */
   conc ctrs_scamper [] ends_scamper [conc_demand_columns conc_force_columns endscando]

call "divvy up" c3x
      /* ***** make sure we do a "fudge to 3/4 tag" */
   conc single_wheel [] div_move_along [conc_demand_columns conc_force_lines]

call "_centers lead the way" dontshow tag clead_way
            visible_fractions
   seq peeloff []
   seq bendtheline []

call "_ends lead the way" dontshow tag elead_way
            visible_fractions
   seq trade []
   seq roll []

call "lead the way" c4
            visible_fractions
   conc clead_way [] elead_way [conc_demand_columns endscando]

call "6X2 acey deucey" a1
            fudge_to_q_tag
            magic_is_inherited funny_is_inherited
   conc2_6 trade [or_anycall] circulate [inherit_magic inherit_funny]

call "3X2 acey deucey" c1
            fudge_to_q_tag
            funny_is_inherited
   conc2_6 trade [] trngle_circ [or_anycall inherit_funny]

call "kick the habit" c4a
   conc leadkick [] ctr_rot [conc_force_otherway allow_forced_mod]

call "_shuttle @h part 2" dontshow tag shuttle2d
   singleconc_together slidethru [] quarter_maybe []

call "_shuttle @0 part 2" dontshow tag shuttle2c
   singleconc_together slidethru [] nullcall [mandatory_anycall]

call "shuttle @h" c3x
            visible_fractions
   seq passthru []
   seq shuttle2d []

call "shuttle @0" c3x
            visible_fractions
   seq passthru []
   seq shuttle2c []

call "_tag and spin @h part 2" dontshow tag tagnspin2d
   singleconc_together armturn_34 [] quarter_maybe []

call "_tag and spin @m part 2" dontshow tag tagnspin2c
   singleconc_together armturn_34 [] nullcall [mandatory_secondary_call]

call "@v and spin @h" c4
            left_means_mirror first_part_visible
   /* We pass "left" only to the tag, so we can say "left vertical tag
      and spin right".  The direction part is invariant. */
   seq tagnullcall0 [inherit_left]
   seq extend []
   seq tagnspin2d []

call "@v and spin @m" c4
            left_means_mirror first_part_visible
   /* We pass "left" only to the tag, so we can say "left vertical tag
      and spin right".  The direction part is invariant. */
   seq tagnullcall0 [inherit_left]
   seq extend []
   seq tagnspin2c []

call "turnstyle" c3
            left_means_mirror
   singleconc_together touch_3_4 [inherit_left] quarter_right [inherit_left conc_force_spots]

call "relocate the diamonds" c2
            funny_is_inherited
   /* No, we don't check whether they are in fact in diamonds.  People
      similarly abuse terminology in other calls, e.g. "dixie style to
      a wave" that ends in a column. */
   conc2_6 armturn_34 [] ctr_rot [inherit_funny]

call "relocate" c3a
            funny_is_inherited
   conc2_6 armturn_34 [] ctr_rot [inherit_funny]

call "_tally ho part 2" dontshow tag tally_ho_part_2
   conc hinge_and_half_circ [] trade []

call "tally ho" c1
            first_part_visible
   seq half_circ []
   seq tally_ho_part_2 []
   seq finishwithmod []

call "_touchngo part 2" dontshow tag touchngo2
            neednumber
   conc6_2 armturn_n4 [] armturn_14 []

call "_touchngo anything part 2" dontshow tag touchngo2c
   conc6_2 armturn_14 [mandatory_anycall] armturn_14 []

call "_touchngo part 3" dontshow tag touchngo3
            neednumber
   conc_diamond_line armturn_n4 [] spec_drop_in [suppress_elongation_warnings]

call "_touchngo anything part 3" dontshow tag touchngo3c
   conc_diamond_line armturn_34 [mandatory_secondary_call] spec_drop_in [suppress_elongation_warnings]

call "touch and go @b X @b" c4
            need_two_numbers
   seq half_circ []
   seq touchngo2 []
   seq touchngo3 [shift_one_number]

call "touch and go @b X @m" c4
            neednumber
   seq half_circ []
   seq touchngo2 []
   seq touchngo3c []

call "touch and go @0 X @m" c4
   seq half_circ []
   seq touchngo2c []
   seq touchngo3c []

call "_leftable 1/2 swap" dontshow tag half_swap
            left_means_mirror
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 ZM1W CR2N]
            alternate_definition [cross] c3a
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 ZM3W CR2N]

call "_leftable 1/2 reverse swap" dontshow tag half_rev_swap
            left_means_mirror
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 AL2S ZM3W]
            alternate_definition [cross] c3a
   setup 2x2 dmd rotate restriction not_tboned
      array [0 0 AL2S ZM1W]

call "_start action" dontshow tag startaction
            left_means_mirror
   conc half_rev_swap [inherit_left] hinge [inherit_left conc_demand_columns]

call "the action" c4
            left_means_mirror
   seq startaction [inherit_left]
   seq turnstar1_endstrade []
   seq finishwithmod []

call "barge the action" c4
            first_part_visible split_like_square_thru left_means_mirror
   seq square_thru_2 []
   seq startaction [inherit_left]
   seq turnstar1_endstrade []
   seq finishwithmod []

call "spin the windmill, outsides as you are" dontshow tag swapwindmill4
   conc swingslipcast3 [] dblcirc [conc_demand_lines conc_force_lines]

call "_fudge to parallel diamonds" dontshow tag fudge_to_parallel_diamonds
   setup qtag qtag
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup pqtag qtag
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup ptpd qtag
      array [ZM6N ZM0N ZM7N ZM5N ZM2N ZM4N ZM3N ZM1N]
   setup pptpd qtag
      array [ZM6N ZM0N ZM7N ZM5N ZM2N ZM4N ZM3N ZM1N]

call "swap the windmill" c4
            reverse_means_mirror cross_is_inherited
   /* Note that, like circle by, we magically turn "reverse" into "left". */
   seq half_swap [inherit_left inherit_cross]
   seq fudge_to_parallel_diamonds []
   seq swapwindmill4 []

call "_start breaker" dontshow tag startbreaker
   setup 4x2 normal_concentric rotate
            concendsetup dmd 1x4 0
      preds "Can't tell how to cast off 3/4."
         if columns_couple   [4W 0  0  7W 6E 0  0  5E]
         if columns_miniwave [4W 1N 2E 7W 7E 0E 1S 4E]
         if always           [4W 1N 2E 7W 0  0E 1S 0 ]

call "_finish it with forced modify" dontshow tag finishforcemod
   conc_diamond_line nullcall [mandatory_anycall] spec_drop_in [suppress_elongation_warnings]

call "breaker @0" c3a
   seq startbreaker []
   seq finishforcemod []

call "_finish it with cast @9" dontshow tag finish_with_cast_n
            neednumber
   conc_diamond_line cast_off_n4 [] spec_drop_in [suppress_elongation_warnings]

call "breaker @9" c3a
            neednumber
   seq startbreaker []
   seq finish_with_cast_n []

call "_start linear action, ctrs" dontshow tag startlinctr
            left_means_mirror
   seq hinge [inherit_left]
   seq box_circ_15 []

call "_start linear action" dontshow tag startlinact
            left_means_mirror
   conc startlinctr [inherit_left] hinge_then_trade [inherit_left]

call "linear action" c1
            left_means_mirror
   seq startlinact [inherit_left]
   seq finishwithmod []

call "_linear action crossing part" dontshow tag cross_the_lin_act
   conc_diamond_line slither [] nullcall []

call "linear action but cross it" c4a
            left_means_mirror
   seq startlinact [inherit_left]
   seq cross_the_lin_act []
   seq finishwithmod []

/* This one allows syntactically easy modify, for "tally ho but flip back" and "breaker flip back". */

call "_finish it with modify" dontshow tag finishwithmod
            12_matrix_is_inherited
   conc_diamond_line cast_off_34 [or_anycall] spec_drop_in [inherit_12_matrix suppress_elongation_warnings]

/* This one allows plain modify, for "tally ho but flip back" and "breaker flip back". */

call "_finish it with plain modify" dontshow tag finishwithplainmod
            12_matrix_is_inherited
   conc_diamond_line cast_off_34_with_warn [allow_plain_mod] spec_drop_in [inherit_12_matrix suppress_elongation_warnings]

/* This one allows difficult modify, for "chain reaction, replace cast off 3/4 with flip back". */

call "_finish it" dontshow tag finish
            12_matrix_is_inherited 16_matrix_is_inherited
   conc_diamond_line cast_off_34 [allow_forced_mod] spec_drop_in [inherit_12_matrix inherit_16_matrix conc_force_otherway suppress_elongation_warnings]

/* This one forbids modify, for relay the top and motivate.  There are two instances of cast off 3/4 in those calls.
   It also assumes an arm turn if the cast is ambiguous.  It prints a warning in this case.
   We assume that's what people want for things like relay the top.  Note that, if it weren't for this,
   the cast would be impossible for "split phantom waves relay the top" from parallel waves. */

call "_finish it, no modify" dontshow tag finishnomod
            12_matrix_is_inherited 16_matrix_is_inherited
   conc_diamond_line cast_off_34_with_warn [] spec_drop_in [inherit_12_matrix inherit_16_matrix conc_force_otherway suppress_elongation_warnings]

/* This one always uses an arm turn instead of a cast off 3/4, for "scoot reaction" stuff. */

call "_finish it, use armturn" dontshow tag finishwitharmturn
            12_matrix_is_inherited 16_matrix_is_inherited
   conc_diamond_line armturn_34 [] spec_drop_in [inherit_12_matrix inherit_16_matrix conc_force_otherway suppress_elongation_warnings]

call "good show" c3
   setup 2x4 2x4
      array [ZM1N AL0S CR3S ZM2N ZM3N CR2S AL1S ZM0N]
   setup 4x2 2x4
      array [ZM1N CR6S CR3S ZM4N ZM3N AL4S AL1S ZM6N]
            alternate_definition [magic] c3x
   setup 4x2 2x4
      array [6N 6S 4S 4N 3N 3S 1S 1N]
            alternate_definition [3x3 12matrix] c4
   setup 3x4 2x6
      array [ZM2N AL0S CR5S ZM3N ZM4N CR4S ZM5N CR3S AL2S ZM0N ZM1N AL1S]
            alternate_definition [4x4 16matrix] c4
   setup 4x4 2x8
      array [ZM4N ZM5N ZM6N CR6S ZM7N CR4S AL3S CR5S ZM0N ZM1N ZM2N AL2S ZM3N AL0S CR7S AL1S]

call "INVERT good show" c4
   simple_funny
   setup 2x4 2x4
      array [CR1S ZM0N ZM3N AL2S AL3S ZM2N ZM1N CR0S]
   setup 4x2 2x4
      array [CR1S ZM6N ZM3N CR4S AL3S ZM4N ZM1N AL6S]

call "INVERT kick the habit" c4
   conc ctr_rot [] leadkick [conc_force_spots]

call "snag circulate" c4a
   conc half_circ [] circulate []

call "turn on" c4
            visible_fractions 3x3_is_inherited 4x4_is_inherited
   seq splitctrrot [inherit_3x3 inherit_4x4]
   seq extend [inherit_3x3 inherit_4x4]    /* 3x3 and 4x4 are presumably illegal here, so this must be "random 3x3". */

call "tickle" c3x
            visible_fractions
   seq hinge []
   seq splitctrrot []



/* Danger!  This is being worked on.  Hard hat area. */
/* It has the unfortunate property the, from a trade by, only
     "walk the clover, for central" is legal, not plain "walk the clover". */

call "_maybe extend for walk the clover" dontshow tag maybe_extend
   setup 2x4 qtag qualifier wave_only
      array [ZM0N ZM0N ZM1N ZM1N ZM2N ZM3N ZM7N ZM6N]
   setup 2x4 2x4
      array [ZM0N ZM1N ZM2N ZM3N ZM4N ZM5N ZM6N ZM7N]
   setup 4x2 2x4
      array [ZM0N ZM0N ZM1N ZM1N ZM2N ZM3N ZM7N ZM6N]

call "_central walk the clover" dontshow tag cwalkclv
            visible_fractions step_to_wave left_means_mirror
   seq armturn_14 []
   seq walkndodge []

call "walk the@C clover" c4
            left_means_mirror cross_is_inherited
   seq maybe_extend []
   seq walk_clover_for_central [inherit_left inherit_cross]

call "walk the@C clover, for central" c4 tag walk_clover_for_central
            left_means_mirror cross_is_inherited
   conc cwalkclv [inherit_left] clover [inherit_cross conc_demand_columns conc_force_columns]

