@c install.txinfo Time-stamp: <93/12/03 12:45:23 gildea> -*-texinfo-*-
@c Included by sd_doc, also used to produce INSTALL.
@ifclear full-manual
This file is automatically generated from install.txinfo.  Do not edit.
@end ifclear
@c This must be a "@node Installation ... "
@chapter Building and Installing

To compile Sd, you need a C compiler that

@itemize
@item can handle full ANSI C, and
@item has 32-bit @code{int}s.
@end itemize

@code{mkcalls} must be run once to compile @file{sd_calls.txt}, the
calls database, into @file{sd_calls.dat}, the binary file used by Sd.
This program is not used on the Macintosh; the Macintosh version of
@code{sd} performs compilation.

The program is known to operate on the following configurations:
@display
   SunOS 4.1.3, gcc 2.4.5, X11 Release 5 with public patches 1-26,
      the twm window manager, on Sun 4 (Sparc)
   Domain/OS 10.4, C compiler 6.9, Dialog 2.0, on Apollo M68K
   OSF/1.0.A, C compiler 1.0, X11 Release 4, on HP series 700
   HP-UX 8.07, C compiler 8.71, X11 Release 4, on HP series 700
   HP-UX 9.0, C compiler 9.15, X11 Release 5, on HP series 700
   IRIX 5.0 on SGI Indigo
@end display

@menu
* Building on Unix::		Building on Unix
* Building on the Mac::		Building on the Mac with Think C
* Building on DOS::		Building on DOS with gcc
* Document Formatting::		How to format the documentation
* Manifest::			List of files in the distribution
@end menu

@node  Building on Unix, Building on the Mac,  , Installation
@section Building on Unix

To compile and link Sd, you need an ANSI C compiler (@code{gcc} qualifies)
and the Athena Widgets from X11 Release 4 or later.

If your X system was compiled with an ANSI C compiler, you can run
@code{xmkmf}, which will use @file{Imakefile} and your local X configuration
information to generate a @file{Makefile}:

@example
xmkmf
make
@end example

If that doesn't work, typically because
your X system was @emph{not} compiled with an ANSI C compiler, run
@code{./configure}, which will use @file{Makefile.in} to create a
@file{Makefile} by
examining your system and trying to figure out what options to use:

@example
./configure
make
@end example

Using @code{configure} is not as reliable as using @code{xmkmf}
because @code{configure}
has to guess the local preferences, whereas @code{xmkmf} reads a local
configuration file, which is usually, but not always, reliable.

Once you have a @file{Makefile}, type @code{make} to build sd.
If you are not running X, @code{make} will build sdtty, the
character-oriented version of the program.

@code{mkcalls} must be run once to compile @file{sd_calls.txt},
the calls database,
into @file{sd_calls.dat}, the binary file used by Sd.  This step is done
automatically by @code{make}.

Sun's OpenWindows 3.0 has a buggy @code{xmkmf}, so you cannot use it.  Instead,
set the environment variable @code{OPENWINHOME} appropriately
(typically to @file{/usr/openwin}), then type

@c I'm not sure which version of OpenWindows has this bug, but the
@c current one (3.3) does not.  I guessed 3.0, but perhaps
@c someone can check this?

@example
imake -I$OPENWINHOME/lib/config
@end example

IBM's AIX 3.2 has a buggy C optimizer.  If you find that some calls are
missing from the call menus, compile @file{sdinit.c} without optimization.


@node Building on the Mac, Building on DOS, Building on Unix, Installation
@section Building on the Mac with Think C

To compile this program with Think C, you need to have a project file
and a resource file.  These files are distributed in BinHex 4.0 format
(@file{MacSd.p.Hqx}, @file{Macwdef.p.Hqx}, and @file{MacSd.p.rsrc.Hqx}).
Run these files through a BinHex-decoding program (e.g., BinHex 4.0, StuffIt
Expander, among others) before trying to use them.  The files produced
are (@file{MacSd.p}, @file{macwdef.p}, and @file{MacSd.p.rsrc}).

The project files included here already have the necessary options set
(e.g., 4-byte integers, STDC defined, Far Data option) and contain
references to all the necessary source files.  You may wish to change
the processor selected on the Compiler Settings page of the Options menu
if you have a 68020 or 68030 processor.  If you do not plan to change
the window definition resource for the utility windows, you will not
need to use @file{Macwdef.p.Hqx}.

You will need to create a 4-byte-integer version of your ANSI library
if you do not already have one.  The ANSI library file is located in
the C Libraries Folder in the Think C Folder.  Make a second copy of
your ANSI library file, and name it @file{ANSI 4 byte}.  Open the new
ANSI file as a Project File in Think C, select 4-byte integers (from
the Compiler Settings page), and recompile it (use @code{Bring Up to
Date} from the Project Menu).

Once you have finished this, you should be able to open the Sd Project
file (@file{MacSd.p}) and compile Sd by selecting @code{Build Application}
from the Project Menu.

To update to a new release of @code{sd}, simply replace all of your old sources
with new sources, or move the old sources to a folder named, e.g.,
@file{(Old Sources)}.  (A folder name in parentheses tells Think C not to
look in this folder for sources.)  Then select @code{Make...} from the
Source Menu.  You will get a menu of @file{.c} files to check off for
recompilation.  Select @code{Check All .c}, and Think C will recompile all
of your sources.  (Unlike the Unix @code{make}
command, Think C does not rely on file modification dates by default.)
After recompiling the sources,
select @code{Build
Application} from the Project Menu, as before.

@node Building on DOS, Document Formatting, Building on the Mac, Installation
@section Building on DOS with gcc

@code{sdtty} and @code{mkcalls} run on MS-DOS using the QEMM memory
manager.  @code{sdtty} is about 2Mb.  The file @file{sdui-tpc.c}
provides an interface to the console I/O package distributed with
@code{djgpp}, a port of @code{gcc} to DOS which runs under Desqview
and Desqview/X.

@code{djgpp} is available via anonymous FTP in the directory
@file{pub/msdos/djgpp/} on host omnigate.clarkson.edu.
FTP is the Internet file transfer protocol.

The file @file{makefile.pc} is a @code{Makefile} for @code{dmake}, a
make program for DOS@.  Rename it to @file{makefile} before building on
a PC@.
It was created by the @code{configure} script (@pxref{Building on Unix})
with the command line @code{configure --with-pc}.

@node Document Formatting, Manifest, Building on DOS, Installation
@section Formatting the Documentation

The file @file{sd_doc.txinfo} is in Texinfo format, which allows both
on-line information and a printed manual to be generated from the same
source document.  You can run it through @TeX{} to produce a printed
manual, or you can format it for use with @code{Info}, a hypertext
documentation reader.

Support for Texinfo-style documentation is distributed as part of
Emacs and as a stand-alone package, both available via anonymous ftp
from prep.ai.mit.edu and other GNU software archives.

Both the Emacs and Texinfo distributions contain @file{texinfo.tex}, the
macros required to print the document with @TeX{}@.  In Emacs, use
@w{@code{M-x texinfo-format-buffer}} to convert to Info, and use
@w{@code{M-x info}} to read the document.  In the Texinfo package,
@code{makeinfo} converts to Info, and @code{info} is the reader; both
are C programs.

You can use the following @code{make} commands to format the documentation:

@table @kbd
@item make info
convert to Info format
@item make dvi
run through @TeX{}@.  Use this to make hardcopy.
@item make ps
run through @TeX{} and @file{dvips}.  Use this to make a PostScript file.
@end table

The source distribution contains @file{sd_doc.PS}, a PostScript version,
and @file{sd_doc.txt}, a plain text version of the documentation.

@node Manifest,  , Document Formatting, Installation
@section Manifest

These are the files in the source distribution:

@table @t
@item README
Introduction from the manual
@item INSTALL
building and installing (also from the manual)
@item COPYING
GNU General Public License
@item Relnotes
What's new in this release
@item oldnotes
What was new in previous releases
@item Imakefile
generates a Makefile
@item configure
an alternate way to make a Makefile
@item configure.in
configure file source
@item Makefile.in
initial Makefile source used by configure
@item Sd.res
sample X11 user resource file
@item sd_calls.txt
the calls database source
@item db_doc.txt
describes the format of the calls database
@item sd_doc.txinfo
user documentation source
@item readme.txinfo
README file source
@item install.txinfo
INSTALL file source
@item gpl.txinfo
GNU General Public License source
@item sd_doc.PS
user documentation as PostScript
@item sd_doc.txt
user documentation as plain text
@item sdmain.c
the top level program
@item sdinit.c
call menu initialization
@item sdutil.c
general utilities, mostly for handling text
@item sdbasic.c
execution routines for basic (defined by array) calls
@item sdtables.c
many tables
@item sdctable.c
concept tables
@item sdtop.c
top level call execution
@item sdconcpt.c
implementation of many concepts
@item sdpreds.c
predicates
@item sd12.c
a few miscellaneous concepts
@item sd16.c
a few miscellaneous concepts
@item sdgetout.c
resolving, reconciling, etc.
@item sdmoves.c
execution routines for general calls
@item sdtand.c
tandem and as couples concepts
@item sdconc.c
concentric and related concepts
@item sdistort.c
distorted formation concepts
@item sdsi.c
system interface for Posix systems
@item sdui-x11.c
user interface for X Window System
@item sdui-tty.c
user interface for tty version
@item sdui-ttu.c
user interface support for tty version on Unix
@item sdui-tpc.c
user interface support for tty version on PCs
@item mkcalls.c
top level driver for calls database complier
@item dbcomp.c
guts of calls database complier
@item sd.h
included by all Sd source files
@item database.h
database structure definitions
@item paths.h
defaults for file names
@item sdui-ttu.h
definitions used by tty Unix support
@item sdmatch.c
completing reader.  Used in the Mac version and in sdtty.
@item sdmatch.h
definitions for sdmatch.c
@item macalert.c
alert boxes for read/write failures (Mac version)
@item maccomp.c
compiles database (Mac version)
@item macdlog.c
dialog boxes (Mac version)
@item macevent.c
handles mouse clicks (Mac version)
@item macguts.h
header file for Macintosh-specific items
@item maclabel.c
gets sequence label (Mac version)
@item macmatch.c
displays window containing matching calls (Mac version)
@item macmenu.c
pull-down menu support (Mac version)
@item macpref.c
user preferences (Mac version)
@item macsel.c
gets selectors, quantifiers, and directions (Mac version)
@item macstart.c
start up dialog box (Mac version)
@item macstuff.c
initialization, user commands (Mac version)
@item mactext.c
window scrolling, etc (Mac version)
@item macutil.c
miscellaneous routines, mostly file I/O (Mac version)
@item macwdef.c
window definition code resource for utility windows (Mac version)
@item macwin.c
support for main window layout (Mac version)
@item macwmgr.c
window manager (Mac version)
@item sdsi-mac.c
Macintosh system interface routines
@item sdui-mac.c
Macintosh user interface routines
@item MacSd.p.Hqx
BinHex-encoded Project File for compiling on the Mac with Think C
@item MacSd.p.rsrc.Hqx
BinHex-encoded Resource File for the Mac
@item Macwdef.p.Hqx
BinHex-encoded Project File for changing the window definitions on the
Mac using @code{macwdef.c}
@item makefile.pc
makefile for use on a PC@.  Generated by @code{configure --with-pc}.
@item pcfiles.lnk
list of object files for dmake on a PC, which cannot handle long command
lines.
@end table
