# Generated automatically from Makefile.in by configure.
# Makefile for Sd (square dance caller's helper)
# Time-stamp: <96/05/05 10:50:56 gildea>

srcdir = .
# VPATH is for GNU make

# This gives the compiler name and any switches that it needs to make
# it operate the way we want (ANSI language, standards conformance,
# target hardware, etc.)
# To get gcc on Athena, "add outland" before running "configure".
CC = gcc

# This gives any "-D" switches that we always need to send to the compiler.
DEFS = 

# This gives the optimization and/or debug info.  These flags presumably
# don't affect the semantics of the language and run-time environment, so you
# might reasonably want to change them to suit your taste.
# The options shown here have been chosen to optimize the program for
# production use.  Depending on your operating system, compiler, and debugger,
# this may compromise the ability to debug the program.  In this case, you may
# need to choose different options, typically "-g", for debugging.
# Consult your system, compiler, and debugger vendor for further information.
CDEBUGFLAGS = -O2 -Wall -Wno-switch -Wno-uninitialized -Wno-char-subscripts

CFLAGS = $(DEFS) $(CDEBUGFLAGS)

# These are the "-I"  and "-D" flags that we must use for the compilation
# of the X11 user interface (sdui-x11.c).
X11_FLAGS = 

# These are the "-I"  and "-D" flags that we must use for the compilation
# of the system-dependent part of the TTY user interface (sdui-ttu.c).
TTY_FLAGS = 

# These are the library flags that we must use for the final bind of
# the X11 version of "sd".
X11_LIBS = 

# These are the library flags that we must use for the final bind of
# "sdtty".
TTY_LIBS = -lpc

SD_OBJS = sdmain.o sdutil.o sdbasic.o sdinit.o \
          sdtables.o sdctable.o sdtop.o sdconcpt.o sdpreds.o \
          sdgetout.o sdmoves.o sdtand.o sdconc.o sdistort.o \
          sdpick.o sdsi.o

SDX11_OBJ = sdui-x11.o

# This has all special source files for sdtty,
# for making the distribution and running lint.
SDTTY_OBJ_UNIX = sdui-tty.o sdmatch.o sdui-ttu.o
SDTTY_OBJ_PC   = sdui-tty.o sdmatch.o sdui-tpc.o
# This has the special object files used for building this version of sdtty.
SDTTY_OBJ = $(SDTTY_OBJ_PC)

SDTTY_OBJS = @pcfiles.lst

MKCALLS_SRCS = mkcalls.c dbcomp.c
MKCALLS_OBJS = mkcalls.o dbcomp.o

all: alltty
allx11: sd sd_calls.dat
alltty: sdtty.exe sd_calls.dat
everything: allx11 alltty

LDPRELIBS = 
LDPOSTLIBS = lib\crt0.o lib\libc.a

sd: $(SD_OBJS) $(SDX11_OBJ)
	$(CC) $(CFLAGS) -o $@ $(SD_OBJS) $(SDX11_OBJ) $(LDPRELIBS) $(X11_LIBS) $(LDPOSTLIBS)

mkcalls.exe: $(MKCALLS_OBJS)
	$(CC) $(CFLAGS) -o mkcalls.bin $(MKCALLS_OBJS)
	strip mkcalls.bin
	coff2exe mkcalls.bin

# The coff2exe program is for djgpp on DOS

sdtty.exe: $(SD_OBJS) $(SDTTY_OBJ)
	$(CC) $(CFLAGS) -o sdtty.bin $(SDTTY_OBJS) $(TTY_LIBS)
	strip sdtty.bin
	coff2exe sdtty.bin

sd_calls.dat: sd_calls.txt mkcalls.exe
	./mkcalls $(srcdir)/sd_calls.txt

.c.o:
	$(CC) $(CFLAGS) -c $<

.cpp.o:
	$(CC) $(CFLAGS) -c $<

# sdui-x11.c may need -D_POSIX_SOURCE with gcc 1.40 on Ultrix 4.2

sdui-x11.o: sdui-x11.c
	$(CC) $(CFLAGS) $(X11_FLAGS) -c $(srcdir)/$*.c

sdui-ttu.o: sdui-ttu.cpp
	$(CC) $(CFLAGS) $(TTY_FLAGS) -c $(srcdir)/$*.cpp

sdui-tty.o sdui-ttu.o sdui-tpc.o: sd.h

dbcomp.o sdmain.o sdsi.o sdui-x11.o: paths.h

dbcomp.o: database.h

$(SD_OBJS) $(SDX11_OBJ) $(SDTTY_OBJ): sd.h database.h


RM = del

docclean:
	-$(RM) *.aux *.log *.toc *.dvi
	-$(RM) *.cp *.cps *.fn *.fns *.ky *.kys *.pg *.pgs *.tp *.tps *.vr *.vrs

clean:: docclean
clean::
	-$(RM) *.o sd sdtty.exe mkcalls.exe sd_calls.dat
	-$(RM) lint.out

distclean: clean
	-$(RM) sequence.*
	-$(RM) *~ core
	-$(RM) *.tar *.tar.Z

realclean: distclean
	-$(RM) *.info *.PS *.html sd_doc.txt sd_doc.ps
