The setups that the program recognizes are as follows
(from database.h, enumeration type "setup_kind"), each is
shown with a map giving the person numbering:

             _____
            |     |
1x1         |  0  |                    (4 way symmetry)
            |_____|


             _____ _____
            |     |     |
1x2         |  0  |  1  |
            |_____|_____|


             _____ _____ _____
            |     |     |     |
1x3         |  0  |  1  |  2  |
            |_____|_____|_____|


             _____ _____ _____ _____
            |     |     |     |     |
1x4         |  0  |  1  |  3  |  2  |
            |_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |
1x6         |  0  |  1  |  2  |  5  |  4  |  3  |
            |_____|_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |     |     |
1x8         |  0  |  1  |  3  |  2  |  6  |  7  |  5  |  4  |
            |_____|_____|_____|_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____ _____ ___________ _____
            |     |     |     |     |     |     |     |     |     |     |
1x10        |  0  |  1  |  2  |  3  |  4  |  9  |  8  |  7  |  6  |  5  |
            |_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____ _____ ___________ _____ _____ _____
            |     |     |     |     |     |     |     |     |     |     |     |     |
1x12        |  0  |  1  |  2  |  3  |  4  |  5  | 11  | 10  |  9  |  8  |  7  |  6  |
            |_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____ _____ ___________ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
1x14        |  0  |  1  |  2  |  3  |  4  |  5  |  6  | 13  | 12  | 11  | 10  |  9  |  8  |  7  |
            |_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____ _____ ___________ _____ _____ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |     |
1x16        |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  | 15  | 14  | 13  | 12  | 11  | 10  |  9  |  8  |
            |_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|_____|


             _____ _____
            |     |     |
            |  0  |  1  |
2x2         |_____|_____|              (4 way symmetry)
            |     |     |
            |  3  |  2  |
            |_____|_____|


             _____ _____ _____
            |     |     |     |
            |  0  |  1  |  2  |
2x3         |_____|_____|_____|
            |     |     |     |
            |  5  |  4  |  3  |
            |_____|_____|_____|


             _____ _____ _____ _____
            |     |     |     |     |
            |  0  |  1  |  2  |  3  |
2x4         |_____|_____|_____|_____|
            |     |     |     |     |
            |  7  |  6  |  5  |  4  |
            |_____|_____|_____|_____|


             _____ _____ _____ _____ _____
            |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |
2x5         |_____|_____|_____|_____|_____|
            |     |     |     |     |     |
            |  9  |  8  |  7  |  6  |  5  |
            |_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |  5  |
2x6         |_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |
            | 11  | 10  |  9  |  8  |  7  |  6  |
            |_____|_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
2x8         |_____|_____|_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |     |     |
            | 15  | 14  | 13  | 12  | 11  | 10  |  9  |  8  |
            |_____|_____|_____|_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |  5  |
            |_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |
3x6         | 15  | 16  | 17  |  8  |  7  |  6  |
            |_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |
            | 14  | 13  | 12  | 11  | 10  |  9  |
            |_____|_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |  5  |  6  |  7  |
            |_____|_____|_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |     |     |
3x8         | 20  | 21  | 22  | 23  | 11  | 10  |  9  |  8  |
            |_____|_____|_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |     |     |
            | 19  | 18  | 17  | 16  | 15  | 14  | 13  | 12  |
            |_____|_____|_____|_____|_____|_____|_____|_____|


                   _____
             _____|     |_____
            |     |  1  |     |
dmd         |  0  |_____|  2  |
            |_____|     |_____|
                  |  3  |
                  |_____|


                   _____
                  |     |
                  |  1  |
             _____|     |_____
            |      \   /      |
star        |  0           2  |        (4 way symmetry)
            |_____ /   \ _____|
                  |     |
                  |  3  |
                  |_____|


             _____             _____
            |     |_____ _____|     |
            |  0  |     |     |  1  |
bone6       |_____|  5  |  2  |_____|
            |     |_____|_____|     |
            |  4  |           |  3  |
            |_____|           |_____|


                _____
               |     |
               |  1  |
             __|__ __|__
            |     |     |
            |  0  |  2  |
short6      |_____|_____|
            |     |     |
            |  5  |  3  |
            |_____|_____|
               |     |
               |  4  |
               |_____|


                   _____ _____
                  |     |     |
                  |  0  |  1  |
             _____|_____|_____|_____
            |     |     |     |     |
qtag        |  6  |  7  |  3  |  2  |
            |_____|_____|_____|_____|
                  |     |     |
                  |  5  |  4  |
                  |_____|_____|

             _____                         _____
            |     |_____ _____ _____ _____|     |
            |  0  |     |     |     |     |  1  |
bone        |_____|  6  |  7  |  3  |  2  |_____|
            |     |_____|_____|_____|_____|     |
            |  5  |                       |  4  |
            |_____|                       |_____|


                         _____ _____
             _____ _____|     |     |_____ _____
            |     |     |  0  |  1  |     |     |
rigger      |  6  |  7  |_____|_____|  3  |  2  |
            |_____|_____|     |     |_____|_____|
                        |  5  |  4  |
                        |_____|_____|


                   _____ _____ _____
             _____|     |     |     |_____
            |     |  0  |  1  |  2  |     |
spindle     |  7  |_____|_____|_____|  3  |
            |_____|     |     |     |_____|
                  |  6  |  5  |  4  |
                  |_____|_____|_____|


                _____ _____
               |     |     |
               |  0  |  1  |
               |_____|_____|
             _____|     |_____
            |     |  3  |     |
hrglass     |  6  |_____|  2  |
            |_____|     |_____|
                  |  7  |
                __|__ __|__
               |     |     |
               |  5  |  4  |
               |_____|_____|


             _____       _____       _____
            |     |_____|     |_____|     |
            |  0  |     |  3  |     |  1  |
dhrglass    |_____|  6  |_____|  2  |_____|
            |     |_____|     |_____|     |
            |  5  |     |  7  |     |  4  |
            |_____|     |_____|     |_____|


                   _____             _____
                  |     |           |     |
                  |  0  |           |  1  |
             _____|     |___________|     |_____
            |      \   /      |      \   /      |
2stars      |  6           7  |  3           2  |
            |_____ /   \ _____|_____ /   \ _____|
                  |     |           |     |
                  |  5  |           |  4  |
                  |_____|           |_____|


                         _____
                        |     |
                        |  2  |
                        |_____|
             _____ _____|     |_____ _____
            |     |     |  3  |     |     |
crosswave   |  0  |  1  |_____|  5  |  4  |
            |_____|_____|     |_____|_____|
                        |  7  |
                        |_____|
                        |     |
                        |  6  |
                        |_____|

             _____ _____ _____ _____
            |     |     |     |     |
            |  0  |  1  |  2  |  3  |
            |_____|_____|_____|_____|
            |     |     |     |     |
3x4         | 10  | 11  |  5  |  4  |
            |_____|_____|_____|_____|
            |     |     |     |     |
            |  9  |  8  |  7  |  6  |
            |_____|_____|_____|_____|


             _____ _____ _____ _____
            |     |     |     |     |
            | 12  | 13  | 14  |  0  |
            |_____|_____|_____|_____|
            |     |     |     |     |
            | 10  | 15  |  3  |  1  |
4x4         |_____|_____|_____|_____|            (4 way symmetry)
            |     |     |     |     |
            |  9  | 11  |  7  |  2  |
            |_____|_____|_____|_____|
            |     |     |     |     |
            |  8  |  6  |  5  |  4  |
            |_____|_____|_____|_____|


             _____ _____ _____ _____ _____
            |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |
            |_____|_____|_____|_____|_____|
            |     |     |     |     |     |
            |  9  |  8  |  7  |  6  |  5  |
4x5         |_____|_____|_____|_____|_____|
            |     |     |     |     |     |
            | 15  | 16  | 17  | 18  | 19  |
            |_____|_____|_____|_____|_____|
            |     |     |     |     |     |
            | 14  | 13  | 12  | 11  | 10  |
            |_____|_____|_____|_____|_____|


             _____ _____ _____ _____ _____ _____
            |     |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |  5  |
            |_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |
            | 11  | 10  |  9  |  8  |  7  |  6  |
4x6         |_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |
            | 18  | 19  | 20  | 21  | 22  | 23  |
            |_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |
            | 17  | 16  | 15  | 14  | 13  | 12  |
            |_____|_____|_____|_____|_____|_____|


                   _____             _____
                  |     |           |     |
                  |  1  |           |  4  |
             _____|     |_____ _____|     |_____
            |      \   /      |      \   /      |
            |  0           2  |  7           5  |
            |_____ /   \ _____|_____ /   \ _____|
                  |     |           |     |
                  |  3  |           |  6  |
c1phan            |_____|           |_____|         (4 way symmetry)
                  |     |           |     |
                  | 14  |           | 11  |
             _____|     |___________|     |_____
            |      \   /      |      \   /      |
            | 13          15  | 10           8  |
            |_____ /   \ _____|_____ /   \ _____|
                  |     |           |     |
                  | 12  |           |  9  |
                  |_____|           |_____|


                         _____ _____
                        |     |     |
                        |  0  |  1  |
                   _____|_____|_____|_____
                  |     |     |     |     |
                  | 21  | 22  |  2  |  3  |
             _____|_____|_____|_____|_____|_____
            |     |     |     |     |     |     |
            | 19  | 20  | 23  |  5  |  4  |  6  |
bigblob     |_____|_____|_____|_____|_____|_____|      (4 way symmetry)
            |     |     |     |     |     |     |
            | 18  | 16  | 17  | 11  |  8  |  7  |
            |_____|_____|_____|_____|_____|_____|
                  |     |     |     |     |
                  | 15  | 14  | 10  |  9  |
                  |_____|_____|_____|_____|
                        |     |     |
                        | 13  | 12  |
                        |_____|_____|


                      _____
                     |     |
                     |  2  |
                   __|__ __|__
             _____|     |     |_____
            |     |  1  |  3  |     |
galaxy      |  0  |_____|_____|  4  |     (4 way symmetry)
            |_____|     |     |_____|
                  |  7  |  5  |
                  |_____|_____|
                     |     |
                     |  6  |
                     |_____|

                   _____             _____
             _____|     |_____ _____|     |_____
            |     |  1  |     |     |  7  |     |
ptpd        |  0  |_____|  2  |  6  |_____|  4  |
            |_____|     |_____|_____|     |_____|
                  |  3  |           |  5  |
                  |_____|           |_____|



                   _____             _____             _____
             _____|     |_____ _____|     |_____ _____|     |_____
            |     |  0  |     |     |  1  |     |     |  2  |     |
3ptpd       |  9  |_____| 10  | 11  |_____|  5  |  4  |_____|  3  |
            |_____|     |_____|_____|     |_____|_____|     |_____|
                  |  8  |           |  7  |           |  6  |
                  |_____|           |_____|           |_____|


                                  _____
                                 |     |
                   _____         |  1  |         _____
             _____|     |_____ __|__ __|__ _____|     |_____
            |     |  0  |     |     |     |     |  2  |     |
3mptpd      |  9  |_____| 10  | 11  |  5  |  4  |_____|  3  |
            |_____|     |_____|_____|_____|_____|     |_____|
                  |  8  |        |     |        |  6  |
                  |_____|        |  7  |        |_____|
                                 |_____|


                   _____             _____             _____             _____
             _____|     |_____ _____|     |_____ _____|     |_____ _____|     |_____
            |     |  0  |     |     |  1  |     |     |  2  |     |     |  3  |     |
4ptpd       | 12  |_____| 13  | 14  |_____| 15  |  7  |_____|  6  |  5  |_____|  4  |
            |_____|     |_____|_____|     |_____|_____|     |_____|_____|     |_____|
                  | 11  |           | 10  |           |  9  |           |  8  |
                  |_____|           |_____|           |_____|           |_____|

                         _____
             _____ _____|     |_____ _____
            |     |     |  2  |     |     |
1x2dmd      |  0  |  1  |_____|  4  |  3  |
            |_____|_____|     |_____|_____|
                        |  5  |
                        |_____|


                      _____
                     |     |
                     |  2  |
             _____ __|__ __|__ _____
            |     |     |     |     |
2x1dmd      |  0  |  1  |  4  |  3  |
            |_____|_____|_____|_____|
                     |     |
                     |  5  |
                     |_____|


                               _____
             _____ _____ _____|     |_____ _____ _____
            |     |     |     |  3  |     |     |     |
1x3dmd      |  0  |  1  |  2  |_____|  6  |  5  |  4  |
            |_____|_____|_____|     |_____|_____|_____|
                              |  7  |
                              |_____|


                            _____
                           |     |
                           |  3  |
             _____ _____ __|__ __|__ _____ _____
            |     |     |     |     |     |     |
3x1dmd      |  0  |  1  |  2  |  6  |  5  |  4  |
            |_____|_____|_____|_____|_____|_____|
                           |     |
                           |  7  |
                           |_____|


                _____       _____       _____
               |     |     |     |     |     |
               |  0  |     |  1  |     |  2  |
             __|__ __|__ __|__ __|__ __|__ __|__
            |     |     |     |     |     |     |
3dmd        |  9  | 10  | 11  |  5  |  4  |  3  |
            |_____|_____|_____|_____|_____|_____|
               |     |     |     |     |     |
               |  8  |     |  7  |     |  6  |
               |_____|     |_____|     |_____|


                _____                         _____
               |     |                       |     |
               |  0  |         _____         |  2  |
             __|__ __|__ _____|     |_____ __|__ __|__
            |     |     |     |  1  |     |     |     |
3mdmd       |  9  | 10  | 11  |_____|  5  |  4  |  3  |
            |_____|_____|_____|     |_____|_____|_____|
               |     |        |  7  |        |     |
               |  8  |        |_____|        |  6  |
               |_____|                       |_____|


                _____       _____       _____       _____
               |     |     |     |     |     |     |     |
               |  0  |     |  1  |     |  2  |     |  3  |
             __|__ __|__ __|__ __|__ __|__ __|__ __|__ __|__
            |     |     |     |     |     |     |     |     |
4dmd        | 12  | 13  | 14  | 15  |  7  |  6  |  5  |  4  |
            |_____|_____|_____|_____|_____|_____|_____|_____|
               |     |     |     |     |     |     |     |
               | 11  |     | 10  |     |  9  |     |  8  |
               |_____|     |_____|     |_____|     |_____|



                   _____             _____             _____
             _____|     |_____ _____|     |_____ _____|     |_____
            |     |  0  |     |     |  1  |     |     |  2  |     |
3ptpd       |  9  |_____| 10  | 11  |_____|  5  |  4  |_____|  3  |
            |_____|     |_____|_____|     |_____|_____|     |_____|
                  |  8  |           |  7  |           |  6  |
                  |_____|           |_____|           |_____|



                   _____             _____             _____             _____
             _____|     |_____ _____|     |_____ _____|     |_____ _____|     |_____
            |     |  0  |     |     |  1  |     |     |  2  |     |     |  3  |     |
4ptpd       | 12  |_____| 13  | 14  |_____| 15  |  7  |_____|  6  |  5  |_____|  4  |
            |_____|     |_____|_____|     |_____|_____|     |_____|_____|     |_____|
                  | 11  |           | 10  |           |  9  |           |  8  |
                  |_____|           |_____|           |_____|           |_____|




                                  _____
                                 |     |
                                 |  3  |
                _____ _____ _____|     |_____ _____ _____
               |     |     |      \   /      |     |     |
wingedstar     |  0  |  1  |  2           6  |  5  |  4  |
               |_____|_____|_____ /   \ _____|_____|_____|
                                 |     |
                                 |  7  |
                                 |_____|



                                  _____             _____
                                 |     |           |     |
                                 |  3  |           |  5  |
                _____ _____ _____|     |_____ _____|     |_____ _____ _____
               |     |     |      \   /      |      \   /      |     |     |
wingedstar12   |  0  |  1  |  2           4  | 10           8  |  7  |  6  |
               |_____|_____|_____ /   \ _____|_____ /   \ _____|_____|_____|
                                 |     |           |     |
                                 | 11  |           |  9  |
                                 |_____|           |_____|



                                  _____             _____             _____
                                 |     |           |     |           |     |
                                 |  3  |           |  7  |           | 12  |
                _____ _____ _____|     |_____ _____|     |_____ _____|     |_____ _____ _____
               |     |     |      \   /      |      \   /      |      \   /      |     |     |
wingedstar16   |  0  |  1  |  2           5  |  6          14  | 13          10  |  9  |  8  |
               |_____|_____|_____ /   \ _____|_____ /   \ _____|_____ /   \ _____|_____|_____|
                                 |     |           |     |           |     |
                                 |  4  |           | 15  |           | 11  |
                                 |_____|           |_____|           |_____|



                _____       _____       _____
               |     |     |     |     |     |
               |  0  |     |  1  |     |  2  |
               |_____|_____|     |_____|_____|
               |     |      \   /      |     |
barredstar     |  8  |  9           4  |  3  |
               |_____|_____ /   \ _____|_____|
               |     |     |     |     |     |
               |  7  |     |  6  |     |  5  |
               |_____|     |_____|     |_____|



                _____       _____             _____       _____
               |     |     |     |           |     |     |     |
               |  0  |     |  1  |           |  2  |     |  3  |
               |_____|_____|     |_____ _____|     |_____|_____|
               |     |      \   /      |      \   /      |     |
barredstar12   | 11  | 12          13  |  6           5  |  4  |
               |_____|_____ /   \ _____|_____ /   \ _____|_____|
               |     |     |     |           |     |     |     |
               | 10  |     |  9  |           |  8  |     |  7  |
               |_____|     |_____|           |_____|     |_____|



                _____       _____             _____             _____       _____
               |     |     |     |           |     |           |     |     |     |
               |  0  |     |  1  |           |  2  |           |  3  |     |  4  |
               |_____|_____|     |_____ _____|     |_____ _____|     |_____|_____|
               |     |      \   /      |      \   /      |      \   /      |     |
barredstar16   | 14  | 15          16  | 17           8  |  7           6  |  5  |
               |_____|_____ /   \ _____|_____ /   \ _____|_____ /   \ _____|_____|
               |     |     |     |           |     |           |     |     |     |
               | 13  |     | 12  |           | 11  |           | 10  |     |  9  |
               |_____|     |_____|           |_____|           |_____|     |_____|



                   _____             _____
                  |     |           |     |
                  |  0  |           |  1  |
             _____|     |_____ _____|     |_____
            |      \   /      |      \   /      |
littlestars |  6           7  |  3           2  |    (internal use only!)
            |_____ /   \ _____|_____ /   \ _____|
                  |     |           |     |
                  |  5  |           |  4  |
                  |_____|           |_____|


                         _____
               _____    |     |    _____
              |     |   |  3  |   |     |
              |  2  |   |_____|   |  5  |
              |_____|   |     |   |_____|
                        |  4  |
             _____ _____|     |_____ _____
            |     |      \   /      |     |
hyperglass  |  0  |  1           7  |  6  |      (4 way symmetry)
            |_____|_____ /   \ _____|_____|    (internal use only!)
                        |     |
               _____    | 10  |    _____
              |     |   |_____|   |     |
              | 11  |   |     |   |  8  |
              |_____|   |  9  |   |_____|
                        |_____|


                            _____ _____
                           |     |     |
                           |  0  |  1  |
                           |_____|_____|
                              |     |
                              |  2  |
                              |_____|
                              |     |
             _____            |  3  |            _____
            |     |_____ _____|     |_____ _____|     |
            | 13  |     |      \   /      |     |  4  |
hyperbone   |_____| 14  | 15           7  |  6  |_____|
            |     |_____|_____ /   \ _____|_____|     |
            | 12  |           |     |           |  5  |
            |_____|           | 11  |           |_____|
                              |_____|
                              |     |          (4 way symmetry)
                              | 10  |        (internal use only!)
                            __|__ __|__
                           |     |     |
                           |  9  |  8  |
                           |_____|_____|



                   _____ _____ _____ 
                  |     |     |     |
                  |  0  |  1  |  2  |
                  |_____|_____|_____|
                     |     |     |
323                  |  7  |  3  |
                   __|_____|_____|__
                  |     |     |     |
                  |  6  |  5  |  4  |
                  |_____|_____|_____|



                   _____ _____ _____
                  |     |     |     |
                  |  0  |  1  |  2  |
                __|_____|_____|_____|__
               |     |     |     |     |
343            |  8  |  9  |  4  |  3  |
               |_____|_____|_____|_____|
                  |     |     |     |
                  |  7  |  6  |  5  |
                  |_____|_____|_____|



             _____ _____ _____ _____ _____
            |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |
            |_____|_____|_____|_____|_____|
                     |     |     |
525                  | 11  |  5  |
             ________|_____|_____|________
            |     |     |     |     |     |
            | 10  |  9  |  8  |  7  |  6  |
            |_____|_____|_____|_____|_____|



             _____ _____ _____ _____ _____
            |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |
            |_____|_____|_____|_____|_____|
               |     |     |     |     |
545            | 12  | 13  |  6  |  5  |
             __|_____|_____|_____|_____|__
            |     |     |     |     |     |
            | 11  | 10  |  9  |  8  |  7  |
            |_____|_____|_____|_____|_____|



             _____ _____ _____ _____ _____
            |     |     |     |     |     |
            |  0  |  1  |  2  |  3  |  4  |
            |_____|_____|_____|_____|_____|
            |     |//|     |     |//|     |
h545        | 12  |//| 13  |  6  |//|  5  |
            |_____|//|_____|_____|//|_____|
            |     |     |     |     |     |
            | 11  | 10  |  9  |  8  |  7  |
            |_____|_____|_____|_____|_____|



                _____       _____
               |     |     |     |
               |  0  |     |  1  |
             __|__ __|__ __|__ __|__
            |     |     |     |     |
            |  5  |  4  |  3  |  2  |
deepqtg     |_____|_____|_____|_____|
            |     |     |     |     |
            |  8  |  9  | 10  | 11  |
            |_____|_____|_____|_____|
               |     |     |     |
               |  7  |     |  6  |
               |_____|     |_____|



                         _____ _____
                        |     |     |
                        |  2  | 11  |
                        |_____|_____|
             _____ _____|     |     |_____ _____
            |     |     |  3  | 10  |     |     |
deepxwv     |  0  |  1  |_____|_____|  7  |  6  |
            |_____|_____|     |     |_____|_____|
                        |  4  |  9  |
                        |_____|_____|
                        |     |     |
                        |  5  |  8  |
                        |_____|_____|




                   _____       _____       _____
                  |     |     |     |     |     |
                  |  0  |     |  1  |     |  2  |
             _____|_____|_____|_____|_____|_____|_____
            |     |     |     |     |     |     |     |
            | 17  | 18  | 19  |  6  |  5  |  4  |  3  |
3oqtg       |_____|_____|_____|_____|_____|_____|_____|
            |     |     |     |     |     |     |     |
            | 13  | 14  | 15  | 16  |  9  |  8  |  7  |
            |_____|_____|_____|_____|_____|_____|_____|
                  |     |     |     |     |     |
                  | 12  |     | 11  |     | 10  |
                  |_____|     |_____|     |_____|


             _____ _____
            |     |     |
            |  1  |  2  |
trngl       |_____|_____|      (1 way symmetry -- leads to strange
               |     |         requirements in call descriptions)
               |  0  |
               |_____|



             _____ _____
            |     |     |
            |  2  |  3  |
            |_____|_____|      (1 way symmetry -- leads to strange
               |     |         requirements in call descriptions)
trngl4         |  1  |
               |_____|
               |     |
               |  0  |
               |_____|


                         _____
                        |     |
                        |  2  |
                        |_____|
                        |     |
                        |  3  |
             _____ _____|     |_____ _____
            |     |      \   /      |     |
thar        |  0  |  1           5  |  4  |      (4 way symmetry)
            |_____|_____ /   \ _____|_____|
                        |     |
                        |  7  |
                        |_____|
                        |     |
                        |  6  |
                        |_____|





                   _____ _____
                  |     |     |
                  |  0  |  1  |
             _____|_____|_____|_____
            |     |           |     |
            |  7  |           |  2  |
alamo       |_____|           |_____|            (4 way symmetry)
            |     |           |     |
            |  6  |           |  3  |
            |_____|_____ _____|_____|
                  |     |     |
                  |  5  |  4  |
                  |_____|_____|


             _____                         _____
            |     |                       |     |
            |  0  |                       |  9  |
            |_____|                       |_____|
            |     |_____ _____ _____ _____|     |
            |  1  |     |     |     |     |  8  |
bigh        |_____|  4  |  5  | 11  | 10  |_____|
            |     |_____|_____|_____|_____|     |
            |  2  |                       |  7  |
            |_____|                       |_____|
            |     |                       |     |
            |  3  |                       |  6  |
            |_____|                       |_____|



             _____                                                 _____
            |     |                                               |     |
            |  0  |                                               | 11  |
            |_____|                                               |_____|
            |     |_____ _____ _____ _____ _____ _____ _____ _____|     |
            |  1  |     |     |     |     |     |     |     |     | 10  |
bigbigh     |_____|  4  |  5  |  6  |  7  | 15  | 14  | 13  | 12  |_____|
            |     |_____|_____|_____|_____|_____|_____|_____|_____|     |
            |  2  |                                               |  9  |
            |_____|                                               |_____|
            |     |                                               |     |
            |  3  |                                               |  8  |
            |_____|                                               |_____|




                                     _____
                                    |     |
                                    |  4  |
                                    |_____|
             _____ _____ _____ _____|     |_____ _____ _____ _____
            |     |     |     |     |  5  |     |     |     |     |
bigx        |  0  |  1  |  2  |  3  |_____|  9  |  8  |  7  |  6  |
            |_____|_____|_____|_____|     |_____|_____|_____|_____|
                                    | 11  |
                                    |_____|
                                    |     |
                                    | 10  |
                                    |_____|



                                     _____ _____
                                    |     |     |
                                    |  4  | 15  |
                                    |_____|_____|
             _____ ___________ _____|     |     |_____ _____ _____ _____
            |     |     |     |     |  5  | 14  |     |     |     |     |
bigbigx     |  0  |  1  |  2  |  3  |_____|_____| 11  | 10  |  9  |  8  |
            |_____|_____|_____|_____|     |     |_____|_____|_____|_____|
                                    |  6  | 13  |
                                    |_____|_____|
                                    |     |     |
                                    |  7  | 12  |
                                    |_____|_____|




                                     _____ _____
             _____ _____ _____ _____|     |     |_____ _____ _____ _____
            |     |     |     |     |  4  |  5  |     |     |     |     |
bigrig      |  0  |  1  |  2  |  3  |_____|_____|  9  |  8  |  7  |  6  |
            |_____|_____|_____|_____|     |     |_____|_____|_____|_____|
                                    | 11  | 10  |
                                    |_____|_____|



             _____ _____                         _____ _____
            |     |     |_____ _____ _____ _____|     |     |
            |  0  |  1  |     |     |     |     |  4  |  5  |
bigbone     |_____|_____|  2  |  3  |  9  |  8  |_____|_____|
            |     |     |_____|_____|_____|_____|     |     |
            | 11  | 10  |                       |  7  |  6  |
            |_____|_____|                       |_____|_____|


                         _____
             _____ _____|     |_____ _____
            |     |     |  2  |     |     |
            |  0  |  1  |_____|  4  |  5  |
            |_____|_____|     |_____|_____|
                        |  3  |
bigdmd                  |_____|
             _____ _____|     |_____ _____
            |     |     |  9  |     |     |
            | 11  | 10  |_____|  7  |  6  |
            |_____|_____|     |_____|_____|
                        |  8  |
                        |_____|


                   _____             _____
                  |     |           |     |
                  |  5  |           |  6  |
                  |_____|           |_____|
             _____|     |_____ _____|     |_____
            |     |  4  |     |     |  7  |     |
bigptpd     |  2  |_____|  3  |  9  |_____|  8  |
            |_____|     |_____|_____|     |_____|
                  |  1  |           | 10  |
                  |_____|           |_____|
                  |     |           |     |
                  |  0  |           | 11  |
                  |_____|           |_____|



                            _____
                           |     |
             _____ _____   |  2  |   _____ _____
            |     |     |__|__ __|__|     |     |
            |  0  |  1  |     |     |  4  |  5  |
bighrgl     |_____|_____|  9  |  3  |_____|_____|
            |     |     |_____|_____|     |     |
            | 11  | 10  |  |     |  |  7  |  6  |
            |_____|_____|  |  8  |  |_____|_____|
                           |_____|



             _____ _____       _____       _____ _____
            |     |     |_____|     |_____|     |     |
            |  0  |  1  |     |  2  |     |  4  |  5  |
bigdhrgl    |_____|_____|  9  |_____|  3  |_____|_____|
            |     |     |_____|     |_____|     |     |
            | 11  | 10  |     |  8  |     |  7  |  6  |
            |_____|_____|     |_____|     |_____|_____|



             _____                   _____
            |     |_____ _____ _____|     |
            |  0  |     |     |     |  4  |
            |_____|  1  |  2  |  3  |_____|
            |     |_____|_____|_____|     |
d3x4        | 11  |     |     |     |  5  |
            |_____|  9  |  8  |  7  |_____|
            |     |_____|_____|_____|     |
            | 10  |                 |  6  |
            |_____|                 |_____|




normal_concentric  ??????


An important property of these setups, used extensively by the program,
is that any person's diagonal opposite can be found by adding half the
setup size modulo the setup size.  Additionally, for setups that have
4 way symmetry, the person 90 degrees clockwise from a given person can
be found by adding one quarter of the setup size modulo the setup size.

Before going further, we must distinguish between
a "beginning setup kind" and an "ending setup kind".
These are described internally by the enumerations "begin_kind" and
"setup_kind", respectively, in the file database.h, by the way.

Ending setup kinds correspond to the diagrams shown earlier.  They do
not distinguish between 90 degree rotated versions of the same setup.
Beginning setup kinds are more numerous because they DO distinguish
between the 90 degree rotated versions of those setups that do not
have 4 way symmetry.  That is, they take into account the difference
between lines and columns, so that a call definition can indicate
separate actions for people in lines vs. people in columns in the
same 2x4 setup.

The set of beginning setup kinds is just the set of ending setup kinds
(that is, the diagrams above) augmented by 90 degree rotated versions
of those setups that don't have 4 way symmetry.  The names of these
extra setups (called "PU" setups) are typically formed by reversing
the matrix size numbers (1x4 vs. 4x1, for example) or by putting
the letter "p" in front, as in "pqtag".

The extra beginning setup kinds are as follows:

           normal setup           "PU" setup

                1x2                  2x1
                dmd                  pmd
                trngl                ptrngl
                bone6                pbone6
                short6               pshort6
                qtag                 pqtag
                wing                 pwing
                spindle              pspindle
                hrglass              phrglass
                1x4                  4x1
                1x8                  8x1
                1x10                 10x1
                1x12                 12x1
                1x14                 14x1
                1x16                 16x1
                2x4                  4x2
                2x3                  3x2
                1x6                  6x1
                3x4                  4x3
                2x6                  6x2
                2x8                  8x2
                ptpd                 pptpd
                3x1dmd               p3x1dmd
                3dmd                 p3dmd
                4dmd                 p4dmd

This correspondence is embodied in the program by means of the table
"keytab" in the file sdtables.c, by the way.

A call definition by array consists of one or more descriptors that look like:

         setup <beginning setup kind> <ending setup kind>
            array [<person action> <person action> ...]

So, for example, the description of the call "drift apart" looks as follows:

   setup 2x4 2x4
      array [M6S M4S M7S M5S L2S L0S R3S R1S]
   setup 4x2 2x4
      array [R6S M4N 3LS M5S M2S R4S M3N L1S]

The first descriptor tells people who think they are in lines what to do,
and the second descriptor addresses people in columns.  For calls that start
in a setup with 4 way symmetry, there is only one descriptor as in the
following definition of "reach out":

   setup 2x2 1x4
      array [M3S M1S R2S L0S]

It is never appropriate for a PU setup, such as "4x2", to
appear as the SECOND token after the word "setup".  Only the FIRST token
may be such a setup.

An entry of zero in the array means that the call would be illegal for
anyone in that position, e.g. the leaders in the call "right and left thru".

We can now show the interpretation of a call descriptor for a very simple case,
when the beginning and ending formations are both in normal orientation,
as shown in diagrams above.  In this case the beginning setup will have the
same name as an ending setup.  The list in brackets will have as many items
as there are people in the beginning setup.  Each person finds his position
number in that setup, assuming he is facing north.  It is as though everyone
were given the diagrams listed above, and held the diagram in front of him
to determine his position.  Once he determines his position, he looks at that
item in the bracketed array (starting with zero, of course) to determine
what to do.  The number says what position in the ending setup that person
should move to.  The letter (N, E, S, or W) after the number tells what
facing direction to take (north, east, south, or west).  Both of these are
interpreted relative to the diagram that the person is holding in front of him.
So, for example, a direction of north indicates that that person does not
change facing direction, east indicates that that person finishes 90 degrees
clockwise from his starting orientation, and so on.  Note that all directions
are north for the call "walk and dodge", and are south for the call "reach
out".  This is so even if the calls are done from T-boned formations.

Finally, the optional letter before the number tells that person's roll
direction.  "L" and "R" indicate that the person will quarter left or
right if told to roll after the call.  "M" ("middle") says that the
person knows that he can't roll, and will stay facing the same direction.
No letter means that the person's roll direction is undefined
(or controversial, or not implemented yet) and an error will be given if
that person is told to roll.  For example, roll is considered illegal
after "wheel fan and cross thru".

Example:
     In "reach out", the first array item, which is "M3S", says that any
person in the starting 2x2 box who is a lead beau (position 0 in the
diagram) should think of a 1x4 line elongated laterally relative to himself,
and should go to the second spot from the right end (position 3), turn 180
degrees, and refuse to roll.

      This person ---+
                     |
                     |
                   __V__ _____
                  |     |     |
                  |  0  |     |
                  |_____|_____|
                  |     |     |
                  |     |     |
                  |_____|_____|

          goes here -------+
                           |
                           |
             _____ _____ __V__ _____
            |     |     |     |     |
            |     |     |  3  |     |
            |_____|_____|_____|_____|

If people are T-boned, the application of these rules could result in
people fighting over which way the resulting 1x4 should be oriented.
The program will resolve this by turning the result into a diamond if
it can, or giving an error otherwise.

We will now go through all the cases in a somewhat methodical way.

            BEGINNING AND ENDING SETUPS DO NOT HAVE 4 WAY SYMMETRY,
                        CALL IS NON-ROTATING

   We consider a call to be non-rotating if the starting and ending setups
   have consistent orientation relative to the diagrams above.  That is,
   if the beginning setup is oriented as shown in one of the diagrams,
   the ending setup will also be as shown in one of the diagrams.  Any
   "non-shape-changer" is such a call.  Switch to a diamond is also
   non-rotating.  Reverse flip the diamond is not.

In this case, each person holds the diagram in front of him, in normal
orientation if possible, so that he is facing north, and reads his
position number from it.  He then looks that the correspondingly numbered
element of the array describing the call in the database, and goes to
the indicated spot in the result setup, using the same orientation
of the set of diagrams.  For example, on the call "circulate" from a 2x4,
anyone who thinks he is in lines and is the second from the left looking
out, will do this:

      This person ---+
                     |
                     |
             _____ __V__ _____ _____
            |     |     |     |     |
            |     |  1  |     |     |
            |_____|_____|_____|_____|
            |     |     |     |     |
            |     |     |     |     |
            |_____|_____|_____|_____|

      looks at item number 1 in the call definition array, which is
            setup 2x4 2x4
               array [R3S R2S L1S L0S M3N M2N M1N M0N]
                           ^
                           |
                        item 1

      and so goes here ----+
                           |
                           |
             _____ _____ __V__ _____
            |     |     |     |     |
            |     |     |  2  |     |
            |_____|_____|_____|_____|
            |     |     |     |     |
            |     |     |     |     |
            |_____|_____|_____|_____|

      and faces south, ready to roll right.

The procedure just described only works for people who are facing north
or south in the diagram of the beginning setup.  People facing east
or west do the following:  Change the name of the beginning setup to
its PU name (in this case 4x2) when looking it up in the database
specification, and turn all the diagrams 90 degrees counterclockwise.

The PU version of the 2x4 setup looks like this:
             _____ _____
            |     |     |
            |  3  |  4  |
            |_____|_____|
            |     |     |
            |  2  |  5  |
4x2         |_____|_____|
            |     |     |
            |  1  |  6  |
            |_____|_____|
            |     |     |
            |  0  |  7  |
            |_____|_____|

If someone is last in a right-hand column, he will do the following:

                         _____ _____
                        |     |     |
                        |     |     |
                        |_____|_____|
                        |     |     |
                        |     |     |
                        |_____|_____|
                        |     |     |
                        |     |     |
                        |_____|_____|
                        |     |     |
      this person ----->|  0  |     |
                        |_____|_____|

      looks at item number 0 in the call definition array, which is
            setup 4x2 2x4
               array [M1N M2N M3N R4S L3S M4N M5N M6N]
      (Note that the beginning setup is now 4x2, but the ending setup
         is still 2x4.  PU names are never used in ending setup names.)

                            _____ _____
                           |     |     |
                           |     |     |
                           |_____|_____|
                           |     |     |
                           |     |     |
                           |_____|_____|
                           |     |     |
      and so goes here --->|  1  |     |
                           |_____|_____|
                           |     |     |
                           |     |     |
                           |_____|_____|


      and faces north, ready to refuse to roll.



Calls that can handle arbitrary facing directions from beginning setups that
do not have 4 way symmetry must have 2 entries in the database: a "normal"
one for people who are facing north or south in the diagrams shown above,
and a "PU" one for people who are facing east or west.  The full
definition for circulate from arbitrary 2x4's is

   setup 2x4 2x4
      array [R3S R2S L1S L0S M3N M2N M1N M0N]
   setup 4x2 2x4
      array [M1N M2N M3N R4S L3S M4N M5N M6N]

When using the PU definition, both the beginning and ending diagrams
are rotated 90 degrees counterclockwise relative to the above diagrams,
whether they are the same setup or different setups.

Another example:

Diamonds always have people T-boned.  The points use the normal
definitions and the centers use the PU definitions.  The call
"diamond circulate" is defined as

   setup dmd dmd
      array [R1E 0 L1W 0]
   setup pmd dmd
      array [0 R2E 0 L2W]

The zero entries mean that the call is illegal for people who
are facing directly into or out of the diamond.  The legal starting
positions for the call "diamond single rotate" are the other way around:

   setup dmd dmd
      array [0 L0S 0 L2N]
   setup pmd dmd
      array [L3N 0 L1S 0]

The diagram that people use for the PU definition is:
                _____
               |     |
               |  2  |
             __|__ __|__
            |     |     |
            |  1  |  3  |
            |_____|_____|
               |     |
               |  0  |
               |_____|


Another example:
The call "flip the diamond" is defined as

   setup dmd 1x4
      array [R1S 0 L3S 0]
   setup pmd 1x4
      array [0 R2E 0 L2W]

The centers of the diamond use the PU definition.  They
rotate the ending diagram 90 degrees counterclockwise also,
so the ending setup is

             _____
            |     |
            |  2  |
            |_____|
            |     |
            |  3  |
            |_____|
            |     |
            |  1  |
            |_____|
            |     |
            |  0  |
            |_____|


            BEGINNING AND ENDING SETUPS DO NOT HAVE 4 WAY SYMMETRY,
                        CALL IS *ROTATING*

If the beginning and ending setups do not both appear in the above diagrams
with consistent orientation, do the following:

   Invent a new call whose action is the desired call followed by
      a complete rotation of the final poition 90 degrees counterclockwise.
   Enter that new call in the database as described above.
   Put the word "rotate" after the two setup names in each definition
      specification.

The word "rotate" tells the program to rotate the setup resulting from the
use of that specification clockwise after completion of the call.  The call
"counter rotate" is an example:

   setup 2x4 2x4 rotate
      array [R0N R1N L6S L7S L0S L1S R6N R7N]
   setup 4x2 2x4 rotate
      array [R0N R1N R2N R3N L0S L1S L2S L3S]

"Lockit" is another:

   setup 1x4 1x4 rotate
      array [R0N R1N L0S L1S]

"Single strut right" is another:

   setup 4x1 1x4 rotate
      array [3W 2E 0 0]

Rotating call definitions are confusing to write!  The facing direction
given in the call specification does NOT include the final clockwise
rotation that the program will perform.  In "lockit" person #0 is shown
not changing his facing direction at all ("N") even though his roll direction
is "R".  This is because his actual 90 degree clockwise turn is entirely
a consequence of the hidden final rotation.  Person #2 is show turning
180 degrees.  That, plus the final rotation, gives a 90 degree
counterclockwise turn.

What happens if one of the specifications has the word "rotate" and the
other does not?  If people are not T-boned, there is no problem.  Only
one of the specifications is used.  In this case, whether the call is a
shape-changer would depend on people's facing direction.  (The call "change
your image" comes to mind.)  If people are T-boned, the call will be illegal
with this definition.  "Change your image" used to be definied this way,
and was illegal from T-boned setups.  It now uses a different trick, to
be described much later.

            BEGINNING AND ENDING SETUPS BOTH HAVE 4 WAY SYMMETRY

This is straightforward.  The word "rotate" is never used with such
calls, and only one descriptor is required.  If people are T-boned when
the call is executed, the program does what it can.  Here is the definition
of "ripoff":

   setup 2x2 2x2
      array [R1S R2N M3N M0N]


            BEGINNING SETUP HAS 4 WAY SYMMETRY, ENDING SETUP DOES NOT

If the ending setup, relative to people who are facing north when the call
begins, is oriented as in one of the diagrams above, the situation is
straightforward, as in "reach out":

   setup 2x2 1x4
      array [M3S M1S R2S L0S]

Otherwise, we must use a rotating definition.  As above, we define
a new call that has the effect of the desired call followed by a 90
degree counterclockwise rotation, encode that into the database, and put
in the word "rotate".  Here is "pass the ocean":

   setup 2x2 1x4 rotate
      array [0 0 L1S R0N]

                   _____ _____
                  |     |     |
                  |     |     |
                  |_____|_____|
                  |     |     |
                  |  3  |     |
                  |_____|_____|
                     ^
                     |
      This person ---+


      goes here --+        and faces north,
                  |
                  |
                __V__ _____ _____ _____
               |     |     |     |     |
               |  0  |     |     |     |
               |_____|_____|_____|_____|

and then the entire setup is rotated clockwise, resulting in this:

             _____
            |     |
            |  X  |    facing east
            |_____|
            |     |
            |     |
            |_____|
            |     |
            |     |
            |_____|
            |     |
            |     |
            |_____|

which is of course the desired result.

            BEGINNING SETUP DOES NOT HAVE 4 WAY SYMMETRY
                     ENDING SETUP DOES

If the beginning setup, relative to people who are facing north,
is oriented as in one of the diagrams above, the situation is
straightforward, as in "ah so":

   setup 1x4 2x2
      array [R1S L3S L0S R2S]

If the PU beginning setup is required, so that we turn all the
diagrams counterclockwise, we turn the ending setup's diagram
counterclockwise also.  This is perhaps not intuitive.
Here is the call "single polly wally":

   setup 4x1 2x2
      array [R3S 2N L1S 0S]

beginning PU setup:
             _____
            |     |
            |  2  |
            |_____|
            |     |
            |  3  |
            |_____|
            |     |
            |  1  |
            |_____|
            |     |
            |  0  |
            |_____|


ending setup -- note that it is rotated with respect to the main
   diagram for a 2x2, so that its orientation is consistent with
   the 4x1 starting setup:

             _____ _____
            |     |     |
            |  1  |  2  |
            |_____|_____|
            |     |     |
            |  0  |  3  |
            |_____|_____|

Viewed in this way, person zero goes to position 3 and faces south.
The word "rotate" is not used with such a specification, since the
orientations of the beginning and ending setups are consistent
WITH EACH OTHER.  (They are both rotated 90 degrees counterclockwise
from the main diagrams.)

We can of course mix specifications in which the people begin in the
normal setup and the PU setup.  Consider "drop in":

   setup dmd 2x2
      array [R0E 0 L1W 0]
   setup pmd 2x2
      array [0 M1N 0 M2N]

For the "normal" people (who are the points):

          _____                _____ _____
    _____|     |_____         |     |     |
   |     |  1  |     |        |  0  |  1  |
   |  0  |_____|  2  |  -->   |_____|_____|
   |_____|     |_____|        |     |     |
         |  3  |              |  3  |  2  |
         |_____|              |_____|_____|

For the "PU" people (who are the centers):

          _____
         |     |
         |  2  |               _____ _____
       __|__ __|__            |     |     |
      |     |     |           |  1  |  2  |
      |  1  |  3  |     -->   |_____|_____|
      |_____|_____|           |     |     |
         |     |              |  0  |  3  |
         |  0  |              |_____|_____|
         |_____|

The word "rotate" is not used for either the "dmd" or the "pmd"
specification.

General rules of thumb:

   (1) Never use the word "rotate" with an ending setup that has
      4-way symmetry.  If you think you need to, you are wrong.
   (2) In general, use the word "rotate" for both specifications of a
      multi-specification call, or for neither.  If it is used for
      one and not the other, that means that, if people are T-boned,
      they will disagree on whether the call is a shape-changer.  The
      only legal case of this is calls with an ending setup which is
      a 2x4.  In that case, if people are T-boned, the call will go
      into a 4x4 final setup.  This is used in "change your image"
      and "single rotate".
   (3) The word "rotate" simply causes all of the people to turn their
      formation 90 degrees clockwise at the conclusion of the call.
      It is independent of everything else.
   (3) Within any one specification, you must either turn ALL of the
      above diagrams counterclockwise, or NONE of them.  In the former
      case, use the "PU" starting setup designation for that
      specification.  If you can't define the call this way, define
      a different call and use "rotate" to get the desired behavior.

                MULTIPLE SPECIFICATIONS

In general, a call is defined with one or more specifications, each
giving the rule for one starting setup.  An example of this can be
found in the call "counter rotate", for which a very abbreviated
definition is:

   setup 2x4 2x4 rotate
      array [R0N R1N L6S L7S L0S L1S R6N R7N]
   setup 4x2 2x4 rotate
      array [R0N R1N R2N R3N L0S L1S L2S L3S]
   setup 2x2 2x2
      array [R1E L0W L1W R0E]
   setup dmd dmd rotate
      array [R0N 0 L0S 0]
   setup pmd dmd rotate
      array [0 R1N 0 L1S]

It actually has a specification for just about every starting setup
that exists.  This is because counter rotate is a rather unusual call.
Many calls have just one definition from one setup.  They are legal
from other setups that are just multiple copies of the given setup.
For example, "circle to a wave" is just defined from a 2x2 box:

   setup 2x2 2x2
      array [0 0 0E 1E]

No other definitions are given.  When the call is executed from a
larger setup, such as lines facing or an 8-chain, the program breaks
up the larger setup into smaller ones and executes the call separately
in each smaller setup.

The program's general rule is to search through the given call
definition for a specification matching the given setup.  If no entry
is found, it attempts to divide the setup into smaller ones.  (If
people are T-boned and the setup does not have 4-way symmetry, it
actually requires two specifications, for example, 2x4 and 4x2.
If it finds either one, it does not consider subdividing.  If only
one of the two was present, the people whoe require the other will
lose.  Too bad.)

When the program decides to subdivide the setup, it is guided by the
specifications that are present for smaller setups.  It always begins
with the least radical subdivision.  If the original setup is a 2x4,
but no 2x4 (or 4x2, as needed) specifications are present, it looks
for 1x4 (and/or 4x1) specifications.  If found, the setup is divided
that way.  If a 2x2 specification is found, it divides the setup that
way.  If both are found, it gives precedence to the 1x4 division.
If neither a 1x4/4x1 or 2x2 specification is found, it looks for a
1x2 and/or 2x1.  If found, it subdivides the setup as appropriate.
If no 1x2/2x1 is found, it searches for a 1x1.  Similar subdivision
searches are performed for other initial setups.

Some of the subdivision rules are actually somewhat tricky.  When
dividing a 2x2 into 1x2's, it looks at people's facing direction
and checks for the existence of a 1x2 and/or 2x1 specification.
It requires an unambiguous decision of which axis to use for the
subdivision.  Hence "siamese breakdown" is not permitted in a 2x2,
and subdivision is not possible if people are T-boned (I think.)
Similar care is exercised in the 2x4 to 1x2/2x1 subdivision.  It
does the right thing with "heads pass thru; everyone trade".

The reason that "counter rotate" needs so many specifications is that
this call's definition does not involve the replication of smaller
versions in larger setups.  If it were defined on a 1x4 but not on a
1x8, then, if called from a grand wave, it would do a lockit on each
side, rather than a the gigantic concentric counter rotate that is
required.

The order in which specifications with different starting setups
appear is not significant -- the search is always from the largest
setup to the smallest.  Multiple specifications with the same
starting setup are only meaningful if qualifiers are used (see below),
and, in that case, they are searched in the order in which they appear.

        OVERVIEW OF PREDICATES, RESTRICTIONS, AND QUALIFIERS

These are conditional things that can be placed in calls to perform
special functions.  A brief summary of their meanings is this:

   Predicates are applied separately to each person, and are used
   to let a person execute a rule that depends on some property of
   the setup, such as another person's orientation.  Example:
   Predicates are used in the call "in roll circulate" to tell people
   who are not inrollers where the inroller is, so they know which way
   to move.

   Restrictions are applied to entire setups, and are used to indicate
   that, while the overall setup shape is acceptable, certain aspects
   (for example, facing directions) might be unusual.  When a restriction
   is violated, a warning or error arises.  This is typically the "do
   your part" warning.  Example:  A restriction is used on "follow your
   neighbor" to force the "do your part" warning if people are not in
   a normal box.  The call could be done from a magic box.  [Actually,
   most restrictions should raise errors instead of warnings, but the
   ability to do that is a recent feature.]

   Qualifiers are used to control the search for starting setups.
   Rather than causing a warning or error to be raised if the setup
   is inappropriate, a qualifier simply causes that clause to be skipped
   in the search.  An example of this is in the call "recycle":

      setup 1x4 2x2 qualifier wave_only
         .....
      setup 2x2 1x4
         .....

   When done from a 2x4, we want to do the 1x4 version if the people
   are in waves, and the 2x2 version if they are in lines facing.  The
   normal preference is for the 1x4 version.  The qualifier causes the
   program to look at people's facing direction and ignore the 1x4 clause
   if the people are not in waves.  This will cause the 2x2 clause to be
   used instead.  If they are neither in waves nor lines facing, the 2x2
   clause will be used and the call will fail, since the 2x2 definition
   requires facing couples.

In using predicates, restrictions, and qualifiers, one must be aware
of their behavior in the presence of phantoms.  Some of them are
strict -- they require that all necessary people actually be present
and make up the indicated formation.  Others are lax -- they simply
require that the people who are present be oriented in a way that is
consistent with the indicated formation.  In general, predicates are
strict (though they typically only look at one other person, not the
whole setup), and restrictions and qualifiers are lax.

                  PREDICATES

Predicates are used to indicate, on a person-by-person basis, how
the call definition is determined by properties of the setup other
than that person's position and facing direction.  If a person's
action is dependent only on his position and facing direction, as
it is for most calls, the mechanism already described is sufficient.
For calls like "cycle and wheel" and "in roll circulate", that isn't
enough.  Some people need guidance from another person.

Predicates are used by replacing the "array" clause:

            array [<person action> <person action> ...]

With a "preds" clause:

      preds <error message in quotes>
         if <predicate> [<person action> <person action> ...]
         if <predicate> [<person action> <person action> ...]
         ....

For each person, the predicates are evaluated in sequence until one
is satisfied.  When that happens, that person's entry in the
corresponding action list is used.  If no predicate is satisfied for
some person, the call fails, giving the error message.  (In some
cases, evaluation of a predicate itself gives rise to an error
message.)

For example, the call "cycle and wheel" is defined this way:

   setup 1x4 2x2
      preds "Can't do this call."
         if lines_miniwave [R1S L3N L0S R2N]
         if lines_couple   [R1S R0S L0S L1S]

These two predicates are both strict, and both defined for many setups.
They test the "partner" of the given person, and return true if that
partner is facing the opposite way or same way, respectively, as the
given person.  If the partner is a phantom or is T-boned to the given
person, they return false.  They do not raise any errors in any case.
If any person's partner is a phantom or is T-boned, both predicates
will return false, the program will run out of predicates, and the
error "Can't do this call" will be raised.

The call could have been defined by:

   setup 1x4 2x2
      preds "?"
         if lines_miniwave [R1S L3N L0S R2N]
         if lines_couple   [R1S R0S L0S L1S]
         if always         [R1S  0  L0S  0 ]

since the ends know what to do anyway.  In this case, if an end were
a phantom and the adjacent center were not, the call would fail with
a "so-and-so is not able to execute this call" error.  This is because,
when testing the center, the first two predicates would both fail, and
the third would be used, giving zero, which indicates that the person
can't do the call.

The definition of "in roll circulate" is:

   setup 2x4 2x4
      preds "???"
         if inroller_is_cw [1S 2S 3S 0  0  6S 7S 0N]
         if always         [0  0S 1S 2S 3N 4S 5S 0 ]

The predicate "inroller_is_cw" is unusual.  It is specifically
designed for this call.  It is defined only for 2x4 lines.
Some predicates, like "lines_miniwave" and "lines_couple", are
overloaded -- they have rather general meaning and can be invoked
from several setups.  This predicate, however, is only appropriate
from 2x4 lines, so it must only be used with a "setup 2x4 ..."
specification.  (In fact, it is only used for this call.)
Always check the applicable setups before using a predicate.

The predicate "inroller_is_cw" does most of its work when evaluated
for a center person (spots 1, 2, 5, or 6.)  It examines the people
at the two ends of that person's line.  There must be exactly one
live inroller.  An inroller at one end and a phantom at the other
is legal.  It evaluates to true if the inroller is clockwise (around
the 2x4) from the person in question, false if not.  In the latter
case, the program will use the "always" predicate, which is always
satisfied, so it will never run off the end of the list.  For this
reason, the error message after the word "preds" is just some question
marks -- it will never be printed.  If the in-roll direction can not
be determined, the predicate itself raises the error.

For the ends, the in-roll status is clear.  Person zero is not an
inroller.  The predicate checks whether the person at the other end
of his line is an inroller, raising an error if not, and returns true
if so, since that inroller is clockwise from person zero.  For person
three, the inroller must be at the other end of the line, which is
counterclockwise, so the predicate either raises an error or returns
false.  Appropriate things are also done with persons four and seven,
to be sure that the inroller is not ambiguous.

To summarize some general properties of predicates:

   (1) Some predicates are "strict" in their examination of other
       people.  They demand that the person being examined be alive
       and facing in a certain direction.  A few predicates are "lax" --
       they only test for the absence of a person facing in the incorrect
       direction.  Always check the documentation of the spefic predicate
       being used.
   (2) Some predicates are applicable on a number of setups, with
       suitable interpretation of what is meant for each setup.  Others
       are only applicable to one setup.  Always check the documentation
       of the spefic predicate being used.
   (3) Some predicates (the more "generic" ones, in general) do their work
       only by returning TRUE or FALSE.  They never raise errors, because
       that would compromise their generality.  Other predicates raise
       errors when appropriate, in order to simplify the database.  Always
       check the documentation of the specific predicate being used.

The existing predicates are listed in the appendix.





                           APPENDIX A -- PREDICATES

always
      applies to any setup.  Returns TRUE in all cases.

select
      applies to any setup, though the meaning of a given selector may
      depend on the setup.  Returns TRUE if the person under test is
      "selected", that is, is one of the people indicated in the "so-and-so"
      selector for this call.

      Any call that uses this or a similar predicate will cause the program
      to query the user for a selector.  Such calls must have "@6" in their
      name in order to have the selector appear in the final text.

      Use of this or similar predicates may raise an error if the application
      of the selector to the person under test is not well defined.  This
      can happen, for example, if the "trailers" selector is given but the
      setup is a grand line or is parallel lines but the "magic" concept
      is in use, or if the "boys" or "girls" selector has been given
      and the "tandem" concept is in use, but the person under test is a
      tandem of a boy and a girl.

unselect
      applies to any setup.  Returns TRUE if the person under test is not
      "selected".  See the description of "select" above.

select_near_select
      applies to 1x2, 1x4, 1x8, 2x4, and qtag setups only.  Returns TRUE if the
      person under test and the "near" person are both selected.  The "near"
      person is the partner of the person under test, assuming they are in
      lines.  If in columns, it is the "tandem partner".  In a quarter-tag, it
      is the "near" person if on the end, or the "near" person in the center
      1x4, the same as it would mean on that 1x4 directly.  Note that this
      person's position is found without reference to anyone's facing
      direction.  For this predicate and others that test the selectedness
      of another person, if that other person is a phantom, an error is raised
      unless the selector is "everyone" or "no one".  See the description
      of "select" above.

select_near_select_or_phantom
      As above, but is satisfied if this person is selected and the other person
      is a phantom or is selected.  This predicate also handles 2x6 and 2x8
      setups.  It returns TRUE only if all 3 or 4 people in the same quadrant as the
      person under test are selected or nonexistent.

select_near_unselect
unselect_near_select
unselect_near_unselect
      apply to 1x2, 1x4, 1x8, and 2x4 setups only, except as noted below.
      These return TRUE if the person under test and the "near" person have
      the indicated combination of selectness and non-selectness.  See the
      descriptions of "select" and "select_near_select" above.

      The predicate "unselect_near_unselect" can handle 2x6 and 2x8 setups also.
      It returns TRUE only if all 3 or 4 people in the same quadrant as the
      person under test are unselected or nonexistent.

select_once_rem_from_select
      applies to 1x4, 1x8, or 2x4 only.  Returns TRUE if the test person and the
      person once-removed from the test person are selected.
      Returns FALSE otherwise.
      See the descriptions of "select" and "select_near_select" above.

conc_from_select
      applies to 1x4 or 1x8 only.  Returns TRUE if the single-concentric
      other person from the person under test (other center or other end,
      as appropriate) is selected.  It does not examine the selectedness
      of the person under test.  Returns FALSE otherwise.  See the
      descriptions of "select" and "select_near_select" above.

grand_conc_from_select
      applies to 1x8 and qtag only.  For a 1x8, returns TRUE if the
      grand-concentric other person from the person under test (other
      very center, other far end, etc.) is selected.  For a 1/4 tag,
      it is only appropriate for the centers, and examines the selectedness
      of the opposite person in the center 1x4.  Actually, it tests
      the selectedness of the global opposite in any 8-person setup.
      It does not examine the selectedness
      of the person under test.  Returns FALSE otherwise.  See the
      descriptions of "select" and "select_near_select" above.

pair_person_select
      applies to 2x4 only.  Returns TRUE if the other person in the
      "quadruple pair" is selected.

select_once_rem_from_unselect
      applies to 1x4, 1x8, or 2x4 only.  Returns TRUE if the person under test is
      selected and the person once-removed from that person is not
      selected.  Returns FALSE otherwise.  See the descriptions of "select"
      and "select_near_select" above.

unselect_once_rem_from_select
      applies to 1x4, 1x8, or 2x4 only.  Returns TRUE if the person under test is
      not selected and the person once-removed from that person is
      selected.  Returns FALSE otherwise.  See the descriptions of "select"
      and "select_near_select" above.

x22_miniwave
      applies to 2x2 only.  Returns TRUE if the lateral partner of the
      person under test is alive and facing the opposite direction.
      Returns FALSE if the lateral partner is a phantom or faces the
      same way or is T-boned.

x22_couple
      applies to 2x2 only.  Returns TRUE if the lateral partner of the
      person under test is alive and facing the same direction.  Returns
      FALSE if the lateral partner is a phantom or faces the opposite way
      or is T-boned.

x22_facing_someone
      applies to 2x2 only.  Returns TRUE if the vertical partner of the
      person under test is alive and facing the opposite direction.
      Returns FALSE if the vertical partner is a phantom or faces the
      same way or is T-boned.  The name may be misleading.  It is intended
      to be used to determine if the person being tested is facing someone
      else's face, but, if the two people are back-to-back, the predicate
      will also be satisfied.  To get the desired effect, you must require
      everyone to be a trailer.

x22_tandem_with_someone
      applies to 2x2 only.  Returns TRUE if the vertical partner of the
      person under test is alive and facing the same direction.
      Returns FALSE if the vertical partner is a phantom or faces the
      opposite way or is T-boned.

columns_someone_in_front
      applies to 3x2 or 4x2 only.  For a 3x2:  Returns TRUE for any of the
      four corner people, or for a center person if the spot in front is
      occupied.  The facing direction of the person in the spot in front
      of the person under test is not checked, nor is the existence of anyone
      in back of the person under test.

      For a 4x2:  Returns TRUE if the spot in front is occupied.  The facing
      direction of the person in the spot in front of the person under test is
      not checked, nor is the existence of anyone in back of the person under
      test.  If the person under test is #1 in the column, this returns FALSE.
      Note that this is fundamentally different from the 3x2 test -- the test
      is applied to any #4 person.

x14_once_rem_miniwave
      applies to 1x4 only.  Returns TRUE if the person once-removed
      from the person under test is alive and facing the opposite direction.
      Returns FALSE if the once-removed person is a phantom or faces the
      same way or is T-boned.

x14_once_rem_couple
      applies to 1x4 only.  Returns TRUE if the person once-removed
      from the person under test is alive and facing the same direction.
      Returns FALSE if the once-removed person is a phantom or faces the
      opposite way or is T-boned.

lines_miniwave
      applies to 1x2, 1x4, 1x6, 1x8, 2x4, 3x4, 2x6, or 2x8 lines only.
      (Or thar in which only line-like people have legal move.)
      Returns TRUE if the lateral partner of the person under test is alive
      and facing the opposite direction.  Returns FALSE if the partner is
      a phantom or faces the same way or is T-boned.

lines_couple
      applies to 1x2, 1x4, 1x6, 1x8, 2x4, 3x4, 2x6, or 2x8 lines only.
      (Or thar in which only line-like people have legal move.)
      Returns TRUE if the lateral partner of the person under test is alive
      and facing the same direction.  Returns FALSE if the partner is
      a phantom or faces the opposite way or is T-boned.

miniwave_side_of_in_3n1_line
couple_side_of_in_3n1_line
miniwave_side_of_out_3n1_line
couple_side_of_out_3n1_line
      apply to 1x4, 2x4, or 1x8 lines only.  An "in" 3&1 line is a line in which the
      person facing the direction opposite from the other 3 is a center.  An
      "out" 3&1 line is one in which the odd person is an end.  These return
      TRUE only if the setup is a 3&1 line of the type indicated, and the
      person under test is in the miniwave or couple side of the line, as
      indicated.  Otherwise they return FALSE.  There must be no phantoms --
      all 4 or 8 people must be present.  If not, FALSE is returned.
      Furthermore, if the setup is a 2x4, the 3&1 lines must be symmetrical
      to each other; otherwise FALSE is returned.  These will malfunction
      if any person is in column orientation.

antitandem_side_of_in_3n1_col
tandem_side_of_in_3n1_col
antitandem_side_of_out_3n1_col
tandem_side_of_out_3n1_col
      apply to 1x4, 2x4, or 1x8 columns only.  These are similar to the above,
      except that everyone must be in columns.  The "antitandem side" is analogous
      to the "couple" side -- it contains the person facing the opposite
      direction from the other 3, and hence the two people on that side are
      either facing each other or are back-to-back.  The "tandem side" has
      the two people facing the same direction, that is, in tandem with each other.

miniwave_side_of_2n1_line
couple_side_of_2n1_line
      apply to 1x6 or 2x3 lines only.  The 3-person lines must be fully occupied
      and form a symmetric setup with each other.  The ends of each line must be
      facing opposite directions, with the center of course facing the same way as
      one of them.  The end that faces the opposite direction as the adjacent center
      is on the "miniwave side".  The end that faces the same direction as the
      adjacent center is on the "couple side".  When evaluating the center, the next
      clockwise person (2x3) or next inward position (1x6) is used as the reference.
      That is, if the center faces the opposite direction from the next clockwise
      end, that center is considered to be on the "miniwave side".  There must be no
      phantoms -- all 6 people must be present.  If not, or if the setup is not
      completely symmetrical, FALSE is returned.  These will malfunction if any
      person is in column orientation.

antitandem_side_of_2n1_col
tandem_side_of_2n1_col
      apply to 1x6 or 2x3 columns only.  These are similar to the above,
      except that everyone must be in columns.  The "antitandem side" is
      analogous to the "couple" side, and the "tandem side" is analogous
      to the "miniwave" side.

cast_normal
      applies to 1x2, 1x4, or 1x6 lines only.
      This is the same as "lines_miniwave", except that it also senses
      whether the "assume normal casts" concept has been given, and
      returns TRUE if so.

cast_pushy
      applies to 1x2, 1x4, or 1x6 lines only.
      This is the same as "lines_couple", except that it also senses
      whether the "assume normal casts" concept has been given, and
      returns FALSE if so.

cast_normal_or_warn
      applies to 1x2, 1x4, or 1x6 lines only.
      This is the same as "cast_normal", except that, if it can't
      decide what kind of cast to use (no assumption, other person
      is phantom, and this person is an end) it issues the warning
      "If in doubt, assume a normal cast." and returns TRUE.

lines_magic_miniwave
      applies to 2x4 lines only.  Returns TRUE if the magic partner
      of the person under test (the person in the opposite corner of
      the same box) is alive and facing the opposite direction.
      Returns FALSE if the magic partner is a phantom or faces the same
      way or is T-boned.

lines_magic_couple
      applies to 2x4 lines only.  Returns TRUE if the magic partner
      of the person under test (the person in the opposite corner of
      the same box) is alive and facing the same direction.
      Returns FALSE if the magic partner is a phantom or faces the
      opposite way or is T-boned.

lines_once_rem_miniwave
      applies to 2x4 lines only.  This is the same as
      "x14_once_rem_miniwave", but used in a 2x4 setup.

lines_once_rem_couple
      applies to 2x4 lines only.  This is the same as
      "x14_once_rem_couple", but used in a 2x4 setup.

lines_tandem
      applies to 2x4 lines only.  Returns TRUE if the vertical partner
      of the person under test is alive and facing the same direction.
      Returns FALSE if the vertical partner is a phantom or faces the
      opposite way or is T-boned.

lines_antitandem
      applies to 2x4 lines only.  Returns TRUE if the vertical partner
      of the person under test is alive and facing the opposite direction.
      Returns FALSE if the vertical partner is a phantom or faces the
      same way or is T-boned.

columns_tandem
      applies to 2x1, 3x1, 4x1, 6x1, 3x2, 4x2, 6x2, or 8x2 columns only.  Returns TRUE
      if the tandem partner of the person under test is alive and facing the
      same direction.  Returns FALSE if that person is a phantom or faces the
      opposite way or is T-boned.  When interrogating the center of a 3x1 or
      3x2 column, uses the person in front.

      Applies to 1/4 tag also.  Treats the center column of 6 as a 2x3 and
      handles it as above.  Returns FALSE for the ends of the center line.

columns_antitandem
      applies to 2x1, 3x1, 4x1, 6x1, 3x2, 4x2, 6x2, or 8x2 columns only.  Returns TRUE
      if the tandem partner of the person under test is alive and facing the
      opposite direction.  Returns FALSE if that person is a phantom or faces
      the same way or is T-boned.  When interrogating the center of a 3x1 or
      3x2 column, uses the person in front.

      Applies to 1/4 tag also.  Treats the center column of 6 as a 2x3 and
      handles it as above.  Returns FALSE for the ends of the center line.

columns_magic_tandem
      applies to 4x2 columns only.  Returns TRUE if the magic tandem
      partner of the person under test (the person in the opposite
      corner of the same box) is alive and facing the same direction.
      Returns FALSE if that person is a phantom or faces the
      opposite way or is T-boned.

columns_magic_antitandem
      applies to 4x2 columns only.  Returns TRUE if the magic tandem
      partner of the person under test (the person in the opposite
      corner of the same box) is alive and facing the opposite direction.
      Returns FALSE if that person is a phantom or faces the same
      way or is T-boned.

columns_once_rem_tandem
      applies to 4x2 columns only.  Returns TRUE if the person
      once-removed from the person under test is alive and facing
      the same direction.  Returns FALSE if that person is a phantom
      or faces the opposite way or is T-boned.

columns_once_rem_antitandem
      applies to 4x2 columns only.  Returns TRUE if the person
      once-removed from the person under test is alive and facing
      the opposite direction.  Returns FALSE if that person is a
      phantom or faces the same way or is T-boned.

columns_couple
      applies to 4x2 columns only.  Returns TRUE if the lateral partner
      of the person under test is alive and facing the same direction.
      Returns FALSE if that person is a phantom or faces the opposite
      way or is T-boned.

columns_miniwave
      applies to 4x2 columns only.  Returns TRUE if the lateral partner
      of the person under test is alive and facing the opposite direction.
      Returns FALSE if that person is a phantom or faces the same way
      or is T-boned.

1x2_beau_or_miniwave
      applies to 1x2 lines or 2x2 non-T-boned boxes only.  Returns TRUE
      if this person is a beau, or else this belle is in a miniwave with
      the other person.  Returns FALSE if this belle is in a couple with
      the other person.  Raises an error if this belle can't tell.

1x2_beau_miniwave_or_warn
      This is the same as "1x2_beau_or_miniwave", except that, if it can't
      decide what to do (no assumption, this person is a belle, and other
      person is a phantom) it issues the warning
      "If in doubt, assume a normal hinge." and returns TRUE.

can_swing_left
      applies to 1x3dmd only.  People are required to be in "normal"
      diamond-like orientation.  That is, the center 2 must be a line
      of 2, and the groups of 3 must be lines.  Returns TRU if the
      person can cast 1/2 to the left, because he has a live person on
      his left hand, and that person is facing in the opposite direction.
      returns FALSE otherwise.

1x4_wheel_and_deal
      applies to 1x4 lines only.  This implements the decision necessary
      to do a wheel and deal.  It is only as strict as necessary to resolve
      ambiguity.  You must use this only when it has already been determined
      that the live people in each couple are facing consistently -- this
      predicate will malfunction if presented with people in waves, for
      example.  Hence, it must only be used in the context
               setup 1x4 2x2 restriction forbidden couples_only
      It returns TRUE if this person is on the beau-side couple of the line.
      If this person is on the belle-side couple, it returns TRUE if the line
      is two-faced, and FALSE if it is one-faced.  It raises an error if there
      are no people on the other side and hence it can't tell.

1x6_wheel_and_deal
      applies to 1x6 or 2x6 lines only.  This implements the decision necessary
      to do a 3X3 wheel and deal.  It is only as strict as necessary to resolve
      ambiguity.  You must use this only when it has already been determined
      that the live people in each triad are facing consistently -- this
      predicate will malfunction if presented with people in waves, for
      example.  Hence, it must only be used in the context
               setup 1x6 2x3 restriction forbidden 3x3couples_only
      It returns TRUE if this person is on the beau-side triad of the line.
      If this person is on the belle-side triad, it returns TRUE if the line
      is two-faced, and FALSE if it is one-faced.  It raises an error if there
      are no people on the other side and hence it can't tell.

1x8_wheel_and_deal
      applies to 1x8 or 2x8 lines only.  This implements the decision necessary
      to do a 4X4 wheel and deal.  It is only as strict as necessary to resolve
      ambiguity.  You must use this only when it has already been determined
      that the live people in each quad are facing consistently -- this
      predicate will malfunction if presented with people in waves, for
      example.  Hence, it must only be used in the context
               setup 1x8 2x4 restriction forbidden 4x4couples_only
      It returns TRUE if this person is on the beau-side quad of the line.
      If this person is on the belle-side quad, it returns TRUE if the line
      is two-faced, and FALSE if it is one-faced.  It raises an error if there
      are no people on the other side and hence it can't tell.

cycle_and_wheel_1
cycle_and_wheel_2
      apply to 1x4 lines only.  These implement the decisions necessary
      to do a cycle and wheel.  They are only as strict as necessary to resolve
      ambiguity.  The first predicate returns TRUE for an extreme left end,
      and FALSE for an extreme right end.  If the subject person is a center, it
      checks the adjacent end, and returns TRUE if that person is a left end,
      and FALSE if a right end.  The second predicate does not handle the case
      of an extreme left end.  Assuming the subject person is a center or a
      right end, it finds the far end.  It returns TRUE if that ends faces
      the same way as the subject, and FALSE if the opposite way.  If these
      predicates can't determine whether this is a "colliding" call, because
      the necessary other end is absent, they assume that the call does not
      collide.

vert1
      applies to 2x2 only.  Returns TRUE if this person is a lead beau or
      trailing belle.  Otherwise returns TRUE if this person's lateral partner
      is alive and facing in the same direction as this person, and FALSE
      if this person's lateral partner is a phantom or is facing in some
      other direction.  This is intended to be used in the implementation
      of vertical tag.

vert2
      applies to 2x2 only.  Returns FALSE if this person is a lead beau or
      trailing belle.  Otherwise returns TRUE if this person's lateral partner
      is alive and facing in the opposite direction as this person, and FALSE
      if this person's lateral partner is a phantom or is facing in any
      other direction than opposite to this person.  This is intended to be
      used in the implementation of vertical tag.

inner_active_lines
      applies to 2x4 lines only.  Returns TRUE if this person is a trailing
      end and FALSE if a leading end.  If this person is a center, returns
      TRUE if this person's partner is a trailer, and FALSE if a leader or
      phantom.

outer_active_lines
      applies to 2x4 lines only.  Returns TRUE if this person is a leading
      end and FALSE if a trailing end.  If this person is a center, returns
      TRUE if this person's partner is a leader, and FALSE if a trailer or
      phantom.

judge_is_right
      applies to 1x4 lines only.  Returns TRUE if the person on the end
      of the line to this person's right is alive and is a "judge" (extreme
      right end of the line), and it is not the case that the other end
      of the line is occupied by another live judge.  Returns FALSE otherwise.

judge_is_left
      applies to 1x4 lines only.  Returns TRUE if the person on the end
      of the line to this person's left is alive and is a "judge" (extreme
      right end of the line), and it is not the case that the other end
      of the line is occupied by another live judge.  Returns FALSE otherwise.

socker_is_right
      applies to 1x4 lines only.  Returns TRUE if the person on the end
      of the line to this person's right is alive and is a "socker" (extreme
      left end of the line), and it is not the case that the other end
      of the line is occupied by another live socker.  Returns FALSE otherwise.

socker_is_left
      applies to 1x4 lines only.  Returns TRUE if the person on the end
      of the line to this person's left is alive and is a "socker" (extreme
      left end of the line), and it is not the case that the other end
      of the line is occupied by another live socker.  Returns FALSE otherwise.

inroller_is_cw
      applies to 2x4 lines only.  Returns TRUE if the end of the line clockwise
      from this person is an inroller (that is, the correct person for in roll
      circulate) and the other end of that line is not.  Returns FALSE if the
      end of the line counterclockwise from this person is an inroller and the
      other end of that line is not.  Otherwise, raises an error.  When phantoms
      are involved, it can still make its determination, as long as there is
      only one way to infer the phantom's facing direction that would be legal.
      It also uses any applicable "assume" information in making its determination
      in the presence of phantoms.

magic_inroller_is_cw
      applies to 2x4 lines only.  Same as inroller_is_cw, but applies to this
      person's magic line.

outroller_is_cw
      applies to 2x4 lines only.  Same as inroller_is_cw, but checks for
      outrollers.

magic_outroller_is_cw
      applies to 2x4 lines only.  Same as outroller_is_cw, but applies to
      this person's magic line.

inroller_is_cw_2x3
magic_inroller_is_cw_2x3
outroller_is_cw_2x3
magic_outroller_is_cw_2x3
      apply to 2x3 lines only.  These are 2x3 versions of the preceding four.

inroller_is_cw_2x6
outroller_is_cw_2x6
inroller_is_cw_2x8
outroller_is_cw_2x8
      apply to 2x6 and 2x8 lines only.  These are 2x6 and 2x8 versions.

outposter_is_cw
      applies to 2x4 lines only.  Returns TRUE if the end of the line clockwise
      from this person is the outposter.  The rules for outposters are different
      from the rules for outrollers:  if both ends of the line are looking out,
      the one on the right (the "judge") is the outposter -- there is no conflict.
      Returns FALSE if the outposter is at the counterclockwise end of the line,
      or there is no live outposter.

outposter_is_ccw
      applies to 2x4 lines only.  Returns TRUE if the end of the line counterclockwise
      from this person is the outposter.  Returns FALSE if the outposter is at the
      clockwise end of the line, or there is no live outposter.

nexttrnglspot_is_tboned
      applies to triangles only.  This is intended to determine which way a
      person should face after doing a triangle circulate.  Returns FALSE if
      this person is a base and will still be a base after circulating,
      independently of the existence or facing direction of the person already
      standing on the target spot.  If this person is a base circulating to an
      apex spot or vice-versa, it demands that there be a person already standing
      on the target spot.  It returns TRUE if that person is facing perpendicular
      to the subject person, and FALSE if that person is facing the same way or
      opposite way.  It returns an error if a triangle circulate is impossible
      for the subject, or if there is no person on the target spot and such a
      person is needed.

nextinttrnglspot_is_tboned
      applies to short6 or bone6 only.  This is similar to "nexttrnglspot_is_tboned",
      but analyzes an interlocked triangle circulate.

next62spot_is_tboned
      applies to short6 only.  This is intended to determine which way a
      person should face after doing the outsides part of a 6x2 acey-deucey.
      Returns FALSE if this person is in the box of 4 (normally, one of the
      diamond points for 6x2 acey-deucey), whether this person will circulate
      to an apex (end of the center line for 6x2 acey-deucey) spot or not.
      If this person is an apex, it demands that there be a person already
      standing on the target spot.  It returns TRUE if that person is facing
      perpendicular to the subject person, and FALSE if that person is facing
      the same way or opposite way.  It returns an error if an outer 6 circulate
      is impossible for the subject (this can only happen if the subject is an
      apex), or if there is no person on the target spot and such a person
      is needed.

next_magic62spot_is_tboned
      applies to short6 only.  This is the same as "next62spot_is_tboned",
      but it uses the "magic 6x2 acey deucey" circulate path in calculating
      the target spot.

next_galaxyspot_is_tboned
      applies to galaxy only.  This returns TRUE if this person is on the
      center box.  If this person is a point, and can galaxy circulate, and
      the spot to which this person would go on a galaxy circulate is occupied,
      returns TRUE if the person on that spot is T-boned to this person and
      FALSE if not.  If this person is a point but can't galaxy circulate
      (faces diectly toward or away from the center of the galaxy), or if
      the spot to which this person would go is unoccupied, and error is
      raised.

column_double_down
      applies to 4x2 columns only.  Returns TRUE if this person is number
      2, 3, or 4 in the column.  If this person is number 1 in the column,
      it returns TRUE if this person's lateral partner is facing in (is
      number 4 in the column) and FALSE if this person's lateral partner
      is a phantom or is facing any other direction.  This is intended to
      be used in the implementation of double down from columns.

boyp
      applies to any setup.  Returns TRUE if this person is an unambiguous boy.
      Returns FALSE if not.  The person's gender is ambiguous if the "as couples"
      or "tandem" concept has caused people of opposite gender to be paired.

girlp
      applies to any setup.  Returns TRUE if this person is an unambiguous girl.
      Returns FALSE if not.  The person's gender is ambiguous if the "as couples"
      or "tandem" concept has caused people of opposite gender to be paired.

roll_is_cw
      applies to any setup.  Returns TRUE if this person's roll direction, from
      the preceding call, is clockwise.  Returns FALSE if the direction is
      counterclockwise, or the person can't roll, or roll direction from the
      preceding call is ill-defined.

roll_is_ccw
      applies to any setup.  Returns TRUE if this person's roll direction, from
      the preceding call, is counterclockwise.  Returns FALSE if the direction
      is clockwise, or the person can't roll, or roll direction from the
      preceding call is ill-defined.

x12_boy_facing_girl
      applies to 2x1 columns only.  Returns TRUE if this person is an
      unambiguous boy, and the other person in the column is alive and an
      unambiguous girl.  Facing directions are not checked.

x12_girl_facing_boy
      applies to 2x1 columns only.  Returns TRUE if this person is an
      unambiguous girl, and the other person in the column is alive and an
      unambiguous boy.  Facing directions are not checked.

x22_boy_facing_girl
      applies to 2x2 boxes only.  Returns TRUE if this person is an
      unambiguous boy, and the person in the box that this person faces
      is alive and an unambiguous girl.  The facing direction of that other
      person is not checked.

x22_girl_facing_boy
      applies to 2x2 boxes only.  Returns TRUE if this person is an
      unambiguous girl, and the person in the box that this person faces
      is alive and an unambiguous boy.  The facing direction of that other
      person is not checked.

dmd_ctrs_rh
      applies to a diamond, single general 1/4-tag, or a short6 or spindle.
      Returns TRUE if the center two people of the diamond or 1/4 tag are in a
      right-handed miniwave.  Returns FALSE if they are in a left-handed
      miniwave.  For a short6 or spindle, tests whether all 2 or 3 miniwaves
      have right or left handedness, respectively.  This predicate is lax in the
      presence of phantoms -- one live person in the center is sufficient
      to make the test.  Raises an error if the centers are all phantoms or
      if they are not in a miniwave or consistent miniwaves.  This predicate is
      unusual in that it does not look specifically at the person under
      test.  It evaluates the setup as a whole.

dmd_ctrs_lh
      Returns the boolean negation of what dmd_ctrs_rh would return.  It raises
      an error under the same circumstances as dmd_ctrs_rh.

trngl_pt_rh
      Applies to a triangle.  This is strict relative to the point.
      Returns TRUE if the triangle point is as if in a right-handed triangle
      (independently of the existence or facing direction of the base people).
      Returns FALSE if the triangle point is as if in a left-handed triangle.
      Raises an error if the point is a phantom or is facing toward or
      away from the base.  This predicate is unusual in that it does not
      look specifically at the person under test.  It evaluates the setup
      as a whole.

q_tag_front
      Applies only to a qtag or bone in which the center people are in some
      kind of line.  (Remember that we use the term "qtag" independently of
      actual facing direction -- hence it applies to 3/4 tags, 1/4-lines,
      diamonds, etc.  Part of the purpose of this predicate is to
      distinguish among these cases.)  Hence you must use this only with a
      starting setup of "qtag" or "bone", or with a starting setup of "pqtag"
      or "pbone" as long as it doesn't specify a legal move for persons
      2, 3, 6, or 7.

      This is strict relative to the people it tests.  For a person in the
      center line, this returns TRUE if the subject's partner is alive and
      facing in the opposite direction, and FALSE otherwise.  That is, it
      performs a strict test for the subject being in a miniwave, which
      presumably means (for a qtag) that the setup is a 1/4-tag or diamonds
      as opposed to a 1/4-line or interlocked diamonds.  When the subject
      is in the center, it is completely oblivious to the existence or
      facing direction of the outsides.  Hence, it can not distinguish a
      1/4 tag from a 3/4 tag.

      For a person on the outside, this returns TRUE only if the two people
      in the center line who are closest to the subject are both alive and
      in a miniwave with each other, and the end of that line is facing the
      subject.  For a qtag, this means that the two centers in the subject's
      single 1/4-tag or diamond are in a miniwave with each other, and the
      end person of those two is facing the subject (not necessarily the
      subject's face) on a jay.  For a bone, it tests the apex of the
      subject's triangle.  That apex must be facing sort of toward the
      subject.  It returns FALSE otherwise.  For example, for an
      outside beau in a 1/4-tag or 1/4-line, it returns TRUE only if the
      setup is a left-handed 1/4-tag, and FALSE if it is right-handed or is
      a 1/4-line.  It only examines the two center people close to the
      subject in making this determination.  When applying the test to an
      outside, the subject's own facing direction is not important.
      For example, in a right-hand 3/4-tag, this will return TRUE for an
      outside beau and FALSE for an outside belle.  In diamonds of any
      consistent handedness, this returns TRUE for a trailing point and
      FALSE for a leading point.  For facing diamonds it does the opposite.

q_tag_back
      This is just like "q_tag_front" except that, for the outsides, it
      returns TRUE only if the two people in the center line who are closest
      to the subject are both alive and in a miniwave with each other, and
      the end of that line is facing the away from subject.  It returns
      FALSE otherwise.  For example, for an outside beau in a 1/4-tag or
      1/4-line, it returns TRUE only if the setup is a right-handed 1/4-tag,
      and FALSE if it is left-handed or is a 1/4-line.

q_line_front
      This is just like "q_tag_front" except that it tests for a 1/4-line
      or interlocked diamonds, or a bone with couples (presumably a two-faced
      line) in the center.  For a person in the center line, this returns
      TRUE if the subject's partner is alive and facing in the same
      direction, and FALSE otherwise.  That is, it performs a strict test for
      the subject being in a couple, which presumably means the setup is a
      1/4-line or interlocked diamonds as opposed to a 1/4-tag or plain
      diamonds.  For a person on the outside, this returns TRUE only if the
      two people in the center line who are closest to the subject are both
      alive and in a couple with each other, and the end of that line is
      facing the subject.  It returns FALSE otherwise.  For example, for an
      outside beau in a 1/4-tag or 1/4-line, it returns TRUE only if the
      setup is a left-handed 1/4-line, and FALSE if it is right-handed or
      is a 1/4-tag.  In interlocked diamonds of any consistent handedness,
      this returns TRUE for a trailing point and FALSE for a leading point.
      For facing interlocked diamonds it does the opposite.

q_line_back
      This is just like "q_line_front" except that, for the outsides, it
      returns TRUE only if the two people in the center line who are closest
      to the subject are both alive and in a couple with each other, and
      the end of that line is facing the away from subject.  It returns
      FALSE otherwise.  For example, for an outside beau in a 1/4-tag or
      1/4-line, it returns TRUE only if the setup is a right-handed 1/4-line,
      and FALSE if it is left-handed or is a 1/4-tag.

zero_cw_people
one_cw_person
two_cw_people
three_cw_people
      Applies to 2x3, 2x4, 2x6, or 2x8.  Returns TRUE if the number of people in the
      1xN line/column of the person under test, who are strictly clockwise from that
      person and are live, is exactly equal to the specified number.  Returns
      FALSE otherwise.



                           APPENDIX B -- RESTRICTIONS

A restriction is given only for calls defined by array, either with or without
predicates.  It appears after the "setup" keyword and the starting and ending
setups, and the "rotation" keyword, if any.  Only one restriction may be given
with a "setup" specification.

A restriction consists of the word "restriction", an optional action keyword,
and the restriction name.  The action keyword tells what is to be done if the
restriction is violated, as follows:
   no keyword -- the warning "do your part" is given, and the call is not
               considered acceptable when searching for resolves, "pick
               random call", etc.
   "resolve_ok" -- as above, but the call is still acceptable for resolves.
   "unusual" -- the warning "This is an unusual setup for this call" is given,
               and the call is not considered acceptable when searching for
               resolves.  This should be used to alert the user of the program
               that this may not be an appropriate use of the call, but that
               telling the dancers to do their own part isn't the right fix.
   "controversial" --     the warning "This may be controversial" is given.
   "serious_violation" -- the warning "This appears to be a serious violation of the definition" is given.
   "forbidden" -- an error is given.  The call is simply not permitted.

These restrictions are "overloaded" -- their meaning depends on the starting setup.
There are a number of internal ones not shown here.  See the file ~/sd/restrictions.txt for details.

   alwaysfail,                      any setup - this always fails (presumably to give
                                    some warning)
   wave_only,                       1x2 - a miniwave; 1x3-1x16 - [grand] wave; 2x3 - two "waves" -- people not in tandem with each other;
                                       2x4/3x4/2x6/2x8 - consistent waves the long way; 4x4 - consistent waves either way, but not T-boned;
                                       2x2 - real RH or LH box
                                       3x2/4x2/5x2/6x2/8x2 - columns
                                       qtag/pqtag - wave in center
                                       ptpd/pptpd - miniwaves in centers of each diamond
                                       pshort6 (note that this means the short6 is
                                          laterally oriented) - centers tandem in wave
                                       bone6 - ends tandem in wave
                                       dmd, trngl - people are paired in miniwaves.
                                          For diamonds, this applies just to the centers.
                                          For triangles, it applies just to the base.
                                       thar/crosswave - same handedness waves
   wave_unless_say_2faced,
   all_facing_same,              /* 1x2/2x1/2x2/2x3/3x2/2x4/4x2/1x4/4x1/1x6/6x1/1x8/8x1 - all people in the setup facing the same way */
   1fl_only,                     /* 1x3/1x4/1x6/1x8 - a 1FL, that is, all 3/4/6/8 facing same; 2x3/2x4 - individual 1FL's
                                       thar - crossed 2FL's of opposite handedness, ready to move along
   2fl_only,                        1x2 - a couple; 1x4 - a 2FL; 2x4/3x4 - 2FL's;
                                    1x8 - a grand 2FL; 4x1 - single DPT or single CDPT;
                                    qtag - 2FL in center; 2x2 - "1-faced" box;
                                    4x4 - consistent 2FL's; 4x2 columns - a DPT or CDPT;
   3x3_2fl_only,                 /* 1x6/2x6 - "2-faced lines" of 3 facing one way, 3 the other */
   4x4_2fl_only,                 /* 1x8/2x8 - "2-faced lines" of 4 facing one way, 4 the other */
   leads_only,                   /* 2x2 - all people are leads, and not T-boned */
   trailers_only,                /* 2x2 - all people are trailers, and not T-boned */
   couples_only,                    1x2/1x4/1x8, 2x4 (lines/cols), 2x2,
                                       qtag, bone, trngl - people are paired
                                       in genuine couples, not miniwaves.
                                       For qtags, and bones, this applies
                                       just to the centers.  For triangles, it applies
                                       just to the base.
   miniwaves,                       1x2/1x4/1x6/1x8, 2x4 (lines/cols), dmd, 2x2,
                                       qtag, bone, ptpd, trngl - people are paired
                                       in miniwaves of various handedness.
                                       For diamonds, qtags, and bones, this applies
                                       just to the centers.  For triangles, it applies
                                       just to the base.
                                       So this includes waves, inverted lines, columns,
                                       magic columns, diamonds, wave-based triangles...
   3x3couples_only,                 1x3/1x6/2x3/2x6/1x12 lines - each group of 3 people are
                                    facing the same way and are line-like,
   4x4couples_only,                 1x4/1x8/2x4/2x8/1x16 lines - each group of 4 people are
                                    facing the same way and are line-like,
   awkward_centers,                 1x2, 1x4, 1x6, 2x4, or 1x8 - centers must not have
                                    left hands with each other
   diamond_like,                    dmd, qtag or ptpd - points look sideways, and centers
                                    are line-like
   qtag_like,                       dmd, qtag or ptpd - points look in or out, and centers
                                    are line-like
   pu_qtag_like,                    dmd/qtag/ptpd/3dmd/4dmd - points look sideways,
                                    and centers are column-like
   nice_diamonds,                   dmd, qtag or ptpd - diamond(s) have consistent handedness,
                                    assuming they are diamonds and not qtags
   in_or_out,                       2x2/2x4 - all facing in or all facing out of box of 4.
                                    4x2/4x1/2x1 - [single] 8 chain or trade by
                                    (one or the other; we don't care which)
                                    The 2x2/2x4/4x2 versions of these require that people
                                    not be T-boned -- they must face in or out as couples.
                                    To allow each person to be independent, use the qualifier
                                    (but not restriction) "independent_in_or_out".
   magic_only,                      3x2 or 4x2 - magic column; 2x4 - inverted lines;
                                    1x4 - single inverted line; 2x2 - inverted box
                                    thar/crosswave - two waves of opposite handedness
   explodable,                      1x4 - centers facing the same way
   reverse_explodable,              1x4 - ends facing the same way
   peelable_box,                    2x2, 3x2, 4x2, 5x2, 6x2 or 8x2 - all people in each
                                    column are facing same way
   ends_are_peelable,               2x4 - ends are a box with each person in genuine tandem
   siamese_in_quad                  Any 2x4 or 4x2 - the people in each quadrant, if they
                                    exist, face the same way.  C1 phantom - the same.
   not_tboned,                      2x2 - people must not be T-boned
   opposite_sex,                    2x1 - people must be opposite sexes facing each other
   quarterbox_or_col,               4x2/3x2 - acceptable setup for "quick step" or
                                    "triple cross".  This ignores any people in line-like
                                    orientation.
   quarterbox_or_magic_col,         4x2/3x2 - acceptable setup for "magic quick step" or
                                    "make magic".  This ignores any people in line-like
                                    orientation.

                           APPENDIX C -- QUALIFIERS

   none,                            any setup - this always passes (presumably to 
                                       use some special indicator like "num" or "live".
   wave_only,                       Same as corresponding restriction, above.
                                       This can take the "live" and/or "left" or "right"
                                       mofifiers.  If "right" or "left", it means this:
                                          1x2-1x16 - R/L means handedness
                                          2x4/3x4/2x6/2x8 - R/L means handedness

                                          2x2 - real R/L box;
                                          4x4 - consistent R/L waves either way, but not T-boned;

                                          3x2/4x2/5x2/6x2/8x2 - R/L columns;
                                          qtag/pqtag - right wave in center
                                          ptpd/pptpd - right miniwaves in centers of each diamond
                                          dmd, trngl - people are paired in right miniwaves.
                                             For diamonds, this applies just to the centers.
                                             For triangles, it applies just to the base.
                                          thar/crosswave - R/L waves

                                             pshort6 (note that this means the short6 is
                                                laterally oriented) - centers tandem in wave
                                                of OPPOSITE handedness (sorry)
                                             bone6 - ends tandem in wave of correct handedness

   all_facing_same,                 Same as corresponding restriction, above.
   1fl_only,                        Same as corresponding restriction, above.
   2fl_only,                        Same as corresponding restriction, above.
                                       This can take the "live" and/or "left/right/in/out"
                                       mofifiers:

                                       1x4/2x4/3x4 - R/L gives handedness of 2FL
                                       qtag - applies to center 2FL
                                       4x2 - I/O means starting/completed DPT

   3x3_2fl_only,                    Same as corresponding restriction, above.
   4x4_2fl_only,                    Same as corresponding restriction, above.
   couples_only,                    Same as corresponding restriction, above.
   3x3couples_only,                 Same as corresponding restriction, above.
   4x4couples_only,                 Same as corresponding restriction, above.
   magic_only,                      Same as corresponding restriction, above.
                                       This can take the "live" and/or "left/right/in/out"
                                       mofifiers:
                                          2x4 - I/O refers to centers
                                          4x2 - R/L refers to ends
                                          crosswave - R/L refers to handedness of
                                             outer disconnected wave.
   diamond_like,                    Same as corresponding restriction, above.
   qtag_like,                       Same as corresponding restriction, above.
   pu_qtag_like,                    Same as corresponding restriction, above.  Right/left refer
                                       to points.  The "live" modifier demands that there be
                                       be at least one definitive person to test right or left.
                                       It does not demand all people live.  It is meaningless
                                       if left or right isn't specified.
   in_or_out,                       Same as corresponding restriction, above.
                                       This can take the "live" and/or "in" or "out" mofifiers
                                       to specify, for example, an 8 chain or a trade by.
   independent_in_or_out,           2x2/2x4/4x2 - like "in_or_out", but does not require
                                    people to be coupled.  They can be arbitrarily T-boned,
                                    and it just tests that each person is a leader or trailer
                                    in his 2x2.  This should be used with the "in" or "out"
                                    mofifier, of course.
   miniwaves,                       Same as corresponding restriction, above.
   not_miniwaves,                   True if all people are live, and the miniwaves restriction,
                                    above, FAILS.
   gen_n_4_tag                      dmd/qtag/3dmd/4dmd - this is a "general 1/4 tag",
                                    in which the ends could individually be facing either
                                    in or out, and the centers form some kind of line.
                                    Modifier "in" or "out" applies to ends, and tests for
                                    1/4 tag or 3/4 tag, respectively.  If "in" or "out"
                                    is given, the "live" modifier makes it demand at least
                                    one live end, so that the in/out test is definitive.
                                    It does not test for all live people the way it does
                                    in some other cases.
   dmd_same_point,                  dmd - centers would circulate to same point
   dmd_facing,                      dmd - diamond is fully occupied and fully facing
   true_Z_cw, true_Z_ccw,           2x3, 3x4, 2x6, 4x6, 3x8 - each 2x3 setup is a genuine Z.
                                    In a 2x3 setup it also demands that the shear direction
                                    be as shown.  In the larger setups either qualifier
                                    passes the test for any shear direction.
   lateral_columns_empty,           3x4, 4x4, 4x6, 3x8 - everyone is oriented consistently,
                                    4 (or 8) wide and however many deep.  Within each 4-wide
                                    and 2-or-3-deep subsetup, either the center two columns,
                                    or two columns that are once removed from each other,
                                    are unoccupied. */
   ctrwv_end2fl,                    crosswave - center line is wave, end line is 2fl.
                                       1x6 - these are "out 2&1 lines" with the outer pairs
                                       in couples.  1x8 - the outer pairs are couples and the
                                       inner pairs are miniwaves.
   ctr2fl_endwv,                    crosswave - center line is 2fl, end line is wave.
                                       1x6 - these are "out 2&1 lines" with the outer pairs
                                       in miniwaves.  1x8 - the outer pairs are miniwaves
                                       and the inner pairs are couples.
   split_dixie,                     2x2 - invoked with "split" for dixie style
   not_split_dixie,                 2x2 - invoked without "split" for dixie style
   8_chain,                         4x2/4x1/2x1 - [single] 8 chain
   trade_by,                        4x2/4x1/2x1 - [single] trade by
   qtag_mwv,                        qtag only -- EVERYONE is in a miniwave of consistent
                                    handedness.
   qtag_mag_mwv,                    qtag only -- EVERYONE is in a miniwave, but the centers
                                    have opposite handedness to the ends.  "Right/left"
                                    applies to the ends.
   dmd_ctrs_mwv,                    dmd, trngl, qtag, ptpd, short6, bone6, spindle, 1x4, 2x3 -
                                    the centers or base (2, 4, or 6 of them) are consistently
                                    in consistent-handed miniwaves; other people not checked
                                    at all.
                                    For bone6, it checks triangle base, i.e. outsides.
                                    For 2x3, it checks center 2.
                                    Use this with "right/left" keyword.

                  ** We don't list trngl4 in the above two, because it doesn't obey the all-larger-setups rule, that is,
                     it hasn't been implemented for bone and rigger.  (and how about c1phantoms?)
                  There is another potential problem -- these are used to examine the base of individual triangles,
                     but the bone6 and short6 versions demand consistent handedness.  We would like to have tests
                     specifically aimed at individual triangles, even if they are unsymmetrical.  (The way "miniwaves"
                     works -- when it tests larger setups like boxes, it passes if the boxes are inverted, because all
                     we are asking about is the individual miniwaves.  Now this test, applied to spindles and short6's
                     is specifically required to demand consistent handedness.  Therefore, we need additional names
                     that check individual triangles.  Of course, if they see an unsymmetrical bone6, both the RH and
                     LH versions will pass, so that splitting will take place.


   ctr_pts_rh,                      qtag, 2x1dmd, hrglass, bone6 - the "points of the centers"
                                    (ends of the center line of 4 in qtag or 2x1dmd;
                                    points of the center diamond in hrglass) are in a
                                    right-handed line or diamond, from their own perspective.
                                    The direction of the center 2 people is immaterial.
                                    For bone6, it tests the center 2.
   ctr_pts_lh,                      qtag, 2x1dmd, hrglass, bone6 - as above, but left-handed.
   dmd_ctrs_1f,                     dmd, 1x4 - the centers (2 of them) are in a couple
   said_triangle,                   short6/pshort6 - caller said the word "triangle"
   didnt_say_triangle               short6/pshort6 - caller didn't say the word "triangle"
   occupied_as_h                    3x4/4x3 - live bodies are (a subset of) an "H"
   occupied_as_qtag                 3x4/4x3 - live bodies are (a subset of) a qtag
   occupied_as_3x1tgl               3x4/4x3/2x6/6x2/2x3/3x2/qtag - live bodies are 3x1
                                    triangles of some sort.  Symmetric only.
   line_ends_looking_out            2x4 T-bone - the ends must be line-like and must be leads,
                                    and at least one center must be column-like.
   col_ends_looking_in              2x4 columns - the ends are #4
   ripple stuff .......
   people_1_and_5_real           /* 1x8 (or any applicable setup) people #1 and #5 are real */
   centers_sel                   /* 1x4/2x4/qtag - the centers are selected and the ends are not. */
   ends_sel                      /* 1x4/2x4/qtag - the ends are selected and the centers are not. */
   all_sel                       /* 1x1/1x2 - everyone in the setup is selected */
   none_sel                      /* 1x1/1x2 - no one in the setup is selected */


                           APPENDIX D -- TOP LEVEL FLAGS

step_to_wave
rear_back_from_r_wave
rear_back_from_qtag
dont_use_in_resolve
neednumber
need_two_numbers
need_three_numbers
need_four_numbers
sequence_starter
split_like_square_thru
split_like_dixie_style

parallel_conc_end
      In general, this means to elongate the setup opposite what it would
      "usually" be.

      For 1x4 -> 2x2 calls, the "usual" result is opposite
      elongation, as in having outsides recycle.  The flag is set on "explode"
      so that they will keep same elongation.

      For 1x2 -> 1x2 calls the "usual" result is same orientation.  This flag
      says to re-orient.  Note that  we practically never use this.  The *ONLY*
      time it is used is when the 1x2 is all phantoms and we want to figure out
      where they went.  This flag is set for "counter rotate" (it needs to be
      set in any case for its effect on 2x2 -> 2x2 counter rotate, by making this
      convention we make it unnecessary to make the flag per-array, we may someday
      have to make it per-array anyway) so that having a 1x2 of phantoms counter
      rotate, they will go to opposite orientation.

      For 2x2 -> 2x2 calls, the default is to go to same spots.  The flag says
      to change spots.



      I hope that the description above is consistent with the description below.
      Only the 1x2 -> 1x2 behavior was added.



      For any by-array definition that this call has that explicitly indicates
      a 1x4, diamond, or 2x2 starting setup and a 2x2 final setup, the elongation
      of the final 2x2 is set opposite to what it would be by default.  This flag
      will be meaningful if one chooses something like "ends counter rotate" or
      if a call is defined concentrically and this is the outsides' part and no
      overriding invocation flag is used.  This flag will NOT be used if one
      chooses something like "concentric counter rotate" -- the concentric rule
      always takes precedence if the "concentric" or "checkpoint" concept is used.

      By default, a call that begins in a 1x4 or diamond and finishes in a
      2x2 will, if the ends are told to do it without benefit of the word
      "concentric", finish perpendicular to the original 1x4 or diamond, so
      this flag forces those people to finish parallel to the original 1x4
      or diamond (hence the name of the flag).  By default, a call that
      begins in a 2x2 and finishes in a 2x2 will work to the same spots, so
      this flag forces those people to finish on the opposite spots.

      Note that this does NOT apply to calls that are defined sequentially or
      concentrically.  The invocation flags such as "conc_force_otherway"
      should be used in that case.  Also, this only applies to calls that
      are explicitly defined as going from a 1x4/diamond/2x2 to a 2x2.  If
      a 1-person or 2-person definition is used and a 4-person setup is
      automatically divided into smaller setups, the people will finish
      near the person with whom they worked in the smaller setup.  Hence,
      even if the call "star thru" had this flag (which it doesn't), if
      "ends star thru" were called from facing lines the people would stay
      on the same spots.

      This flag is complicated.  Use with care.  Test with care.

left_means_touch_or_check
      This is used for calls like "spin the top" which call for stepping to
      a right-handed wave if necessary, but are mirror-symmetric once in a
      wave.  If the "left" modifier is used, the dancers will step to a
      left-handed wave and do the call.  If already in a left-handed wave,
      the "left" modifier is superfluous.  If the "left" modifier is given
      when the dancers are in a right-handed wave, it is an error.  That is,
      from a left-handed wave you may say "spin the top" or LEFT spin the top",
      but from a right-handed wave you may only say "spin the top".

take_right_hands
is_tag_call
is_scoot_call
is_star_call
split_large_setups
fudge_to_q_tag
visible_fractions
first_part_visible
finish_means_skip_first_part
can_be_fan_or_yoyo

no_cutting_through
      This applies only to by-array call definitions for 2x2 starting setups.
      It is used for calls like "circulate" to indicate that they are illegal
      from elongated setups if any dancers are facing into the 2x2 along the
      long axis.  Hence, it is illegal to have the ends circulate when the
      setup is a starting DPT, but it is legal from a completed DPT or from
      any lines.  This will be checked whether the command to have the ends
      do the call is explicit, as in "ENDS circulate", or implicit, as in
      "acey deucey" or "team up".

      If the "concentric" concept is given, this test is not applied, since
      any call is legal.  We enforce the law; we do not enforce good taste.

      The error message that is given indicates that the people would "cut
      through the middle" -- the program doesn't actually check whether
      they do.  It simply checks for suspicious starting positions.

      Two-person definitions do not need this flag -- the two-person setup is
      always checked for division along the separation axis.  Hence, "ends
      star thru" and "ends pass thru" are illegal from a starting DPT, even
      though this flag does not appear.

no_elongation_allowed
      This is like the "no_cutting_through" flag, except that it does not
      check anyone's facing direction -- it simply makes the 2x2 call illegal
      if called from an elongated setup.  Hence "ends flutterwheel" is illegal
      from a starting DPT or from facing lines, though "concentric flutterwheel"
      is of course legal.


12_16_matrix_means_split
imprecise_rotation
diamond_is_legal
reverse_means_mirror
left_means_mirror
funny_is_inherited
intlk_is_inherited
magic_is_inherited
grand_is_inherited
12_matrix_is_inherited
16_matrix_is_inherited
cross_is_inherited
single_is_inherited
1x2_is_inherited
2x1_is_inherited
2x2_is_inherited
1x3_is_inherited
3x1_is_inherited
3x3_is_inherited
4x4_is_inherited
singlefile_is_inherited



                           APPENDIX E -- INVOCATION FLAGS

These will be documented more methodically someday.

These flags are used in the brackets after each call that is invoked in
a sequential or concentric definition.  Note: the brackets are mandatory,
even if nothing is within them.  Note: some of these flags are only meaningful
for sequential definitions, or for concentric definitions.

conc_demand_lines
conc_demand_columns

conc_force_lines
conc_force_columns
      If this call is invoked in a concentric definition, and these people
      finish on the outside in a 2x2, each person's finishing position will
      be such as to give line-like or column-like elongation.  The final
      centers need not be in a 2x2 for this to operate, so the resulting
      setup need not be a 2x4.  If the final outsides are T-boned to each
      other, they will make their line-like/column-like determinations
      independently, possibly resulting in a messy 16-matrix.  This flag
      overrides any defaults or "parallel_conc_end" behavior specified
      in the invoked call itself.

conc_force_spots
conc_force_otherway
      If this call is invoked in a concentric definition, and these people
      finish on the outside in a 2x2, the finishing position will be such
      that the elongation of the resulting setup will be the same, or
      opposite, respectively, relative to the elongation of the original
      setup.  (Note that, if the invocation is cross concentric, the original
      elongation was determined by different people.)  The final centers need
      not be in a 2x2 for this to operate, so the resulting setup need not be
      a 2x4.  The original outsides need not have been in a 2x2 -- if they
      were in a 1x4 or a diamond their elongation is evaluated anyway.  This
      flag overrides any defaults or "parallel_conc_end" behavior specified
      in the invoked call itself.


================================================================================
More stuff related to this, will work it into nice form someday:

For a call that is defined concentrically:
   The first subcall specifier gives the call to be executed by the centers.
   The second subcall specifier gives the call to be executed by the ends.
For a call that is defined cross concentrically:
   The first subcall specifier gives the call to be executed by the
      original ends, finishing in the center.
   The second subcall specifier gives the call to be executed by the
      original centers, finishing on the outside.

The meaning of the "demand_lines" and "demand_columns" flags for the call
executed by the people who START ON THE OUTSIDE (for "concentric" this is
the second subcall specifier; for "cross concentric" it is the first) is
as follows:
   If the original ends are in a 2x2, their elongation is checked to
   determine whether they are on line-like or column-like spots,
   independently of the centers' formation.  So, for example, in a
   quarter-tag, the ends are in a 2x2 and satisfy the "demand_columns"
   criterion.  In a "trim a web" setup, they are also in column-like
   spots.  In diamonds, they are in line-like spots.  If the original
   ends are not in a 2x2 and a "demand" flag is set, no checking is done.

The meaning of the "demand_lines" and "demand_columns" flags for the call
executed by the people who START IN THE CENTER (for "concentric" this is
the first subcall specifier; for "cross concentric" it is the second) is
as follows:
   If the original centers are in a 2x2, the elongation of the outsides
   is measured relative to the facing direction of the centers.  If
   "demand_lines" is given, the outsides' elongation is required to be lateral
   to the centers.  If "demand_columns" is given, the outsides' elongation
   is required to forward or back relative to the centers. If the outsides
   are in a 2x2 (so the overall setup is a 2x4) these flags test whether the
   centers are actually in their part of lines or columns.  If the outsides
   are not in a 2x2, their elongation is tested anyway.  So, from a "rigger"
   setup, the "demand_lines" flag tests whether the centers find the wings
   lateral to them.

Either flag will cause an error is the setup is a galaxy (elongation can't
be determined), or if the centers are T-boned (elongation isn't consistent
for all 4 centers.)  If the original centers are not in a 2x2 and one of these
flags is set, no checking is done.

================================================================================

***** Check all this in the code, now that there is documentation to check against!

conc_concentric_rules
      If this call is invoked in a concentric definition, and these people
      finish on the outside in a 2x2, the finishing position will be as though
      the caller had said "concentric" or "cross concentric".  That is,
      they will use the "lines-to-lines/columns-to-columns" rule or the
      "opposite elongation" rule as appropriate.  This flag overrides any
      defaults or "parallel_conc_end" behavior specified in the invoked call
      itself.



suppress_elongation_warnings
      For the ends' part of a concentrically defined call, this says to suppress
      printing warnings about this not being done concentrically and hence the
      lines-to-lines and opposite elongation rules are not being used.  Instead,
      the program uses its best guess (guided by such things as "parallel_conc_end"
      and the various "demand" and "force" flags) as to where to put people.
      When the program does this, it often prints a warning.  This flag suppresses
      that warning.
      For the *CENTERS'* part of a concentrically defined call, this says to
      suppress any error (not warning) about the ends being too far apart, in
      ths event that this call is done with the "invert" concept.  Note that this
      is a completely different sort of thing, and this flag is being overloaded.
      The centers' part of acey deucey is invoked with this flag, which means that
      "invert acey deucey" is legal from lines.  We consider "ends trade" from lines
      to be unesthetic, but it is sometimes used as part of "invert acey deucey".
or_anycall
mandatory_anycall
repeat_n
repeat_nm1
repeat_n_alternate
endscando
allow_forced_mod
roll_transparent
must_be_tag_call
must_be_scoot_call
cpls_unless_single
inherit_diamond
inherit_reverse
inherit_left
inherit_funny
inherit_intlk
inherit_magic
inherit_grand
inherit_12_matrix
inherit_16_matrix
inherit_cross
inherit_single





                           APPENDIX F -- ESCAPE CODES IN CALL NAMES

                  These are not in any particularly logical order.

@0        - for call with mandatory substitution (e.g. "clover and ...") put
                      subcall here.
@1        - put optional subcall here.
@2 ... @3 - text to remove and replace with subcall.  Like @4 ... @5 along with @1.
@4 ... @5 - text to remove if optional substitution has been made.
@6        - put selector here.
@7 ... @8 - text to ADD if optional substitution has been made, as in the "ing"
                  for "fascinating <anything>".
@9        - put number here.
@a        - put number here, expressed as N/4, but say "full" instead of 4/4.
@b        - put number here, expressed as N/4.
@B        - put number here, expressed as N/4 written in words: "quarter", "half", "three quarter"
@D        - like "B", but only odd numbers are allowed.
@c ... @d - no longer used
@h        - put direction here.
@e ... @f - text to change to "left" if this call has "left" modifier.
@j ... @l - text to add if this call has "cross" modifier.  Presumably
                  has the word "cross" in it.
@C          equivalent to "@jcross @l".
@J ... @L - text to add if this call has "magic" modifier.  Presumably
                  has the word "magic" in it.
@M          equivalent to "@Jmagic @L".
@E ... @F - text to add if this call has "interlocked" modifier.  Presumably
                  has the word "interlocked" in it.
@I          equivalent to "@Einterlocked @F".
@k        - put selector here, but use singular name, as in "beau tie".
@m        - put mandatory secondary call substitution here.
@n ... @o - text to ADD if optional secondary substitution has been made,
                  as in the "ing" for "fascinating <anything>".
@p ... @q - text to remove if optional secondary substitution has been made.
@r ... @s - text to remove and replace with secondary subcall.  Like @p ... @q along with @t.
@t        - put optional secondary call substitution here.
@u        - put ordinal number (1st, 2nd, ...) here.
@v        - put tagging call here.
@w        - put tagging call here.
@x        - put tagging call here.
@y        - put tagging call here.
@N        - put circulate call here.
@O ... @P - text to remove if invoked as a circulate-type call
