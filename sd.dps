DIALOG

APPLICATION_INTERFACE sd_dialog

   task$quit := NULL:
      COMP => <RETURN>
      END

   task$abort := NULL:
      COMP => <RETURN>
      END

   task$undo := NULL:
      COMP => <RETURN>
      END

   task$create_outfile := NULL:
      COMP => <RETURN>
      END

   task$create_comment := NULL:
      COMP => <RETURN>
      END

   task$search_anything := NULL:
      COMP => <RETURN>
      END

   task$search_nice_setup := NULL:
      COMP => <RETURN>
      END

   task$search_resolve := NULL:
      COMP => <RETURN>
      END

   task$search_reconcile := NULL:
      COMP => <RETURN>
      END

{
   neglect_task := NULL:
      COMP => <RETURN>
      END
}

   save_pic_task := NULL:
      COMP => <RETURN>
      END

   allow_modification_task := NULL:
      COMP => <RETURN>
      END

   allow_all_concept_task := NULL:
      COMP => <RETURN>
      END

   getout_task := NULL:
      COMP => <RETURN> ;
      END

   getout_header_task := STRING:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   no_getout_header_task := NULL:
      COMP => <RETURN> ;
      END

   same_getout_header_task := NULL:
      COMP => <RETURN> ;
      END

   getout_abort_task := NULL:
      COMP => <RETURN> ;
      END

   outfile_task := STRING:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   outfile_abort_task := NULL:
      COMP => <RETURN> ;
      END

   comment_task := STRING:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   comment_abort_task := NULL:
      COMP => <RETURN> ;
      END

{
   neglect_popup_task := STRING:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END
}

   modifier_title_task := MSG:
      END

   modifier_select_task := NULL:
      COMP => <RETURN> ;
      END

   popup_abort_task := NULL:
      COMP => <RETURN> ;
      END

   abort_confirm_select_task := NULL:
      COMP => <RETURN> ;
      END

   abort_confirm_abort_task := NULL:
      COMP => <RETURN> ;
      END

   search_title_task := MSG:
      END

   main_title_task := MSG:
      END

   task$search$another := NULL:
      COMP => <RETURN> ;
      END

   task$search$previous := NULL:
      COMP => <RETURN> ;
      END

   task$search$next := NULL:
      COMP => <RETURN> ;
      END

   task$search$accept := NULL:
      COMP => <RETURN> ;
      END

   task$search$abort := NULL:
      COMP => <RETURN> ;
      END

   task$search$incdepth := NULL:
      COMP => <RETURN> ;
      END

   task$search$decdepth := NULL:
      COMP => <RETURN> ;
      END

   display := MSG:
      END

   { ********** WARNING!!!!!  this list must be keyed to the enumeration given
      in sd.h in the definition of "start_select_kind". }

   start_choices := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      CHOICES = (start$h1p2p start$s1p2p start$hstart start$sstart start$as_they_are)
      END

   { ********** WARNING!!!!!  this list must be keyed to the tables
      "selector_names" and "selector_singular" in sdutil.c and to
      the definition of "selector_kind" in sd.h . }

   task$selector_menu := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      CHOICES = (
         selector_menu$boys
         selector_menu$girls
         selector_menu$heads
         selector_menu$sides
         selector_menu$headcorners
         selector_menu$sidecorners
         selector_menu$headboys
         selector_menu$headgirls
         selector_menu$sideboys
         selector_menu$sidegirls
         selector_menu$centers
         selector_menu$ends
         selector_menu$leads
         selector_menu$trailers
         selector_menu$beaux
         selector_menu$belles
         selector_menu$center2
         selector_menu$center6
         selector_menu$outer2
         selector_menu$outer6
         selector_menu$center4
         selector_menu$outerpair
         selector_menu$headliners
         selector_menu$sideliners
         selector_menu$nearline
         selector_menu$farline
         selector_menu$nearcolumn
         selector_menu$farcolumn
         selector_menu$nearbox
         selector_menu$farbox
         selector_menu$all
         selector_menu$none)
      END

   { ********** WARNING!!!!!  this list must be keyed to the tables
      "direction_names" in sdutil.c and to
      the definition of "direction_kind" in sd.h . }

   task$direction_menu := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      CHOICES = (
         direction_menu$left
         direction_menu$right
         direction_menu$in
         direction_menu$out
         direction_menu$zigzag
         direction_menu$zagzig
         direction_menu$zigzig
         direction_menu$zagzag
         direction_menu$no_direction)
      END

   task$quantifier_menu := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      CHOICES = (
         quantifier_menu$1
         quantifier_menu$2
         quantifier_menu$3
         quantifier_menu$4
         quantifier_menu$5)
      END

   task$general_concept_menu := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$special_concept_menu := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$tandem_concept_menu_1 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$tandem_concept_menu_2 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$tandem_concept_menu_3 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$tandem_concept_menu_4 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$distort_concept_menu_1 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$distort_concept_menu_2 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$distort_concept_menu_3 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$distort_concept_menu_4 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$dist4_concept_menu_1 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$dist4_concept_menu_2 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$dist4_concept_menu_3 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$dist4_concept_menu_4 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$phantoml_concept_menu_1 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$phantoml_concept_menu_2 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$phantoml_concept_menu_3 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$phantomb_concept_menu_1 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$phantomb_concept_menu_2 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$misc_concept_menu_1 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$misc_concept_menu_2 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   task$misc_concept_menu_3 := ENUM:
      COMP => <RETURN> ;
      CHANGES_ONLY = false ;
      END

   whole_call_choices := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_1x8   := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_l1x8  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_dpt   := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_cdpt  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_rcol  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_lcol  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_8ch   := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_tby   := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_lin   := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_lout  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_rwv   := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_lwv   := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_r2fl  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_l2fl  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_gcol  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END
   call_choices_qtag  := ENUM: COMP => <RETURN>; CHANGES_ONLY = false; END

   whole_call_show := task_group: END
   call_1x8_show   := task_group: END
   call_l1x8_show  := task_group: END
   call_dpt_show   := task_group: END
   call_cdpt_show  := task_group: END
   call_rcol_show  := task_group: END
   call_lcol_show  := task_group: END
   call_8ch_show   := task_group: END
   call_tby_show   := task_group: END
   call_lin_show   := task_group: END
   call_lout_show  := task_group: END
   call_rwv_show   := task_group: END
   call_lwv_show   := task_group: END
   call_r2fl_show  := task_group: END
   call_l2fl_show  := task_group: END
   call_gcol_show  := task_group: END
   call_qtag_show  := task_group: END

   startup_enabler := task_group: END
   startup_disabler := task_group: END

   getout_enabler := task_group: END
   getout_disabler := task_group: END

   outfile_enabler := task_group: END
   outfile_disabler := task_group: END

   comment_enabler := task_group: END
   comment_disabler := task_group: END

{
   neglect_popup_enabler := task_group: END
   neglect_popup_disabler := task_group: END
}

   modifier_enabler := task_group: END

   selector_enabler := task_group: END
   selector_disabler := task_group: END

   direction_enabler := task_group: END
   direction_disabler := task_group: END

   quantifier_enabler := task_group: END
   quantifier_disabler := task_group: END

   phantoml_concepts_enabler := task_group: END
   phantoml_concepts_disabler := task_group: END

   phantomb_concepts_enabler := task_group: END
   phantomb_concepts_disabler := task_group: END

   tandem_concepts_enabler := task_group: END
   tandem_concepts_disabler := task_group: END

   distort_concepts_enabler := task_group: END
   distort_concepts_disabler := task_group: END

   dist4_concepts_enabler := task_group: END
   dist4_concepts_disabler := task_group: END

   misc_concepts_enabler := task_group: END
   misc_concepts_disabler := task_group: END

   abort_confirm_enabler := task_group: END

   search_enabler := task_group: END


USER_INTERFACE sd_dialog

%INCLUDE "/sys/ins/dialog_user.ins.dps"

   bg_on_fg := ui_color_set:
       foreground = dp_$background ;
       background = dp_$foreground ;
       end

   NICE_HEADER := DISPLAY_TEXT !TEMPLATE:
      COLOR_SET = bg_on_fg;
      FONT = "/sys/dm/fonts/f5x9" ;
      JUSTIFY = center ;
      END

   NICE_ROW := ROW !TEMPLATE:
      SHAPE = square ;
      COLOR_SET = bg_on_fg;
      BORDER_WIDTH = 30 ;
      END

   NICE_MENU := MENU !TEMPLATE:
      COLOR_SET = bg_on_fg;
      SHAPE = square ;
      FONT = "/sys/dm/fonts/f5x9" ;
      MARKSTYLE = none ;
      COMPRESS_ENTRIES = true ;
      END

   NICE_ICON := ICON !TEMPLATE:
      COLOR_SET = bg_on_fg;
      SHAPE = square ;
      END

   NICE_STRING_FIELD := STRING_FIELD !TEMPLATE:
      COLOR_SET = bg_on_fg;
      SHAPE = square ;
      FONT = "/sys/dm/fonts/f5x9" ;
      OUTLINE = on;
      END

   CALL_MENU := MENU !TEMPLATE:
      COLOR_SET = bg_on_fg;
      SHAPE = square ;
      FONT = "/sys/dm/fonts/f5x7" ;
      TITLE_FONT = "/sys/dm/fonts/f5x9" ;
      TITLE_BAR = on ;
      SIZE = ((20 7) (43 25) (43 25)) chars ;
      MARKSTYLE = none ;
      HELP_TEXT = "Select a call, dummy." ;
      END

   SCROLLER := SCROLLBAR !TEMPLATE:
      COLOR_SET = bg_on_fg;
      SIZE = ((15 200) (20 400) (20 600)) pixels ;
      HELP_TEXT = "Click M1 here to scroll the call menu." ;
      END

   SCROLLING_MENU := ROW !TEMPLATE:
      COLOR_SET = bg_on_fg;
      SHAPE = square ;
      END

   startup_enabler activate => <startup_stuff be_current_child>
   startup_disabler activate => <normal_stuff be_current_child>

   getout_enabler activate => <getout_popup show; + scroll_right_justify>
   getout_disabler activate => <getout_popup popdown>

   outfile_enabler activate => <outfile_popup show>
   outfile_disabler activate => <outfile_popup popdown>

   comment_enabler activate => <comment_popup show>
   comment_disabler activate => <comment_popup popdown>

{
   neglect_popup_enabler activate => <neglect_popup show>
   neglect_popup_disabler activate => <neglect_popup popdown>
}

   modifier_enabler activate => <modifier_popup show>

   selector_enabler activate => <selector_popup show>
   selector_disabler activate => <selector_popup popdown>

   direction_enabler activate => <direction_popup show>
   direction_disabler activate => <direction_popup popdown>

   quantifier_enabler activate => <quantifier_popup show>
   quantifier_disabler activate => <quantifier_popup popdown>

   phantoml_concepts_enabler activate => <phantoml_concepts_popup show>
   phantoml_concepts_disabler activate => <phantoml_concepts_popup popdown>

   phantomb_concepts_enabler activate => <phantomb_concepts_popup show>
   phantomb_concepts_disabler activate => <phantomb_concepts_popup popdown>

   tandem_concepts_enabler activate => <tandem_concepts_popup show>
   tandem_concepts_disabler activate => <tandem_concepts_popup popdown>

   distort_concepts_enabler activate => <distort_concepts_popup show>
   distort_concepts_disabler activate => <distort_concepts_popup popdown>

   dist4_concepts_enabler activate => <dist4_concepts_popup show>
   dist4_concepts_disabler activate => <dist4_concepts_popup popdown>

   misc_concepts_enabler activate => <misc_concepts_popup show>
   misc_concepts_disabler activate => <misc_concepts_popup popdown>

   abort_confirm_enabler activate => <abort_confirm_popup show>

   search_enabler activate => <search_stuff be_current_child>

   whole_call_show activate => <whole_call_menu be_current_child>
   call_1x8_show activate   => <call_menu_1x8 be_current_child>
   call_l1x8_show activate  => <call_menu_l1x8 be_current_child>
   call_dpt_show activate   => <call_menu_dpt be_current_child>
   call_cdpt_show activate  => <call_menu_cdpt be_current_child>
   call_rcol_show activate  => <call_menu_rcol be_current_child>
   call_lcol_show activate  => <call_menu_lcol be_current_child>
   call_8ch_show activate   => <call_menu_8ch be_current_child>
   call_tby_show activate   => <call_menu_tby be_current_child>
   call_lin_show activate   => <call_menu_lin be_current_child>
   call_lout_show activate  => <call_menu_lout be_current_child>
   call_rwv_show activate   => <call_menu_rwv be_current_child>
   call_lwv_show activate   => <call_menu_lwv be_current_child>
   call_r2fl_show activate  => <call_menu_r2fl be_current_child>
   call_l2fl_show activate  => <call_menu_l2fl be_current_child>
   call_gcol_show activate  => <call_menu_gcol be_current_child>
   call_qtag_show activate  => <call_menu_qtag be_current_child>

   inner_whole_call_menu := CALL_MENU: TASK = whole_call_choices; TITLE_STRING = "SELECT A CALL" ; END
   inner_call_menu_1x8   := CALL_MENU: TASK = call_choices_1x8;   TITLE_STRING = "SELECT A GRAND WAVE CALL" ; END
   inner_call_menu_l1x8  := CALL_MENU: TASK = call_choices_l1x8;  TITLE_STRING = "SELECT A LEFT GRAND WAVE CALL"; END
   inner_call_menu_dpt   := CALL_MENU: TASK = call_choices_dpt;   TITLE_STRING = "SELECT A DPT CALL"; END
   inner_call_menu_cdpt  := CALL_MENU: TASK = call_choices_cdpt;  TITLE_STRING = "SELECT A CDPT CALL"; END
   inner_call_menu_rcol  := CALL_MENU: TASK = call_choices_rcol;  TITLE_STRING = "SELECT A COLUMN CALL"; END
   inner_call_menu_lcol  := CALL_MENU: TASK = call_choices_lcol;  TITLE_STRING = "SELECT A LEFT COLUMN CALL"; END
   inner_call_menu_8ch   := CALL_MENU: TASK = call_choices_8ch;   TITLE_STRING = "SELECT AN 8 CHAIN CALL"; END
   inner_call_menu_tby   := CALL_MENU: TASK = call_choices_tby;   TITLE_STRING = "SELECT A TRADE BY CALL"; END
   inner_call_menu_lin   := CALL_MENU: TASK = call_choices_lin;   TITLE_STRING = "SELECT A FACING LINES CALL"; END
   inner_call_menu_lout  := CALL_MENU: TASK = call_choices_lout;  TITLE_STRING = "SELECT A LINES-OUT CALL"; END
   inner_call_menu_rwv   := CALL_MENU: TASK = call_choices_rwv;   TITLE_STRING = "SELECT A WAVES CALL"; END
   inner_call_menu_lwv   := CALL_MENU: TASK = call_choices_lwv;   TITLE_STRING = "SELECT A LEFT WAVES CALL"; END
   inner_call_menu_r2fl  := CALL_MENU: TASK = call_choices_r2fl;  TITLE_STRING = "SELECT A TWO-FACED CALL"; END
   inner_call_menu_l2fl  := CALL_MENU: TASK = call_choices_l2fl;  TITLE_STRING = "SELECT A LEFT TWO-FACED CALL"; END
   inner_call_menu_gcol  := CALL_MENU: TASK = call_choices_gcol;  TITLE_STRING = "SELECT A GRAND COLUMN CALL"; END
   inner_call_menu_qtag  := CALL_MENU: TASK = call_choices_qtag;  TITLE_STRING = "SELECT A DIAMOND OR WHATEVER CALL"; END

   whole_call_menu := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_whole_call_menu; END inner_whole_call_menu) END 
   call_menu_1x8   := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_1x8;   END inner_call_menu_1x8) END 
   call_menu_l1x8  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_l1x8;  END inner_call_menu_l1x8) END 
   call_menu_dpt   := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_dpt;   END inner_call_menu_dpt) END 
   call_menu_cdpt  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_cdpt;  END inner_call_menu_cdpt) END 
   call_menu_rcol  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_rcol;  END inner_call_menu_rcol) END 
   call_menu_lcol  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_lcol;  END inner_call_menu_lcol) END 
   call_menu_8ch   := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_8ch;   END inner_call_menu_8ch) END 
   call_menu_tby   := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_tby;   END inner_call_menu_tby) END 
   call_menu_lin   := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_lin;   END inner_call_menu_lin) END 
   call_menu_lout  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_lout;  END inner_call_menu_lout) END 
   call_menu_rwv   := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_rwv;   END inner_call_menu_rwv) END 
   call_menu_lwv   := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_lwv;   END inner_call_menu_lwv) END 
   call_menu_r2fl  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_r2fl;  END inner_call_menu_r2fl) END 
   call_menu_l2fl  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_l2fl;  END inner_call_menu_l2fl) END 
   call_menu_gcol  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_gcol;  END inner_call_menu_gcol) END 
   call_menu_qtag  := SCROLLING_MENU: CONTENTS = (SCROLLER: technique = inner_call_menu_qtag;  END inner_call_menu_qtag) END 

   concept_menu := CALL_MENU:
      TASK = task$general_concept_menu ;
      TITLE_BAR = off ;
      SIZE = ((20 7) (35 25) (35 25)) chars ;
      HELP_TEXT = "Select a concept, dummy." ;
      END
      
   search_stuff := ROW:
      HELP_TEXT = "Use this menu to select a resolve.  You can create many resolves,"
                 &"  browse through them, and select one that you like."
                 &"Click on FIND ANOTHER to search for another resolve, saving this one."
                 &"Click on GO TO PREVIOUS to go backward in the list of saved resolves."
                 &"Click on GO TO NEXT to go forward in the list of saved resolves."
                 &"Click on ACCEPT CURRENT CHOICE to accept the current one and add it"
                 &"  to the sequence.  After doing so, you can still edit the sequence."
                 &"Click on ABORT to leave this menu without resolving."
                 &"Click on CHANGE RECONCILE POINT (M1 to raise, M3 to lower) to"
                 &"  change the reconcile insertion point." ;
      SHAPE = square ;
      COLOR_SET = bg_on_fg;
      ORIENTATION = vertical ;
      CONTENTS = (
         SPACE:
            SIZE = ((0 0) (0 250) (0 250)) pixels ;
            END
         NICE_HEADER:
            TASK = search_title_task ;
            SIZE = ((20 1) (31 1) (35 1)) chars ;
            END
         NICE_ICON:
            TASK = task$search$abort ;
            STRING = "abort the search" ;
            END
         NICE_ICON:
            TASK = task$search$another ;
            STRING = "find another" ;
            END
         NICE_ICON:
            TASK = task$search$next ;
            STRING = "go to next" ;
            END
         NICE_ICON:
            TASK = task$search$previous ;
            STRING = "go to previous" ;
            END
         NICE_ICON:
            TASK = task$search$accept ;
            STRING = "ACCEPT current choice" ;
            END
         NICE_ICON:
            [M3] => <task$search$decdepth comp> ;
            TASK = task$search$incdepth ;
            STRING = "change depth" ;
            END
         SPACE:
            SIZE = ((0 0) (0 0) (0 1000)) pixels ;
            END )
      END

   unused_stuff := ROW:
      SHAPE = square ;
      ORIENTATION = vertical ;
      CONTENTS = (
         SPACE:
            SIZE = ((0 0) (0 0) (0 1000)) pixels ;
            END )
      END

   normal_stuff := ROW:
      SHAPE = square ;
      COLOR_SET = bg_on_fg;
      CONTENTS = (
         ROW:
            SHAPE = square ;
            COLOR_SET = bg_on_fg;
            ORIENTATION = vertical ;
            CONTENTS = (
               NICE_ICON:
                  TASK = task$quit ;
                  STRING = "Exit the program" ;
                  HELP_TEXT = "Select EXIT to leave the program." ;
                  END
               NICE_ICON:
                  TASK = task$abort ;
                  STRING = "Abort this sequence" ;
                  HELP_TEXT = "Select ABORT to abort this whole sequence." ;
                  END
               NICE_ICON:
                  TASK = allow_modification_task ;
                  STRING = "Allow modifications" ;
                  HELP_TEXT = "Select ALLOW MODIFICATION to allow the next call to be modified"
                             &"in a simple way or to take some other call as an argument."
                             &"Select it a second time to allow parts of the call to be"
                             &"replaced in unusual ways." ;
                  END
               NICE_ICON:
                  TASK = allow_all_concept_task ;
                  STRING = "Toggle concept levels" ;
                  HELP_TEXT = "Select TOGGLE CONCEPT LEVELS to allow concepts that are not"
                             &"legal at the current level to be possible nevertheless." ;
                  END
               comment_icon := NICE_ICON:
                  TASK = task$create_comment ;
                  STRING = "Insert a comment" ;
                  HELP_TEXT = "Select COMMENT to insert a comment into the"
                             &"text at this point.  It will be in braces." ;
                  END
               outfile_icon := NICE_ICON:
                  TASK = task$create_outfile ;
                  STRING = "Change output file" ;
                  HELP_TEXT = "Select OUTFILE to change the"
                             &"name of the output file." ;
                  END
               getout_icon := NICE_ICON:
                  TASK = getout_task ;
                  STRING = "End this sequence" ;
                  HELP_TEXT = "Select GETOUT to write out a resolved sequence." ;
                  END
               NICE_ICON:
                  TASK = task$search_resolve ;
                  STRING = "Resolve" ;
                  HELP_TEXT = "Select RESOLVE to add a resolve to this sequence." ;
                  END
               NICE_ICON:
                  TASK = task$search_reconcile ;
                  STRING = "Reconcile" ;
                  HELP_TEXT = "Select RECONCILE to resolve this sequence"
                             &"by changing earlier calls." ;
                  END
               NICE_ICON:
                  TASK = task$search_anything ;
                  STRING = "Pick random call" ;
                  HELP_TEXT = "Select PICK RANDOM CALL to search for legal calls." ;
                  END
               NICE_ICON:
                  TASK = task$search_nice_setup ;
                  STRING = "Normalize" ;
                  HELP_TEXT = "Select NORMALIZE to normalize the setup to a 2X4." ;
                  END
{
               NICE_ICON:
                  TASK = neglect_task ;
                  STRING = "Show neglected calls" ;
                  HELP_TEXT = "Select NEGLECTED CALLS to see a list"
                             &"of calls you haven't used lately." ;
                  END
}
               NICE_ICON:
                  TASK = save_pic_task ;
                  STRING = "Keep picture" ;
                  HELP_TEXT = "Select KEEP PICTURE to cause a diagram of the"
                             &"current setup to be saved in the transcript." ;
                  END
               SPACE:
                  SIZE = ((0 0) (0 25) (0 25)) pixels ;
                  END
               NICE_HEADER: TEXT = "SELECT A CONCEPT"; END
               CALL_MENU:
                  TASK = task$special_concept_menu ;
                  TITLE_BAR = off ;
                  SIZE = ((20 6) (36 6) (36 6)) chars ;
                  HELP_TEXT = "Select a general concept type."
                              &"A popup menu for those concepts will appear." ;
                  END
               ROW:
                  SHAPE = square ;
                  COLOR_SET = bg_on_fg;
                  CONTENTS = (
                     SCROLLER:
                        technique = concept_menu ;
                        HELP_TEXT = "Click M1 here to scroll the concept menu." ;
                        END
                     concept_menu)
                  END )
            END
         ONEOF:
            SHAPE = square ;
            CONTENTS = (
               { ********** WARNING!!!!!  this list must be keyed to the enumeration
                  given in sd.h in the definition of "call_list_kind". }
               unused_stuff       { for "call_list_empty" }
               whole_call_menu    { for "call_list_any" }
               call_menu_1x8
               call_menu_l1x8
               call_menu_dpt
               call_menu_cdpt
               call_menu_rcol
               call_menu_lcol
               call_menu_8ch
               call_menu_tby
               call_menu_lin
               call_menu_lout
               call_menu_rwv
               call_menu_lwv
               call_menu_r2fl
               call_menu_l2fl
               call_menu_gcol
               call_menu_qtag
               search_stuff)
            END )
      END

   startup_stuff := ROW:
      SHAPE = square ;
      ORIENTATION = vertical ;
      COLOR_SET = bg_on_fg;
      CONTENTS = (
         NICE_ICON:
            TASK = task$quit ;
            STRING = "EXIT" ;
            HELP_TEXT = "Select EXIT to leave the program." ;
            END
         NICE_MENU:
            TASK = start_choices ;
            TITLE_FONT = "/sys/dm/fonts/f5x9" ;
            TITLE_BAR = on ;
            TITLE_STRING = "HOW WOULD YOU LIKE TO START?" ;
            ENTRIES =
               ("Heads 1P2P"           => start$h1p2p
                "Sides 1P2P"           => start$s1p2p
                "Heads start"          => start$hstart
                "Sides start"          => start$sstart
                "From squared set"     => start$as_they_are) ;
            HELP_TEXT = "You are about to start a sequence."
                       &"Select the initial call or designation." ;
            END )
      END

   getout_popup := POPUP:
      [m1] => <getout_abort_task comp> ;
      leave => <getout_abort_task comp> ;
      HELP_TEXT = "Type a header line, then hit <return>."
                 &"Click on NO HEADER to write the sequence, but without a header."
                 &"Move the mouse away to exit this popup." ;
      CONTENTS = NICE_ROW:
         ORIENTATION = vertical ;
         CONTENTS = (
            NICE_HEADER:
               TEXT = "You can type a line of text to be"
                      &"placed at the beginning of this sequence." ;
               END
            NICE_STRING_FIELD:
               TASK = getout_header_task ;
               SIZE = (35 1) chars ;
               PROMPT = "Header comment ->" ;
               END
            NICE_ICON:
               [m1] => <same_getout_header_task comp> ;
               TASK = same_getout_header_task ;
               STRING = "USE SAME HEADER" ;
               END
            NICE_ICON:
               [m1] => <no_getout_header_task comp> ;
               TASK = no_getout_header_task ;
               STRING = "NO HEADER" ;
               END )
         END
      END

   outfile_popup := POPUP:
      [m1] => <outfile_popup popdown; outfile_abort_task comp> ;
      leave => <outfile_popup popdown; outfile_abort_task comp> ;
      HELP_TEXT = "Type a file name, then hit <return>."
                 &"Move the mouse away to abandon the change and continue the sequence." ;
      CONTENTS = NICE_ROW:
         ORIENTATION = vertical ;
         CONTENTS = (
            NICE_HEADER: TEXT = "Name of new output file."; END
            NICE_STRING_FIELD:
               TASK = outfile_task ;
               SIZE = (35 1) chars ;
               PROMPT = "File ->" ;
               END )
         END
      END

   comment_popup := POPUP:
      [m1] => <comment_popup popdown; comment_abort_task comp> ;
      leave => <comment_popup popdown; comment_abort_task comp> ;
      HELP_TEXT = "Type a comment, then hit <return>."
                 &"Move the mouse away to abandon the comment and continue the sequence." ;
      CONTENTS = NICE_ROW:
         ORIENTATION = vertical ;
         CONTENTS = (
            NICE_HEADER: TEXT = "Type comment."; END
            NICE_STRING_FIELD:
               TASK = comment_task ;
               SIZE = (35 1) chars ;
               PROMPT = "Comment ->" ;
               END )
         END
      END

{
   neglect_popup := POPUP:
      [m1] => <neglect_popup popdown; popup_abort_task comp> ;
      leave => <neglect_popup popdown; popup_abort_task comp> ;
      HELP_TEXT = "Type a percentage (integer), then hit <return>."
                 &"It will list that percentage of the calls that have been used least recently."
                 &"Move the mouse away to abandon this operation and continue the sequence." ;
      CONTENTS = NICE_ROW:
         ORIENTATION = vertical ;
         CONTENTS = (
            NICE_HEADER: TEXT = "What percentage of calls do you want listed?  "; END
            NICE_STRING_FIELD:
               TASK = neglect_popup_task ;
               SIZE = (5 1) chars ;
               PROMPT = "-->  " ;
               END )
         END
      END
}

   modifier_popup := POPUP:
      [m1] => <modifier_popup popdown; popup_abort_task comp> ;
      leave => <modifier_popup popdown; popup_abort_task comp> ;
      HELP_TEXT = "Click here to replace this part of the call."
                 &"Move the mouse away to leave the call unmodified." ;
      CONTENTS = NICE_ROW:
         ORIENTATION = vertical ;
         CONTENTS = (
            NICE_HEADER:
               TASK = modifier_title_task ;
               { It chooses the 42 size, which is big enough for the
                  "hinge/flip/stepnfold" message in keep busy.
                  We allow 2 lines if necessary. }
               SIZE = ((30 1) (42 2) (52 2)) chars ;
               END
            NICE_ICON:
               [m1] => <modifier_popup popdown; modifier_select_task comp> ;
               TASK = modifier_select_task ;
               STRING = "REPLACE IT?" ;
               END )
         END
      END

   selector_popup := POPUP:
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "This call requires a people-identification." ;
      CONTENTS =
         NICE_MENU:
            [m1] => <* select> ;
            TASK = task$selector_menu ;
            BORDER_WIDTH = 50 ;
            TITLE_FONT = "/sys/dm/fonts/f5x9" ;
            TITLE_BAR = on ;
            TITLE_STRING = "WHO?" ;
            ENTRIES =
              ("boys"          => selector_menu$boys
               "girls"         => selector_menu$girls
               "heads"         => selector_menu$heads
               "sides"         => selector_menu$sides
               "head corners"  => selector_menu$headcorners
               "side corners"  => selector_menu$sidecorners
               "head boys"     => selector_menu$headboys
               "head girls"    => selector_menu$headgirls
               "side boys"     => selector_menu$sideboys
               "side girls"    => selector_menu$sidegirls
               "centers"       => selector_menu$centers
               "ends"          => selector_menu$ends
               "leads"         => selector_menu$leads
               "trailers"      => selector_menu$trailers
               "beaux"         => selector_menu$beaux
               "belles"        => selector_menu$belles
               "center 2"      => selector_menu$center2
               "center 6"      => selector_menu$center6
               "outer 2"       => selector_menu$outer2
               "outer 6"       => selector_menu$outer6
               "center 4"      => selector_menu$center4
               "outer pairs"   => selector_menu$outerpair
               "headliners"    => selector_menu$headliners
               "sideliners"    => selector_menu$sideliners
               "near line"     => selector_menu$nearline
               "far line"      => selector_menu$farline
               "near column"   => selector_menu$nearcolumn
               "far column"    => selector_menu$farcolumn
               "near box"      => selector_menu$nearbox
               "far box"       => selector_menu$farbox
               "everyone"      => selector_menu$all
               "no one"        => selector_menu$none);
            END
      END

   direction_popup := POPUP:
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "This call requires a direction-identification." ;
      CONTENTS =
         NICE_MENU:
            [m1] => <* select> ;
            TASK = task$direction_menu ;
            BORDER_WIDTH = 50 ;
            TITLE_FONT = "/sys/dm/fonts/f5x9" ;
            TITLE_BAR = on ;
            TITLE_STRING = "WHICH WAY?" ;
            ENTRIES =
              ("left"          => direction_menu$left
               "right"         => direction_menu$right
               "in"            => direction_menu$in
               "out"           => direction_menu$out
               "zig-zag"       => direction_menu$zigzag
               "zag-zig"       => direction_menu$zagzig
               "zig-zig"       => direction_menu$zigzig
               "zag-zag"       => direction_menu$zagzag
               "(no direction)"=> direction_menu$no_direction);
            END
      END

   quantifier_popup := POPUP:
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "This call requires a number." ;
      CONTENTS =
         NICE_MENU:
            [m1] => <* select> ;
            TASK = task$quantifier_menu ;
            BORDER_WIDTH = 50 ;
            TITLE_FONT = "/sys/dm/fonts/f5x9" ;
            TITLE_BAR = on ;
            TITLE_STRING = "HOW MANY?" ;
            ENTRIES =
              ("1"        => quantifier_menu$1
               "2"        => quantifier_menu$2
               "3"        => quantifier_menu$3
               "4"        => quantifier_menu$4
               "5"        => quantifier_menu$5);
            END
      END

   phantoml_concepts_popup := POPUP:
      [m1] => <popup_abort_task comp> ;
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "Select one of the concepts shown here."
                 &"Move the mouse away if you don't wish to." ;
      CONTENTS = NICE_ROW:
         CONTENTS = (
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(lines)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$phantoml_concept_menu_1 ;
                     SIZE = ((5 34) (41 34) (100 34)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(waves)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$phantoml_concept_menu_2 ;
                     SIZE = ((5 34) (41 34) (100 34)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(columns)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$phantoml_concept_menu_3 ;
                     SIZE = ((5 34) (42 34) (100 34)) chars ;
                     END )
               END )
         END
      END

   phantomb_concepts_popup := POPUP:
      [m1] => <popup_abort_task comp> ;
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "Select one of the concepts shown here."
                 &"Move the mouse away if you don't wish to." ;
      CONTENTS = NICE_ROW:
         CONTENTS = (
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(boxes)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$phantomb_concept_menu_1 ;
                     SIZE = ((5 34) (41 34) (100 34)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(diamonds)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$phantomb_concept_menu_2 ;
                     SIZE = ((5 34) (41 34) (100 34)) chars ;
                     END )
               END )
         END
      END

   tandem_concepts_popup := POPUP:
      [m1] => <popup_abort_task comp> ;
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "Select one of the concepts shown here."
                 &"Move the mouse away if you don't wish to." ;
      CONTENTS = NICE_ROW:
         CONTENTS = (
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$tandem_concept_menu_1 ;
                     SIZE = ((5 14) (40 14) (100 14)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(twosome)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$tandem_concept_menu_2 ;
                     SIZE = ((5 14) (40 14) (100 14)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(solid/twosome)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$tandem_concept_menu_3 ;
                     SIZE = ((5 14) (40 14) (100 14)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(twosome/solid)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$tandem_concept_menu_4 ;
                     SIZE = ((5 14) (40 14) (100 14)) chars ;
                     END )
               END )
         END
      END

   distort_concepts_popup := POPUP:
      [m1] => <popup_abort_task comp> ;
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "Select one of the concepts shown here."
                 &"Move the mouse away if you don't wish to." ;
      CONTENTS = NICE_ROW:
         CONTENTS = (
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(distorted columns)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$distort_concept_menu_1 ;
                     SIZE = ((5 10) (32 10) (100 10)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(distorted lines)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$distort_concept_menu_2 ;
                     SIZE = ((5 10) (32 10) (100 10)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(phantom distorted columns)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$distort_concept_menu_3 ;
                     SIZE = ((5 10) (32 10) (100 10)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: TEXT = "(phantom distorted lines)"; END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$distort_concept_menu_4 ;
                     SIZE = ((5 10) (32 10) (100 10)) chars ;
                     END )
               END )
         END
      END

   dist4_concepts_popup := POPUP:
      [m1] => <popup_abort_task comp> ;
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "Select one of the concepts shown here."
                 &"Move the mouse away if you don't wish to." ;
      CONTENTS = NICE_ROW:
         CONTENTS = (
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$dist4_concept_menu_1 ;
                     SIZE = ((5 6) (32 6) (100 6)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$dist4_concept_menu_2 ;
                     SIZE = ((5 6) (32 6) (100 6)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$dist4_concept_menu_3 ;
                     SIZE = ((5 6) (32 6) (100 6)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_HEADER: END
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$dist4_concept_menu_4 ;
                     SIZE = ((5 6) (32 6) (100 6)) chars ;
                     END )
               END )
         END
      END

   misc_concepts_popup := POPUP:
      [m1] => <popup_abort_task comp> ;
      leave => <popup_abort_task comp> ;
      HELP_TEXT = "Select one of the concepts shown here."
                 &"Move the mouse away if you don't wish to." ;
      CONTENTS = NICE_ROW:
         CONTENTS = (
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$misc_concept_menu_1 ;
                     SIZE = ((5 47) (47 47) (100 47)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$misc_concept_menu_2 ;
                     SIZE = ((5 47) (47 47) (100 47)) chars ;
                     END )
               END
            ROW:
               SHAPE = square ;
               ORIENTATION = vertical ;
               CONTENTS = (
                  NICE_MENU:
                     [m1] => <* select> ;
                     TASK = task$misc_concept_menu_3 ;
                     SIZE = ((5 47) (47 47) (100 47)) chars ;
                     END )
               END )
         END
      END

   abort_confirm_popup := POPUP:
      [m1] => <abort_confirm_popup popdown; abort_confirm_abort_task comp> ;
      leave => <abort_confirm_popup popdown; abort_confirm_abort_task comp> ;
      HELP_TEXT = "The sequence you are working on has not been"
                 &"written to disk, and you have clicked on a command that"
                 &"will destroy it.  Click on ABORT IT to destroy this sequence"
                 &"and proceed with the ABORT or EXIT command that you have selected."
                 &"Move the mouse away to exit this popup and continue the sequence."
                 &"If you wish this sequence to be written to disk, you must"
                 &"move the mouse away and then click on RESOLVE or GETOUT." ;
      CONTENTS = NICE_ROW:
         ORIENTATION = vertical ;
         CONTENTS = (
            NICE_HEADER: TEXT = "You have a sequence in progress."; END
            NICE_ICON:
               [m1] => <abort_confirm_popup popdown; abort_confirm_select_task comp> ;
               TASK = abort_confirm_select_task ;
               STRING = "ABORT IT?" ;
               END )
         END
      END

   std_window:
      [del] => <+ backspace> ;
      [M3] => <task$undo comp> ;
      [up_box_arrow] => <* scroll_up> ;
      [down_box_arrow] => <* scroll_down> ;
      BORROW_MODE = true ;
      CONTENTS =
         ROW:
            SHAPE = square ;
            CONTENTS = (
               ONEOF:
                  SHAPE = square ;
                  CONTENTS = (normal_stuff startup_stuff)
                  END
               ROW:
                  SHAPE = square ;
                  ORIENTATION = vertical ;
                  CONTENTS = (
                     NICE_HEADER:
                        TASK = main_title_task ;
                        SIZE = ((31 1) (80 1) (100 1)) chars ;
                        END
                     DISPLAY_TEXT:
                        TASK = display ;
                        COLOR_SET = bg_on_fg;
                        FONT = "/sys/dm/fonts/f5x9" ;
                        SIZE = ((31 25) (80 25) (100 45)) chars ;
                        END )
                  END )
            END
      END
END.
