# Makefile for Sd (square dance caller's helper)
# Time-stamp: <93/12/05 18:21:33 gildea>

srcdir = @srcdir@
# VPATH is for GNU make
VPATH = @srcdir@

# This gives the compiler name and any switches that it needs to make
# it operate the way we want (ANSI language, standards conformance,
# target hardware, etc.)
# To get gcc on Athena, "add outland" before running "configure".
CC = @CC@

# This gives any "-D" switches that we always need to send to the compiler.
DEFS = @DEFS@

# This gives the optimization and/or debug info.  These flags presumably
# don't affect the semantics of the language and run-time environment, so you
# might reasonably want to change them to suit your taste.
# The options shown here have been chosen to optimize the program for
# production use.  Depending on your operating system, compiler, and debugger,
# this may compromise the ability to debug the program.  In this case, you may
# need to choose different options, typically "-g", for debugging.
# Consult your system, compiler, and debugger vendor for further information.
CDEBUGFLAGS = @CDEBUGFLAGS@

CFLAGS = $(DEFS) $(CDEBUGFLAGS)

# These are the "-I"  and "-D" flags that we must use for the compilation
# of the X11 user interface (sdui-x11.c).
X11_FLAGS = @X11_FLAGS@

# These are the "-I"  and "-D" flags that we must use for the compilation
# of the system-dependent part of the TTY user interface (sdui-ttu.c).
TTY_FLAGS = @TTY_FLAGS@

# These are the library flags that we must use for the final bind of
# the X11 version of "sd".
X11_LIBS = @X11_LIBS@

# These are the library flags that we must use for the final bind of
# "sdtty".
TTY_LIBS = @TTY_LIBS@

SD_SRCS = sdmain.c sdinit.c sdutil.c sdbasic.c \
          sdtables.c sdctable.c sdtop.c sdconcpt.c sdpreds.c sd12.c sd16.c \
          sdgetout.c sdmoves.c sdtand.c sdconc.c sdistort.c \
          sdsi.c

SD_OBJS = sdmain.o sdinit.o sdutil.o sdbasic.o \
          sdtables.o sdctable.o sdtop.o sdconcpt.o sdpreds.o sd12.o sd16.o \
          sdgetout.o sdmoves.o sdtand.o sdconc.o sdistort.o \
          sdsi.o

SDX11_SRC = sdui-x11.c
SDX11_OBJ = sdui-x11.o

# This has all special source files for sdtty,
# for making the distribution and running lint.
SDTTY_SRC = sdui-tty.c sdmatch.c sdui-ttu.c sdui-tpc.c
SDTTY_OBJ_UNIX = sdui-tty.o sdmatch.o sdui-ttu.o
SDTTY_OBJ_PC   = sdui-tty.o sdmatch.o sdui-tpc.o
# This has the special object files used for building this version of sdtty.
SDTTY_OBJ = @SDTTY_OBJ@

SDTTY_OBJS = @SDTTY_OBJS@

MKCALLS_SRCS = mkcalls.c dbcomp.c
MKCALLS_OBJS = mkcalls.o dbcomp.o

SRCS = $(SD_SRCS) $(SDX11_SRC) $(SDTTY_SRC) $(MKCALLS_SRCS)
OBJS = $(SD_OBJS) $(SDX11_OBJ) $(SDTTY_OBJ) $(MKCALLS_OBJS)

all: @DEFAULT_TARGET@
allx11: sd sd_calls.dat
alltty: sdtty sd_calls.dat
everything: allx11 sdtty

sd: $(SD_OBJS) $(SDX11_OBJ)
	$(CC) $(CFLAGS) -o $@ $(SD_OBJS) $(SDX11_OBJ) $(X11_LIBS)

mkcalls: $(MKCALLS_OBJS)
	$(CC) $(CFLAGS) -o $@ $(MKCALLS_OBJS)
@STRIP@
@AOUT2EXE@

# The aout2exe program is for djgpp on DOS

sdtty: $(SD_OBJS) $(SDTTY_OBJ)
	$(CC) $(CFLAGS) -o $@ $(SDTTY_OBJS) $(TTY_LIBS)
@STRIP@
@AOUT2EXE@

sd_calls.dat: sd_calls.txt mkcalls
	./mkcalls $(srcdir)/sd_calls.txt

.c.o:
	$(CC) $(CFLAGS) -c $<

# sdui-x11.c may need -D_POSIX_SOURCE with gcc 1.40 on Ultrix 4.2

sdui-x11.o: sdui-x11.c
	$(CC) $(CFLAGS) $(X11_FLAGS) -c $(srcdir)/$*.c

sdui-ttu.o: sdui-ttu.c
	$(CC) $(CFLAGS) $(TTY_FLAGS) -c $(srcdir)/$*.c

dbcomp.o sdmain.o sdsi.o sdui-x11.o: paths.h

dbcomp.o: database.h

$(SD_OBJS) $(SDX11_OBJ) $(SDTTY_OBJ): sd.h database.h

configure: configure.in
	-autoconf

Makefile:: configure
	$(srcdir)/configure

Makefile:: Makefile.in config.status
	./config.status

info: sd_doc.info
dvi: sd_doc.dvi
ps: sd_doc.ps

sd_doc.dvi sd_doc.info sd_doc.txt: sd_doc.txinfo readme.txinfo install.txinfo

# additional suffixes used for the documentation
.SUFFIXES: .dvi .info .txt .txinfo

RM = rm -f

MAKEINFO = makeinfo --no-split
MAKE_ASCII = makeinfo --no-split --no-headers
TXI2DVI = tex
DVIPS = dvips

# We do it twice, so cross references will be reconciled.
.txinfo.dvi:
	$(TXI2DVI) $<
	$(TXI2DVI) $<

.txinfo.info:
	$(MAKEINFO) -I$(srcdir) $<

.txinfo.txt:
	$(MAKE_ASCII) -o $@ -I$(srcdir) $<

sd_doc.ps: sd_doc.dvi
	$(DVIPS) -o $@ $?

# Stephen's fancy way of producing a pretty, compact PostScript file.
# You don't want to know.
sd_doc.PS: sd_doc.txinfo readme.txinfo install.txinfo
	if [ -r make-ps ]; then make-ps; \
	else make sd_doc.ps && mv sd_doc.ps sd_doc.PS; fi

INSTALL: install.txinfo
	$(MAKE_ASCII) -o $@ --no-validate $(srcdir)/install.txinfo

README: readme.txinfo
	$(MAKE_ASCII) -o $@ --no-validate $(srcdir)/readme.txinfo


docclean:
	$(RM) *.aux *.log *.toc *.dvi
	$(RM) *.cp *.cps *.fn *.fns *.ky *.kys *.pg *.pgs *.tp *.tps *.vr *.vrs

clean:: docclean
clean::
	$(RM) *.o sd sdtty mkcalls
	$(RM) sd_calls.dat sd.tar sd.tar.Z
	$(RM) lint.out

distclean: clean
	$(RM) sequence.*
	$(RM) *~ core

realclean: distclean
	$(RM) *.info *.PS sd_doc.txt sd_doc.ps

LINT = /usr/lang/alint

lint:
	$(LINT) -ux $(SD_SRCS) $(SDX11_SRC)

DISTTXT = README INSTALL Relnotes oldnotes COPYING \
            Imakefile Makefile.in configure configure.in Sd.res sd_calls.txt \
            db_doc.txt sd_doc.txinfo readme.txinfo install.txinfo \
            sd_doc.PS sd_doc.txt
DISTSRCS = sd.h database.h paths.h sdui-ttu.h sdmatch.h
MACFILES = MacSd.p.Hqx MacSd.p.rsrc.Hqx Macwdef.p.Hqx \
            macalert.c maccomp.c macdlog.c macevent.c macguts.h maclabel.c \
            macmatch.c macmenu.c macpref.c macrec.c macsel.c macstart.c \
            macstuff.c mactext.c macutil.c macwdef.c macwin.c macwmgr.c \
            sdsi-mac.c sdui-mac.c
PCFILES = pcfiles.lnk makefile.pc
DISTFILES = $(DISTTXT) $(SRCS) $(DISTSRCS) $(MACFILES) $(PCFILES)

TAR = tar cvf sd.tar

dist: dist-files
	$(TAR) $(DISTFILES)
	compress sd.tar

dist-files: configure INSTALL README sd_doc.txt sd_doc.PS pc-files

ls:
	@echo $(DISTFILES)

bnarc:
	lharc a sd300bn readme install relnotes oldnotes copying \
	 sd_calls.txt sd_calls.dat db_doc.txt \
	 sdtty.exe mkcalls.exe go32.exe \
	 sd_doc.txt sd_doc.ps
	lharc s sd300bn

pc-files: pcfiles.lnk makefile.pc

pcfiles.lnk: Makefile.in
	rm -f $@
	for obj in $(SD_OBJS) $(SDTTY_OBJ_PC); do echo $$obj; done >> $@

LN = @LN_S@

makefile.pc: configure Makefile.in
	-mv config.status config.status.save
	-$(LN) Makefile.in makefile.pc.in
	$(srcdir)/configure --with-pc
	-mv config.status.save config.status
	-rm makefile.pc.in
