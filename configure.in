AC_REVISION(Time-stamp: "95/04/26 16:12:34 gildea")
# configure script for Sd (square dance caller's helper)
#
# options:
#    --with-warnings: of interest to developers only
#		(not implemented for all compilers)
#    --with-pc: generate makefile for use on IBM-PC running DOS
#		with dmake and djgpp C compiler
#    --with-bindist: do more configuration to allow creation
#		of a binary distribution.  Of interest to developers only.
#
AC_INIT(sdmain.c)
CONFIG_FILES=Makefile

[#] Extract the version number from the source

VERSION=`sed -n 's/^#define VERSION_STRING "\(.*\)"$/\1/p' "$srcdir/sdmain.c"`
AC_SUBST(VERSION)

[#] See if this is a build with djgpp for a PC.

AC_WITH(pc,[
dnl Make the PC makefile have a different name if called from Makefile.
test -r makefile.pc.in && CONFIG_FILES=makefile.pc
echo "making ${CONFIG_FILES} for djgpp on a PC"
[#] ****** Beginning of PC section ******
SDTTY_OBJ="$(SDTTY_OBJ_PC)"
[#] DOS can't handle long command lines
SDTTY_OBJS="@pcfiles.lnk"
CC=gcc
CDEBUGFLAGS="-O2 -Wall -Wno-switch -Wno-uninitialized -Wno-char-subscripts"
DEFS=
TTY_FLAGS=
TTY_LIBS=-lpc
X11_LIBS=
LN_S="ln -s"
SET_MAKE="MAKE=make"	dnl is this necessary for dmake?
dnl those are Tab characters in the next two lines
STRIP="	strip \$@"
COFF2EXE="	coff2exe \$@"
AC_SUBST(STRIP)dnl
AC_SUBST(COFF2EXE)dnl
DEFAULT_TARGET=alltty
dnl This rule is for dmake on DOS, in case not installed for djgpp
[#] ****** End of PC section ******
],
[
[#] ****** Beginning of Unix section ******
echo "making ${CONFIG_FILES} for Unix"
AC_CHECKING(for compiler type)

AC_WITH(cc,CC=cc)
AC_GCC_TRADITIONAL
CDEBUGFLAGS=-O

[#] If we didn't get gcc, look for other compilers.  Set CDEBUGFLAGS appropriately.
[#] In any case, deal with the "with-warnings" switch.

if test -n "$GCC"; then
  AC_WITH(warnings, CC="$CC -Wall -Wno-switch -Wno-implicit -Wno-parentheses -Wshadow -Wpointer-arith")
else
  AC_VERBOSE(not using gcc: looking for other compilers)
  AC_CHECKING(for HP compiler)
  AC_PROGRAM_EGREP(yes,
[#ifdef __hpux
yes
#endif],CC="$CC -Aa -z +DA1.1 -D_AES_SOURCE"
  DEFS="+O3 +Obb750"
  [AC_WITH(warnings, CC="$CC +w1")
   CDEBUGFLAGS="$DEFS"
   DEFS=])
fi

[#] Now CC should contain compiler invocation string, with switches.
[#] CDEBUGFLAGS should contain optimization/debug switches.

AC_VERBOSE(got compiler type)

AC_CHECKING(for signed chars)

AC_TEST_PROGRAM([main(){char c; c = 0xFF; if (c<0) exit(0); else exit(1);}],
,[echo "the char data type on your system is unsigned; my condolences"
 DEFS="$DEFS -DNO_SIGNED_CHAR"])

AC_CHECKING(whether -I$srcdir is needed)
AC_TEST_CPP([#include "sd.h"], , DEFS="$DEFS -I$srcdir")

[#] Begin X11 investigation.

x_direct_test_library='Xaw'
x_direct_test_include='X11/Xaw/Label.h'
AC_FIND_X
if test -n "$x_includes"; then
  X11_FLAGS="-I$x_includes"
fi
if test -n "$x_libraries"; then
  x_flags="-L$x_libraries"
fi
if test -n "$no_x"; then
  echo "note: cannot find X11 headers and libraries"
fi

[#] get system name and tar flags for making binary distribution

dnl this is optional because we don't distribute config.guess
AC_WITH(bindist,[
AC_CHECKING(system type)
dnl figure out the host type for naming the binary tar file
dnl AC_CANONICAL_HOST
dnl SYSTEM=$host_os
SYSTEM=`config.guess | sed -e 's/.*-//' -e 's/\..*//'`
AC_SUBST(SYSTEM)
BINDIST_RULE='bindist: $(BIN_TARFILE).Z'
AC_SUBST(BINDIST_RULE)
dnl figure out how to not use shared X libraries, because
dnl I have much newer ones than most people.
case "$CC" in
    gcc*)
	STATIC=-static
        ;;
    *)
	case "$SYSTEM" in
	    sunos4)
		STATIC=-Bstatic
		DYNAMIC=-Bdynamic
		;;
	    solaris2)
		STATIC=-Bstatic
		DYNAMIC="-Bdynamic -lintl -lw -ldl"
		;;
	    irix*)
		dnl use vendor libraries
		x_flags=
		;;
	esac
esac
AC_SUBST(STATIC)
AC_SUBST(DYNAMIC)
],[
SYSTEM=unknown
BINDIST_RULE=
STATIC=
])

dnl for SVR4, check for existence of these libraries, add them to LIBS if found
SYSLIBS=
AC_HAVE_LIBRARY(socket, SYSLIBS="-lsocket")
AC_HAVE_LIBRARY(nsl, SYSLIBS="$SYSLIBS -lnsl")

dnl for X11R6, check for new support libraries
LIBS="$x_flags $SYSLIBS"
R6LIBS=
AC_HAVE_LIBRARY(ICE, LIBS="$LIBS -lICE"; R6LIBS="-lICE")
AC_HAVE_LIBRARY(SM, R6LIBS="-lSM $R6LIBS")

X11_LIBS="$x_flags -lXaw -lXmu -lXt $R6LIBS -lXext -lX11 $SYSLIBS"

if test -n "$x_libraries"; then
  dnl SunOS 5 needs -R with shared libraries
  AC_CHECKING(whether -R$x_libraries is needed)
  LIBS="$STATIC $X11_LIBS"
  AC_TEST_PROGRAM([main(){XDisplayName(0); exit(0);}],
    ,[# losing, try adding -R
    LIBS="$LIBS -R$x_libraries"
    AC_TEST_PROGRAM([main(){XDisplayName(0); exit(0);}]
    ,[echo "your system requires the non-standard -R argument; my condolences"
     X11_LIBS="$X11_LIBS -R$x_libraries"])])
fi

[#] End of X11 investigation, begin curses investigation.

AC_CHECKING(for curses include files and libraries ...)

[#] We do NOT simply search for the existence of directories /usr/5include
[#] or /usr/5lib.  The standards (OSF and SysV) simply say that the curses
[#] service is supposed to work.  Naturally.  With the obvious include files,
[#] in the obvious places.  They don't say anything about requiring that the
[#] files /usr/5include/curses.h or /usr/5lib/libcurses.a *NOT* exist.  If we
[#] searched for the existence of those files, then a totally compliant system
[#] in which /usr/5include/curses.h was a link to /etc/passwd would fail.
[#] So we first test for conformance to the SysV or OSF standards.
[#] Only if that fails do we assume we are on a non-standards-compliant
[#] system (e.g. SunOS) and look for the other directories.  If that fails,
[#] we shut off curses completely.
[#]
[#] It happens that SunOS appears superficially to comply with the curses
[#] standard when the natural directories are used.  It has all the necessary
[#] files.  The problem is that, when sdtty is compiled for SunOS, we get
[#] these undefined globals:  __tty, __tty_ch, __echoit, and __rawmode.
[#] We assume they are requested by some functions that sdtty uses, but we
[#] don't know which ones.  So we apply a very rigorous and thorough test
[#] of the curses service, in which we check that every function that sdtty
[#] is known to use can be compiled and linked without error, including that
[#] insidious and revolting macro "getyx".
[#] That is why the test below is such a mess.

CFLAGS=""
LIBS="-lcurses"
curses_prog='
#include <curses.h>
#include <unistd.h>
int ly, lx;
initscr();            noecho();   cbreak();         scrollok(stdscr, LINES);
idlok(stdscr, TRUE);  endwin();   (void) getch();   clrtoeol();
clrtobot();           refresh();  move(1, 2);       addstr((char *) 0);
getstr((char *) 0);   addch(3);   beep();           getyx(stdscr, ly, lx);
'
AC_COMPILE_CHECK([library in normal location], , [$curses_prog],
    got_curses_libs=1)

if test -z "$got_curses_libs"; then
  CFLAGS="-I/usr/5include"
  LIBS="-L/usr/5lib -lcurses"
  AC_COMPILE_CHECK([library in /usr/5lib], , [$curses_prog],
    got_curses_libs=1)
fi

if test -z "$got_curses_libs"; then
  echo "********************************************************************"
  echo "* NOTE: Not able to build curses programs, disabling curses.       *"
  echo "* Sdtty will always behave as if the \"-no_cursor\" switch given.    *"
  echo "********************************************************************"
  CFLAGS="-DNO_CURSES"
  LIBS=""
fi

dnl can add tests for additional library directories here
dnl OSF/1 might put it in /usr/ccs/lib

TTY_FLAGS="$CFLAGS"
TTY_LIBS="$LIBS"
SDTTY_OBJ='$(SDTTY_OBJ_UNIX)'
SDTTY_OBJS='$(SD_OBJS) $(SDTTY_OBJ)'

AC_LN_S		dnl set the definition of "LN_S".
AC_SET_MAKE	dnl set MAKE variable if necessary

dnl System V has the "h" flag backward.
rm -f conftest.l1
touch conftest.l2
$LN_S conftest.l2 conftest.l1
if tar cfh conftest.tar conftest.l1 2>/dev/null &&
   tar tf conftest.tar | grep -v link > /dev/null
then
    TARFLAGS=cvfh
else
    TARFLAGS=cvfL
fi
rm -f conftest.l1 conftest.l2 conftest.tar
AC_SUBST(TARFLAGS)


dnl since user chose configure over xmkmf, lean towards non-X
if test -z "$no_x" -a -n "$DISPLAY"; then
  DEFAULT_TARGET=allx11
else
  DEFAULT_TARGET=alltty
fi

[#] ****** End of Unix section ******
])

echo "compilation settings are as follows:"
echo "  compiler invocation (CC) = $CC"
echo "  general compilation flags (DEFS) = $DEFS"
echo "  extra flags for optimization/debug (CDEBUGFLAGS) = $CDEBUGFLAGS"
echo "  extra flags for compiling sdui-x11.c (X11_FLAGS) = $X11_FLAGS"
echo "  extra flags for compiling sdui-ttu.c (TTY_FLAGS) = $TTY_FLAGS"
echo "  flags for linking X11 (X11_LIBS) = $X11_LIBS"
echo "  flags for linking sdtty (TTY_LIBS) = $TTY_LIBS"

AC_SUBST(CONFIG_FILES)dnl
AC_SUBST(CC)dnl
AC_SUBST(CDEBUGFLAGS)dnl
AC_SUBST(DEFS)dnl
AC_SUBST(X11_FLAGS)dnl
AC_SUBST(X11_LIBS)dnl
AC_SUBST(TTY_FLAGS)dnl
AC_SUBST(TTY_LIBS)dnl
dnl
AC_SUBST(LN_S)dnl
AC_SUBST(SDTTY_OBJ)dnl
AC_SUBST(SDTTY_OBJS)dnl
AC_SUBST(DEFAULT_TARGET)dnl
dnl
AC_OUTPUT(Makefile)dnl
