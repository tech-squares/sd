This file is automatically generated from install.txinfo.  Do not edit.

Building and Installing
***********************

   To compile Sd, you need a C compiler that

   * can handle full ANSI C, and

   * has 32-bit `int's.

   `mkcalls' must be run once to compile `sd_calls.txt', the calls
database, into `sd_calls.dat', the binary file used by Sd.  This
program is not used on the Macintosh; the Macintosh version of `sd'
performs compilation.

   The program is known to operate on the following configurations:
        SunOS 4.1.3, gcc 2.6.0, X11 Release 6 with public patches 1-4,
           the twm window manager, on Sun 4 (Sparc)
        Domain/OS 10.4, C compiler 6.9, Dialog 2.0, on Apollo M68K
        OSF/1.0.A, C compiler 1.0, X11 Release 4, on HP series 700
        HP-UX 8.07, C compiler 8.71, X11 Release 4, on HP series 700
        HP-UX 9.0, C compiler 9.15, X11 Release 5, on HP series 700
        IRIX 5.0 on SGI Indigo
        Intel 80486, MS-DOS 5.00, DJGPP 1.11, QEMM
        Macintosh System 7.1, Think C 7.0

Building on Unix
================

   To compile and link Sd, you need an ANSI C compiler (`gcc' qualifies)
and the Athena Widgets from X11 Release 4 or later.

   If your X system was compiled with an ANSI C compiler, you can run
`xmkmf', which will use `Imakefile' and your local X configuration
information to generate a `Makefile':

     xmkmf
     make

   If that doesn't work, typically because your X system was *not*
compiled with an ANSI C compiler, run `./configure', which will use
`Makefile.in' to create a `Makefile' by examining your system and
trying to figure out what options to use:

     ./configure
     make

   Using `configure' is not as reliable as using `xmkmf' because
`configure' has to guess the local preferences, whereas `xmkmf' reads a
local configuration file, which is usually, but not always, reliable.

   Once you have a `Makefile', type `make' to build sd.  If you are not
running X, `make' will build sdtty, the character-oriented version of
the program.

   `mkcalls' must be run once to compile `sd_calls.txt', the calls
database, into `sd_calls.dat', the binary file used by Sd.  This step
is done automatically by `make'.

   Sun's OpenWindows 3.0 has a buggy `xmkmf', so you cannot use it.
Instead, set the environment variable `OPENWINHOME' appropriately
(typically to `/usr/openwin'), then type

     imake -I$OPENWINHOME/lib/config

   IBM's AIX 3.2 has a buggy C optimizer.  If you find that some calls
are missing from the call menus, compile `sdinit.c' without
optimization.

Building on the Mac with Think C
================================

   To compile this program with Think C, you need to have a project file
and a resource file.  These files are distributed in BinHex 4.0 format
(`MacSd.p.Hqx', `Macwdef.p.Hqx', and `MacSd.p.rsrc.Hqx').  Run these
files through a BinHex-decoding program (e.g., BinHex 4.0, StuffIt
Expander, among others) before trying to use them.  The files produced
are (`MacSd.p', `macwdef.p', and `MacSd.p.rsrc').

   The project files included here already have the necessary options
set (e.g., 4-byte integers, STDC defined, Far Data option) and contain
references to all the necessary source files.  You may wish to change
the processor selected on the Compiler Settings page of the Options menu
if you have a 68020 or 68030 processor.  If you do not plan to change
the window definition resource for the utility windows, you will not
need to use `Macwdef.p.Hqx'.

   You will need to create a 4-byte-integer version of your ANSI library
if you do not already have one.  The ANSI library file is located in
the C Libraries Folder in the Think C Folder.  Make a second copy of
your ANSI library file, and name it `ANSI 4 byte'.  Open the new ANSI
file as a Project File in Think C, select 4-byte integers (from the
Compiler Settings page), and recompile it (use `Bring Up to Date' from
the Project Menu).

   Once you have finished this, you should be able to open the Sd
Project file (`MacSd.p') and compile Sd by selecting `Build Application'
from the Project Menu.

   To update to a new release of `sd', simply replace all of your old
sources with new sources, or move the old sources to a folder named,
e.g., `(Old Sources)'.  (A folder name in parentheses tells Think C not
to look in this folder for sources.)  Then select `Make...' from the
Source Menu.  You will get a menu of `.c' files to check off for
recompilation.  Select `Check All .c', and Think C will recompile all
of your sources.  (Unlike the Unix `make' command, Think C does not
rely on file modification dates by default.) After recompiling the
sources, select `Build Application' from the Project Menu, as before.

Building on DOS with gcc
========================

   `sdtty' and `mkcalls' run on MS-DOS using the QEMM memory manager.
`sdtty' is about 2Mb.  The file `sdui-tpc.c' provides an interface to
the console I/O package distributed with `djgpp', a port of `gcc' to
DOS which runs under Desqview and Desqview/X.

   `djgpp' is available via anonymous FTP in the directory
`pub/msdos/djgpp/' on host omnigate.clarkson.edu.  FTP is the Internet
file transfer protocol.

   The file `makefile.pc' is a `Makefile' for `dmake', a make program
for DOS.  Rename it to `makefile' before building on a PC. It was
created by the `configure' script (*note Building on Unix::.) with the
command line `configure --with-pc'.

Formatting the Documentation
============================

   The file `sd_doc.txinfo' is in Texinfo format, which allows both
on-line information and a printed manual to be generated from the same
source document.  You can run it through TeX to produce a printed
manual, or you can format it for use with `Info', a hypertext
documentation reader.

   Support for Texinfo-style documentation is distributed as part of
Emacs and as a stand-alone package, both available via anonymous ftp
from prep.ai.mit.edu and other GNU software archives.

   Both the Emacs and Texinfo distributions contain `texinfo.tex', the
macros required to print the document with TeX.  In Emacs, use
`M-x texinfo-format-buffer' to convert to Info, and use `M-x info' to
read the document.  In the Texinfo package, `makeinfo' converts to
Info, and `info' is the reader; both are C programs.

   You can use the following `make' commands to format the
documentation in different ways:

`make info'
     convert to Info format

`make dvi'
     run through TeX.  Use this to make hardcopy.

`make ps'
     run through TeX and `dvips'.  Use this to make a PostScript file.

`make html'
     convert to HTML format, for use on a World Wide Web server

   The source distribution contains `sd_doc.PS', a PostScript version,
and `sd_doc.txt', a plain text version of the documentation.

Manifest
========

   These are the files in the source distribution:

README
     Introduction from the manual

INSTALL
     building and installing (also from the manual)

COPYING
     GNU General Public License

Relnotes
     What's new in this release

oldnotes
     What was new in previous releases

Imakefile
     generates a Makefile

configure
     an alternate way to make a Makefile

configure.in
     configure file source

Makefile.in
     initial Makefile source used by configure

Sd.res
     sample X11 user resource file

sd_calls.txt
     the calls database source

db_doc.txt
     describes the format of the calls database

sd_doc.txinfo
     user documentation source

readme.txinfo
     README file source

install.txinfo
     INSTALL file source

gpl.txinfo
     GNU General Public License source

sd_doc.PS
     user documentation as PostScript

sd_doc.txt
     user documentation as plain text

sdmain.c
     the top level program

sdinit.c
     call menu initialization

sdutil.c
     general utilities, mostly for handling text

sdbasic.c
     execution routines for basic (defined by array) calls

sdtables.c
     many tables

sdctable.c
     concept tables

sdtop.c
     top level call execution

sdconcpt.c
     implementation of many concepts

sdpreds.c
     predicates

sd12.c
     a few miscellaneous concepts

sd16.c
     a few miscellaneous concepts

sdgetout.c
     resolving, reconciling, etc.

sdmoves.c
     execution routines for general calls

sdtand.c
     tandem and as couples concepts

sdconc.c
     concentric and related concepts

sdistort.c
     distorted formation concepts

sdsi.c
     system interface for Posix systems

sdui-x11.c
     user interface for X Window System

sdui-tty.c
     user interface for tty version

sdui-ttu.c
     user interface support for tty version on Unix

sdui-tpc.c
     user interface support for tty version on PCs

mkcalls.c
     top level driver for calls database complier

dbcomp.c
     guts of calls database complier

sd.h
     included by all Sd source files

database.h
     database structure definitions

paths.h
     defaults for file names

sdui-ttu.h
     definitions used by tty Unix support

sdmatch.c
     completing reader.  Used in the Mac version and in sdtty.

sdmatch.h
     definitions for sdmatch.c

macalert.c
     alert boxes for read/write failures (Mac version)

maccomp.c
     compiles database (Mac version)

macdlog.c
     dialog boxes (Mac version)

macevent.c
     handles mouse clicks (Mac version)

macguts.h
     header file for Macintosh-specific items

maclabel.c
     gets sequence label (Mac version)

macmatch.c
     displays window containing matching calls (Mac version)

macmenu.c
     pull-down menu support (Mac version)

macpref.c
     user preferences (Mac version)

macsel.c
     gets selectors, quantifiers, and directions (Mac version)

macstart.c
     start up dialog box (Mac version)

macstuff.c
     initialization, user commands (Mac version)

mactext.c
     window scrolling, etc (Mac version)

macutil.c
     miscellaneous routines, mostly file I/O (Mac version)

macwdef.c
     window definition code resource for utility windows (Mac version)

macwin.c
     support for main window layout (Mac version)

macwmgr.c
     window manager (Mac version)

sdsi-mac.c
     Macintosh system interface routines

sdui-mac.c
     Macintosh user interface routines

MacSd.p.Hqx
     BinHex-encoded Project File for compiling on the Mac with Think C

MacSd.p.rsrc.Hqx
     BinHex-encoded Resource File for the Mac

Macwdef.p.Hqx
     BinHex-encoded Project File for changing the window definitions on
     the Mac using `macwdef.c'

makefile.pc
     makefile for use on a PC.  Generated by `configure --with-pc'.

pcfiles.lnk
     list of object files for dmake on a PC, which cannot handle long
     command lines.

