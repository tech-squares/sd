\input texinfo @c %**start of header -*-texinfo-*-
@c user documentation for Sd (square dance caller's helper)
@c See the file INSTALL for how to format and view.
@setfilename sd_doc.info
@settitle Sd
@c @subtitle A Square Dance Caller's Helper
@c
@set Time-stamp: April 7, 1996
@tex
\global\setfont\smallrm\rmshape{8}{1000}
\global\font\smallsy=cmsy9
\global\def\keycap#1{{\smallrm\textfont2=\smallsy \leavevmode\hbox{%
  \raise0.4pt\hbox{$\langle$}\kern-.08em\vtop{%
    \vbox{\hrule\kern-0.4pt
     \hbox{\raise0.4pt\hbox{\vphantom{$\langle$}}\uppercase{#1}}}%
    \kern-0.4pt\hrule}%
  \kern-.06em\raise0.4pt\hbox{$\rangle$}}}}
@end tex
@set sd-version 31.65
@set full-manual
@c %**end of header
@iftex
@finalout
@end iftex
@c
@c We want the title and copyright stuff in the info file, too,
@c (and most importantly, in the ASCII version created by
@c "makeinfo --no-headers") so it cannot be inside a @titlepage environment.
@headings off
@iftex
@ @c hard Space to make vskip work
@vskip 0pt plus 1fill
@end iftex
@c
@center @titlefont{Sd}
@sp 1
@center A Square Dance Caller's Helper
@sp 10
@center William B. Ackerman and Stephen Gildea
@sp 7
@center @value{Time-stamp:}
@sp 1
@center for Sd version @value{sd-version}
@c
@page    @c end of title page
@iftex
@ @c hard Space to make vskip work
@vskip 0pt plus 1fill
@end iftex

Copyright @copyright{} 1992-1996 William B. Ackerman and Stephen Gildea

@ignore
Permission is granted to process this file through TeX and print the
results, provided the printed document carries copying permission notice
identical to this one except for the removal of this paragraph (this
paragraph not being relevant to the printed manual).

@end ignore
Permission is granted to make and distribute verbatim copies of this manual
provided the copyright notice and this permission notice are preserved
intact on all copies.

The authors disclaim all liability for your use of this software and 
documentation and make no representation as to the suitability of the 
software for any purpose.  THE SOFTWARE IS PROVIDED ``AS IS'' WITHOUT 
WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO, 
WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND 
NONINFRINGMENT.

@page	@c end of copyright page
@headings double

@node Top, Intro, (dir), (dir)

@menu
This file documents Sd, a square dance caller's helper,
version @value{sd-version}.

To get started quickly, type @key{1} to go to @dots{}

* Getting Started::             Getting started quickly with Sd

To start reading the manual from the beginning, type @key{n} to go to
the next node.  Or go directly to a topic of interest by picking an item
out of one of the menus here.

This is the summary table of contents:

* Intro::                       Introduction
* Getting Started::             Getting started quickly with Sd
* The Completing Reader for Sdtty:: The Completing Reader for Sdtty
* Invoking Sd::                 Invoking Sd via Command Line
* The Initialization File::     The Initialization File
* Calling::                     Calling
* Resolving and Searching::     Resolving and Searching
* Misc Commands::               Miscellaneous Commands
* Terminal Interface::          Terminal Interface
* Linguistic Idiosyncrasies::   Linguistic Idiosyncrasies
* Using Off-Level Concepts::    Using Off-Level Concepts
* Call Notes::                  Call Notes
* Concept Notes::               Concept Notes
* Misc Advice::                 Miscellaneous Advice and Warnings
* Customization::               Customization with X Resources
* Versions::                    Version Numbers
@ifset copyleft
* Copying::                     The GNU General Public License
@end ifset

This is the complete table of contents:

Introduction

* Documentation::               Documentation
* Getting Sd or Sdtty::         Getting Sd or Sdtty
* Author Contact::              How to Contact the Authors
* Acknowledgements::            Acknowledgements

The Completing Reader for Sdtty

* Question Mark::               Question Mark and Exclamation Point
* Minimizing Typing::           Minimizing the Amount of Typing You Must Do

Invoking Sd via Command Line

* Command-Line Options::        Command-Line Options
* Abridgement::                   Abridgement

The Initialization File

* Session Control::             Session Control
* Option Control::              Option Control
* Sample Initialization Files:: Sample Initialization Files

Calling

* Startup Screen::              The Startup Screen
* Heads/Sides Start::             starting with the heads or sides
* 1P2P Lines::                    starting with 1P2P lines
* Just As They Are::              starting with a squared set
* Entering Calls::              Entering Calls
* Call Variations::               how to write Call Variations
* Call Menus::                    call menus
* Scrolling::                     the call menu scroll bar
* Entering Concepts::           Entering Concepts
* Call Modifications::          Call Modifications
* Discarding Concepts After an Error:: Discarding Concepts After an Error
* Asymmetric Selectors::        Asymmetric Selectors

Resolving and Searching

* Resolving::                   Resolving
* Normalize and Standardize::   Normalizing or Standardizing the Setup
* Pick Random Call::            Letting the program pick a random call
* Create Setup::                Creating a Specific Setup
* Reconcile::                   The @code{Reconcile} operation.

Miscellaneous Commands

* Save Sequence::               Saving the Sequence
* Change Output File::          Changing the Output File
* Change Title::                Changing the Title
* Abort/Exit/Undo::             Abort, Exit, and Undo
* Inserting Comments::          Inserting Comments
* Keeping Pictures::            Keeping Pictures of the Setup
* Changing Modes::              Changing Modes

Terminal Interface

* Sdtty::                       The @code{sdtty} program
* Function Keys in Sdtty::      Function Keys
* Sdtty on the PC::             The PC version
* Sdtty on Unix::               The Unix version

Call Notes

* Sweeping Direction::          Sweeping Direction
* C1 Single Rotate::            C1 Single Rotate
* Spread::                      Spread
* <ANYTHING> and circle::       <ANYTHING> and circle
* Centers Back Away::           Centers Back Away
* So-and-so Promenade::         So-and-so Promenade
* Ends Divide::                 Ends Divide
* Little/Little More/Plenty::   Little/Little More/Plenty
* Flip Back::                   Flip Back
* Face <DIRECTION>::            Face <DIRECTION>
* Grand Chain 8::               Grand Chain 8
* Snag Circulate::              Snag Circulate
* Funny Square Thru::           Funny Square Thru
* Rotate from Columns::         Rotate from Columns
* Recycle::                     Recycle has two forms in the Database
* Going Through Impossible Situations:: Going Through Impossible Situations

Concept Notes

* Phantom Concepts::            Phantom Concepts
* Tandem or Couples Concepts::  Tandem or Couples Concepts
* Distorted Setup Concepts::    Distorted Setup Concepts
* 4-person distorted concepts:: 4-person distorted concepts
* Miscellaneous Concepts::      Miscellaneous Concepts
* Main Menu Concepts::          Miscellaneous Concepts Appearing Only in the Main Menu
* Concentric::                  Concentric
* Assume Waves::                Assume Waves
* Assuming a Quarter-Tag::      Assuming a Quarter-Tag
* Designating Certain People::  Designating Certain People
* 12 Matrix and 16 Matrix::     12 Matrix and 16 Matrix

@end menu

@include readme.txinfo

@node Getting Started, The Completing Reader for Sdtty, Intro, Top
@chapter Getting Started

@code{Sd} or @code{Sdtty} can be run from a shell (on Unix or DOS) by typing its name
and the level you want to write sequences for, e.g.,

@example
sd c2
@end example

or

@example
sdtty c2
@end example

In addition to calls and concepts, there are program commands for actions
such as automatic resolves, exiting the program, and other miscellaneous
actions.  @xref{Resolving and Searching}.
In @code{sd}, they are found in the menu in the upper
left corner.
In @code{sdtty}, just type the name of the command.

The following chapters cover the operation of @code{Sd} and
@code{Sdtty} in detail.

@node The Completing Reader for Sdtty, Invoking Sd, Getting Started, Top
@chapter The Completing Reader for Sdtty

@code{Sdtty} uses a @dfn{completing reader} for interpreting the
characters that you type.
This means that you only need to type as much of the word or command as is
required to be unambiguous.  Whenever you type a space, @code{sdtty} completes
the word you just typed, if necessary and possible.  Whenever you type
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
(or
@iftex
@keycap{RETURN}
@end iftex
@ifinfo
@key{<RETURN>}
@end ifinfo
on some keyboards),
@code{sdtty} completes the entire line
if necessary and possible.

For example, at mainstream, you can enter a swing thru by typing
@iftex
@samp{swing thru @keycap{ENTER}}.
@end iftex
@ifinfo
@samp{swing thru @key{<ENTER>}}.
@end ifinfo
When the space after @samp{swing} is typed,
no completion is required.  When the
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after @samp{thru} is typed, no completion is required either.  If you type
@iftex
@samp{sw thru @keycap{ENTER}}
@end iftex
@ifinfo
@samp{sw thru @key{<ENTER>}}
@end ifinfo
instead, @code{sdtty} completes the word @samp{swing}.  It does this by printing
@samp{ing} on the screen as soon as you type the space after
@samp{sw}.  If you type
@iftex
@samp{sw th @keycap{ENTER}},
@end iftex
@ifinfo
@samp{sw th @key{<ENTER>}},
@end ifinfo
@code{sdtty} will complete both words.  It prints @samp{ing} as soon as you type the
space, and it prints @samp{ru} as soon as you type
@iftex
@keycap{ENTER}.
@end iftex
@ifinfo
@key{<ENTER>}.
@end ifinfo
In fact, you could just type
@iftex
@samp{sw @keycap{ENTER}}.
@end iftex
@ifinfo
@samp{sw @key{<ENTER>}}.
@end ifinfo
@code{Sdtty} completes the entire line, if necessary
and possible, when return is typed.  So it will print @samp{ing thru} after
your @samp{sw}.  In each case, the full phrase @samp{swing thru} will appear
on the screen, and will be printed in the final sequence.

Because of this completion, you can get into the habit of just typing
@iftex
@samp{sw @keycap{ENTER}}
@end iftex
@ifinfo
@samp{sw @key{<ENTER>}}
@end ifinfo
at mainstream.  However, it will only work if what you type is unambiguous.
At higher levels, @samp{sw} could also mean @samp{swap around}.  When there is an
ambiguity, @code{sdtty} will beep at you and complete as much as it can.  You can
type @samp{?} or @samp{!} (discussed below) to see what the problem is.

With practice, you can get a reasonable feel for how much abbreviation you can
get away with in a given context.

Typing
@iftex
@keycap{ESC}
@end iftex
@ifinfo
@key{<ESC>}
@end ifinfo
(or
@iftex
@keycap{ALT MODE}
@end iftex
@ifinfo
@key{<ALT MODE>}
@end ifinfo
on some keyboards) or
@iftex
@keycap{TAB}
@end iftex
@ifinfo
@key{<TAB>}
@end ifinfo
will complete the entire line, just like
@iftex
@keycap{ENTER},
@end iftex
@ifinfo
@key{<ENTER>},
@end ifinfo
but will not actually process the line.  If you like what you see, you can
then press
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
to execute the call.  If the line is ambiguous,
the program will print as much of the line as it can.  When used effectively,
this can save you a lot of typing.

@code{Sdtty}'s completing reader is completely indifferent to the capitalization of
what you type.  It capitalizes its output according to its own notions of
aesthetics and ambiguity avoidance.

@menu
* Question Mark::               Question Mark and Exclamation Point
* Minimizing Typing::           Minimizing the Amount of Typing You Must Do
@end menu

@node Question Mark, Minimizing Typing,  , The Completing Reader for Sdtty
@section Question Mark and Exclamation Point

At any time, you can type a question mark or exclamation point.  Either of
these will make @code{sdtty} print out all legal completions of the line
that has been entered so far.  If what you
have typed is unambiguous, that will consist of just one thing.  If you
have typed nothing, it will consist of every legal thing you could type---typically
that is every call, every concept, and every special command.

The difference between question mark and exclamation point is that the
question mark actually attempts to execute every call in the current
call menu (that is, every call whose name matches the text you have
typed so far), and shows only those that can be legally performed.
Exclamation point simply prints every call on the menu that matches
the text that you have typed so far.  Remember that the call menus
are only approximate---they often have many calls listed that are
in fact not legal in the present setup.  This is particularly true
when concepts are in place.  The program simply has no idea what calls
are legal without trying them.  Question mark tells it to do so.

The difference between question mark and exclamation point only applies
to calls.  All concepts and special commands (@code{resolve}, for example)
are always listed whenever either character is typed.

The output from typing a question mark or exclamation point may be quite lengthy.
If it fills more than one screenful, @code{sdtty} will stop and display
@samp{--More--} at the
bottom of the screen.  Type @key{<Space>} to go on to the next screenful.  Type
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
to see just one more line.  Type a backspace (or
@iftex
@keycap{DEL})
@end iftex
@ifinfo
@key{<DEL>})
@end ifinfo
to stop.  When the output ends, either because @code{sdtty} printed everything or
because you typed a backspace, the partially entered line will be redisplayed, just
as it was before you typed the question mark.

@node Minimizing Typing, , Question Mark, The Completing Reader for Sdtty
@section Minimizing the Amount of Typing You Must Do

The @code{sdtty} completion mechanism, especially the
@iftex
@keycap{ESC}
@end iftex
@ifinfo
@key{<ESC>}
@end ifinfo
(or
@iftex
@keycap{ALT MODE}
@end iftex
@ifinfo
@key{<ALT MODE>}
@end ifinfo
or
@iftex
@keycap{TAB})
@end iftex
@ifinfo
@key{<TAB>})
@end ifinfo
key, can save you a lot of typing.
For example, typing
@example
@iftex
      heads do your part @keycap{ENTER}
@end iftex
@ifinfo
      heads do your part <ENTER>
@end ifinfo
@end example
is probably more than you want to do.  If you type just
@example
      heads do
@end example
the line will be almost unambiguous---there are only two possible commands
that start this way.  By typing a question mark, @code{sdtty} will show them
to you.  They are
@example
      heads do your part
@end example
and
@example
      heads do your part (while the others)
@end example
What these concepts actually mean will be discussed at length in
@ref{Designating Certain People}.  For now, we are just discussing how to
type them.

These commands don't differ until the @samp{t} in @samp{part}.  If you type
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after @samp{part}, @code{sdtty} will know that you want the
first of these commands.  If you type a space and then a
@iftex
@keycap{ENTER},
@end iftex
@ifinfo
@key{<ENTER>},
@end ifinfo
@code{sdtty} will know that you want the second.  Does this mean that you
must type the whole command up to @samp{part}, followed by a space or
@iftex
@keycap{ENTER}?
@end iftex
@ifinfo
@key{<ENTER>}?
@end ifinfo
No.  Just type @samp{heads do}, and then press
@iftex
@keycap{ESC}.
@end iftex
@ifinfo
@key{<ESC>}.
@end ifinfo
@code{Sdtty} will display @samp{heads do your part}, since that is the text
that is common to both commands.  At that point, you may press
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
to get the @samp{heads do your part} concept.  Or you could type space
and then
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
to get the @samp{heads do your part (while the others)}
concept.  You could, of course, type the complete phrase @samp{(while the others)}
after the space, but there is no need to.  Once you type the space, @code{sdtty}
knows exactly which command you want.

What would happen if you tried to shorten the command still further by typing
just @samp{heads d} instead of @samp{heads do}?  Below C2 this would work
just fine.  At C2 and above, an ambiguity would exist because of the
@samp{heads disconnected} concept.  Typing a question mark after @samp{heads d}
will show you the ambiguity.  In general, typing a question mark will help guide
you in minimizing the amount of typing you must do.  With practice, you will
be able to enter your favorite calls and concepts with minimal typing.

Here is another example.  To enter @samp{criss cross the shadow} or
@samp{criss cross your neighbor}, it is not necessary to type
@samp{criss cross t} or @samp{criss cross y}.  You can just type @samp{cri}
followed by
@iftex
@keycap{ESC}.
@end iftex
@ifinfo
@key{<ESC>}.
@end ifinfo
The program will print everything up to the
point of ambiguity, which, at C2, is @samp{criss cross }.  At that point,
you just need to type @samp{t} or @samp{y}, followed by
@iftex
@keycap{ENTER}.
@end iftex
@ifinfo
@key{<ENTER>}.
@end ifinfo
Above C2, there are more possible calls, but typing @samp{cri}
followed by
@iftex
@keycap{ESC}
@end iftex
@ifinfo
@key{<ESC>}
@end ifinfo
is still a good way to proceed.

@node Invoking Sd, The Initialization File, The Completing Reader for Sdtty, Top
@chapter Invoking Sd via Command Line

@display
@t{sd} level [ Xt options @dots{} ] [ Sd options @dots{} ]
@t{sd} level @t{-write_list} filename
@t{sd} level @t{-write_full_list} filename
@end display

The program is normally invoked with a single argument---the level.
This is one of the following: @code{m} (mainstream), @code{p} (plus),
@code{a1}, @code{a2}, @code{c1}, @code{c2}, @code{c3a},
@code{c3}, @code{c3x}, @code{c4a}, or @code{c4}.
The level can also be determined by the selection made when using the
``session'' feature.
If the level is not given, or the program was started by a mouse
click from Windows, the program will ask you for it.
However it is specified,
the level determines the calls and concepts that will be made
available, according to our best guess of what the levels mean.  Various
optional arguments are permitted to control the window system, 
customize the list of calls used, and set other options.
These will be described later.

The call definitions will be read in from the encoded database file
@file{sd_calls.dat}.  The program will then ponder the database for a few
seconds while it determines what calls to put on what menus.  Depending
on the speed of your computer and the level you selected, this could take
from a few seconds to over a minute.

@menu
* Command-Line Options::        Command-Line Options
* Abridgement::                 Abridgement
@end menu

@node Command-Line Options, Abridgement,  , Invoking Sd
@section Command-Line Options

There are a number of option keywords that can be given to @code{sd} or @code{sdtty}
when the program is started.  These control various aspects of the program's
operation.  These keywords are placed on the command line with which the
program was invoked from the Unix shell or the DOS prompt.  Each keyword
has a hyphen in front of it.

Examples:

@display
@t{sd -singlespace plus}
@t{sdtty -discard_after_error -active_phantoms c3}
@end display

These option keywords can also be placed, without the preceding hyphens,
in the ``options'' section of the initialization file.  @xref{Option Control}.
When this is done, the options will always be in force, and do not need to
be specified each time the program is run.

The following options are used by both @code{sd} and @code{sdtty}:

@table @code
@item -db @var{filename}
location of the calls database.  The default is @file{sd_calls.dat} in
the current directory.
@item -sequence @var{filename}
base name of the file to write sequences to.  The calling level will be
appended to this name.  The default is @file{sequence}, so a complete
file name might be @file{sequence.C1}.
@item -singlespace
This makes the program write out the output file with single spacing.
This may be useful for those who use special fonts or special printer
arrangements.
@item -ignoreblanks
This makes the program recognize calls and concepts that have been typed
in without the spaces that normally separate words.  Some users prefer
abbreviated spellings like @code{inroll circulate}---when this switch is
given, you can spell it that way.  You can even type
@code{tandemreverserandomstablespinthetop} if you wish.
This also allows one to ignore hyphens, as in @code{tandembased triangles}
or to type blanks instead of hyphens, as in @code{tandem based triangles}.
In all cases the correct spelling will be printed in the transcript:
@code{in roll circulate} or @code{tandem-based triangles}.
@item -discard_after_error
This makes the program automatically discard all concepts that had
been typed prior to the current call, whenever an error occurs.
Some users may find the concept retention behavior objectionable.
@xref{Discarding Concepts After an Error}.
@item -active_phantoms
This turns on the ``active phantoms'' behavior, as though the command
@code{toggle active phantoms} had been given.
@end table

There are X resources associated with both options:
@code{Sd.sequenceFile} is equivalent to the @w{@code{-sequence}} switch, and
@code{Sd.databaseFile} is equivalent to @code{-db}.

If you almost always will be passing the the same value for a
command-line switch, you may find it more convenient to set the
corresponding resource.

With the X Window System interface, Sd accepts all Xt command-line
options.  The following are some of the more useful options for use with
Sd.

@table @code
@item -rv
reverse video
@item -bg @i{color}
background color
@item -fg @i{color}
foreground color
@item -bd @i{color}
border color
@item -font @i{font}
font used everywhere
@item -geometry @i{geom-spec}
geometry in pixels
@item -title @i{string}
title for window manager and icon use
@item -name @i{string}
name to look up resources under.  default: program name.
@item -xrm @i{resource-line}
an X resource manager string.
@end table

These options are specific to the terminal-based version, @code{sdtty}.

@table @code
@item -no_cursor
dumb terminal mode: do not use cursor motion commands to keep the screen
up-to-date efficiently.  Use this if the cursor motion and screen manipulation
operations of your terminal or operating system are not available or are not
working satisfactorily.
@item -lines @var{nlines}
the number of lines on the screen.  Default is 25.
@item -no_line_delete
do not use the insert line or delete line cursor control commands.  Use this
if these commands are not working satisfactorily on your terminal.
@item -no_graphics
Suppress the use of special PC graphics characters when drawing pictures
on the screen.  These characters are not standard on all PC's.  Pictures
drawn in the output file will never use the special graphics characters.
@end table

@node Abridgement,  , Command-Line Options, Invoking Sd
@subsection Abridgement

The program recognizes three flags which allow use of an abridged
list of calls:

@table @code
@item -write_list @var{filename}
write out the call list for the indicated level and exit
@item -write_full_list @var{filename}
write out the call list for the indicated level and all lower levels
and then exit the program.
@item -abridge @var{filename}
read in the file, strike all the calls contained therein off the menus,
and proceed.
@end table

The first two are used to prepare a call list.  The call list for the
indicated level, exactly as the calls appear in the menu, will be written
to the named file.  If @code{-write_list} is used, only the calls exactly on
that level will be written.  If @code{-write_full_list} is used, the lower level
calls will be written as well, so the file will look exactly like the
main call menu.  After performing either of these operations, the program
exits.

The third special flag is used to read in a list of calls to be avoided.
Any call listed in the file, in precisely the same format as it was written
out, will be removed from the internal database prior to running the program.
Every sequence written under control of such a file will say @samp{(abridged)}
on its header line.

To write sequences for a group that is learning C2, for example, run the
program with
@example
        sd -write_list my_group c2
@end example

Then delete from the file @file{my_group} those calls that the group has
learned, i.e., those calls not to be avoided.
When writing sequences, use the command
@example
        sd -abridge my_group c2
@end example

As the group learns new C2 calls, delete the corresponding lines from
the file @file{my_group}.  That file always contains the calls that they don't
yet know.  When the file goes to zero, they know the whole list.

Be aware that the abridgement mechanism works only for calls, not for concepts.
You must keep track of what concepts not to use.

The lines in the abridgement file must always be in exactly the same format
as the strings that are written out by the @code{-write_list} or @code{-write_full_list}
flags.  The program has no tolerance for creative capitalization, stray
blanks, or other variations.  Any line in the file that does not match a
call in the menu is simply ignored.  The order of the lines is not important.

@node The Initialization File, Calling, Invoking Sd, Top
@chapter The Initialization File

When @code{sd} or @code{sdtty} starts, it looks for a file @file{sd.ini}.
This file, if present, contains information about dances
you might be working on, and about possible individual preferences
you might have for the way the program runs.
Such a file might look like this:

@example
[Options]
discard_after_error
singlespace

[Sessions]
sequence.C3       C3           12     NACC, June 1995
sequence.C4       C4           31     NACC, June 1995
workshop          C1           75     My Wednesday group
a2stuff           A2           9      NESRDC/1995
a1stuff           A1           2      Lake Shore Farm Weekend
@end example

@menu
* Session Control::             Session Control
* Option Control::              Option Control
* Sample Initialization Files:: Sample Initialization Files
@end menu

@node Session Control, Option Control,  , The Initialization File
@section Session Control

Each line after the line @code{[Sessions]}, up until a blank line
or the end of the file, describes a possible session
of using the program, showing the output filename, level, next sequence
number, and title.

This example file shows 5 possible things you could work on.  You can select
any one of them during a session.  When the program is started, it will
display the 5 lines and ask you which one you want to use, like this:

@example
Do you want to use one of the following sessions?

  0     (no session)
  1  sequence.C3          C3         12      NACC, June 1995
  2  sequence.C4          C4         31      NACC, June 1995
  3  workshop             C1         75      My wednesday group
  4  a2stuff              A2          9      NESRDC/1995
  5  a1stuff              A1          2      Lake Shore Farm Weekend
  6     (create a new session)

Enter the number of the desired session:
@end example

If you enter ``0'', or just press
@iftex
@keycap{ENTER},
@end iftex
@ifinfo
@key{<ENTER>},
@end ifinfo
the program will ignore
the sessions and proceed normally.  If you enter the
number of one of the lines of the file, the program will operate
at that level (ignoring any level designator you might have given),
and use the named output file and title.  It will also
print a sequence number on each card, starting with the number shown.
For example, if you entered ``3'' after the file above is displayed,
the program will operate at C1.  The output file will be ``workshop''
instead of the default ``sequence.C1''.  Cards will be serialized
starting at 75.  Each card will have a title saying
``My Wednesday group''.

At the end of the session, the file will be updated with the
next index number.  For example, if you wrote 12 sequences, they would
be numbered 75 through 86, and the file would be rewritten as

@example
workshop             C1               87     My Wednesday group
@end example

so that the next session for that group would start with sequence number 87.

If, at any time during the session, you changed the output file
(with the @code{Change Output File} operation) or the
title (with the @code{Change Title} operation),
the initialization file will be updated at the end of the session to
show the effect of the change.

When the program starts, you can tell it to create a new entry in
the file by entering the number corresponding to @code{(create a new session)}.
In the above example, type ``6''.  The program will ask you for the
level and title, and will set the output file to the standard ``sequence.C1''
or whatever.  You may
use the @code{Change Output File} command and the
@code{Change Title} command to change these later if you wish.
At the end of the session, item number 6, containing the appropriate data,
will be written to the updated initialization file.

If you no longer want some entry in the initialization file,
you can delete it.  Type the negative of its line number.  In the
above example, if you entered ``-4'', the line

@example
   a2stuff              A2               9      NESRDC/1995
@end example

would be deleted.  After doing this, the program terminates
immediately.  Run it again to use the new initialization file.

Whenever the program updates the initialization file @file{sd.ini}
at the end of a session, it saves the old contents in @file{sd2.ini}.
By copying that back to @file{sd.ini}, you can restore it.

You can also edit the file with an editor.  Simple editors, such as
@samp{notepad} are preferable to sophisticated word processors when editing
this file, since word processors often insert specialized control information
into the file.

@node Option Control, Sample Initialization Files, Session Control, The Initialization File
@section Option Control

Each line after the line @code{[Options]}, up until a blank line
or the end of the file, contains a command line switch.  When the program
is started, it will behave as though those switches had been given on
the command line.  This makes it possible to encode your personal
preferences so that the program will always use them.  Do @emph{not}
place a hyphen in front of an option in the initialization file.

For example, the line

@example
   singlespace
@end example

would be used if you like your output single-spaced.

The line

@example
   no_graphics
@end example

would be used if your computer does not have the special graphics
characters.

You can edit the file with an editor such as @samp{notepad}.

@node Sample Initialization Files, , Option Control, The Initialization File
@section Sample Initialization Files

When @code{sd} or @code{sdtty} is installed, no initialization file exists,
but the files @file{sample1.ini} and @file{sample2.ini} are provided for you
in the working directory.  The @file{sample1.ini} file shows an example of
the ``session'' mechanism only, and @file{sample2.ini} show both mechanisms.
The @file{sample2.ini} file is the same as the example shown previously.
You can copy either file to @file{sd.ini} and edit it if you wish.

@node Calling, Resolving and Searching, The Initialization File, Top
@chapter Calling

This chapter describes how to use the program in its normal mode to
generate a sequence of calls of your choosing.

@menu
* Startup Screen::              The Startup Screen
* Entering Calls::              Entering Calls
* Entering Concepts::           Entering Concepts
* Call Modifications::          Call Modifications
* Discarding Concepts After an Error:: Discarding Concepts After an Error
* Asymmetric Selectors::        Asymmetric Selectors
@end menu

@node Startup Screen, Entering Calls,  , Calling
@section The Startup Screen

The startup menu is displayed when the program starts and after each
sequence has been completed and written to a file.  In addition to the
obvious program exit button, this permits you to select the starting
operation.  The selections here, and almost everywhere else in the
program, are made by moving the mouse until the cursor is over the
chosen item, and pressing Mouse Button 1 (typically the left button).

@menu
* Heads/Sides Start::           starting with the heads or sides
* 1P2P Lines::                  starting with 1P2P lines
* Just As They Are::            starting with a squared set
@end menu

@node Heads/Sides Start, 1P2P Lines,  , Startup Screen
@subsection Heads/Sides Start

If you click on @code{heads start} or @code{sides start}, the sequence will begin
with @samp{heads} or @samp{sides} and the first call.  Normally this means that the
designated people will move into the center and do the first call while
the others wait.  Subsequent calls will be directed to everyone.  For
example, one might click on @code{heads start}, and then @code{star thru}, and
then @code{double pass thru}, and so on.  You can also click on @code{heads start}
or @code{sides start} followed by a call such as @i{split square thru} or @i{split
dixie style to a wave}.  Use the @code{split} concept to get these.

If you want to have the heads go into the middle and do several calls
before the sides join in, as in @i{head ladies chain ; heads square thru 4},
or @i{heads touch 1/4 ; walk and dodge}, you must click on @code{centers}
before all calls after the initial one.  Typically, you won't need to read
the card that way, but can rely on precise phrasing and inflection of your
voice to express what you want.

@node 1P2P Lines, Just As They Are, Heads/Sides Start, Startup Screen
@subsection 1P2P Lines

The @code{heads 1P2P} and @code{sides 1P2P} starting actions refer to caller jargon
for a common starting maneuver, typified by @i{so-and-so lead right and
circle up 4}.  You can read the card that way, or as @i{wheel thru and
circle up 4}, or as @i{step right}, or as @i{bring us together}, or whatever
improvisation you like.  The promenade distance printed at the end of the
sequence will assume that you said @i{step right} or @i{lead right @r{(or @i{wheel
thru})} and circle up 4}.

Whether you consider 1P2P openings to be overused is up to you.

@node Just As They Are,  , 1P2P Lines, Startup Screen
@subsection Just As They Are

The @code{just as they are} button starts the sequence on squared set spots,
without having the heads or sides begin.  This is nearly useless, since
the program doesn't know about the @i{all 4 couples} concept or about
thars or alamo rings.  This shortcoming may be fixed in the future.

@node Entering Calls, Entering Concepts, Startup Screen, Calling
@section Entering Calls

The usual thing you do when writing a sequence is to select calls from
the call menu, perhaps preceded by one or more concepts.  (Concepts are
discussed in the next section.)  In @code{sd}, a call is selected by clicking
on the desired menu item.  In @code{sdtty}, a call is selected by typing
its name, followed by
@iftex
@keycap{ENTER}.
@end iftex
@ifinfo
@key{<ENTER>}.
@end ifinfo
The completing reader
(@ref{The Completing Reader for Sdtty}) lets you abbreviate calls.

It is important to be aware that a number of @dfn{modifier} words like 
@code{grand} and @code{cross} are treated as @i{concepts} by @code{sd}
and @code{sdtty}.  While concepts don't officially exist below the
Advanced program, @code{sd} and @code{sdtty} consider the Mainstream
and Plus words @code{cross}, @code{left} and @code{grand}, among others,
to be concepts.  This means that, when using @code{sd}, you generally need
to click on these concepts (they are in the concept menu in the lower
left corner of the screen) before clicking on the call.  For example, to get
a @i{grand swing thru}, click on @code{grand} in the concept menu, and
then @code{swing thru} in the call menu.  There is no item @code{grand
swing thru} in the call menu.  The menus would be too unwieldy if such
things were listed separately.

In @code{sdtty}, the equivalent action is to type @code{grand}, press
@iftex
@keycap{ENTER},
@end iftex
@ifinfo
@key{<ENTER>},
@end ifinfo
type @code{swing thru}, and press
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
again.
However, for a great many modifiers (@code{grand} among them) you can type
the whole thing on one line.  This one-line form form of modifier
entry to the completing reader will be discussed below.

A number of calls have limitations or quirks that you should be aware of.
@xref{Call Notes}.

@menu
* Call Variations::             How to write variations on calls
* Call Menus::                  call menus
* Scrolling::                   The call menu scroll bar
@end menu

@node Call Variations, Call Menus,  , Entering Calls
@subsection Call Variations

There are a number of issues that make call entry less than completely
straightforward.  These have to do with variations that calls have---directions
(as in @code{quarter left}), numbers (as in @code{square thru 3} or @code{three quarter
thru}), person designators (as in @code{sides kickoff}), subcalls (as in @code{clover
and quarter thru} or @code{vertical tag your neighbor} or @code{shuttle rally} or
@code{in roll motivate}), and modifiers (as in @code{strut left} or @code{trans cross
chain reaction}).

To list all possible variations in the menus would be unwieldy for a variety
of reasons.  Because of this, various methods are used to shorten the menus
and to allow the user to specify the desired variation.  These methods will
be discussed in detail presently, but in most cases what happens is the following:

In @code{sd}, the menus list only the base calls with special keywords
as in @code{quarter <DIRECTION>} or @code{square thru <N>}.  When you
click on such a menu item, a popup menu appears listing the possible choices.

In @code{sdtty}, the @dfn{menu} (that is, what you see if you type a question
mark) also has keywords.  You can type the item just as shown, e.g.,
@code{quarter <DIRECTION>} or @code{square thru <N>} (you would actually type the
angle brackets) and then answer the question that @code{sdtty} asks.  But there is
an easier way---you can type what you want directly.  That is, just type
@code{quarter left} or @code{square thru 3}.  If you want to see the choices,
type @code{quarter <DIRECTION>} or whatever, and then type a question mark.

@table @code
@item Directions
Calls that take a direction have the keyword @code{<DIRECTION>} in them in the
menus, like @code{pass <DIRECTION>} or @code{spin a windmill, outsides <DIRECTION>}.

When using @code{sd}, after you click on such a call, a popup will appear listing
all possible directions.  Click on the one you want.  If you decide you don't
want that call, just move the mouse away from the popup.

When using @code{sdtty}, you can either type @code{pass <DIRECTION>} literally,
and then answer the question that the program will ask, or just type the actual call,
for example, @code{pass in}.

The menu lists all possible directions, including some that may not be possible
in the given context.

@item Numbers
Calls that take a number have the keyword @code{<N>}, @code{<N/4>}, or @code{<Nth>}
in them, like @code{eight chain <N>}, @code{invert the column <N/4>}, or
@code{square thru, but on the <Nth> hand <ANYTHING>}.

When using @code{sd}, a popup will appear listing the numbers from 1 to 8.  Click
on the one you want.  If the keyword was @code{<N/4>}, click on the value of @code{N}.
The program will turn it into @code{N/4} (or, if @code{N}=2, into @code{1/2}).
If you decide you don't
want that call, just move the mouse away from the popup.

When using @code{sdtty}, you can either type the keyword literally,
and then answer the question, or just type the number just as you want it to
appear in the call.  That is, you can type @code{invert the column <N/4>} and then
@code{3}, or @code{invert the column 3/4}.  You can type @code{1/2} or
@code{2/4}---the program will print it as @code{1/2} in either case.
For @code{square
thru but on the <Nth> hand}, you can type the number in @code{Nth} form,
as in @code{square thru but on the 3rd hand}.  Of course, if you just type @code{3},
the completing reader will finish it for you.

Not all values of @code{N} will be meaningful for all calls.  For example, you
can @code{eight chain 5}, but you can't @code{invert the column 5/4}.

Some calls have the words @code{quarter}, @code{half}, or @code{three quarter}
in their names.  Examples are @code{quarter thru}, @code{quarter the deucey},
@code{quarter mix}, @code{quarter the alter}, and @code{quarter chain and circulate in}.
These are listed in the Callerlab lists with the words spelled out, though
individual preferences vary.  Some people prefer to write @code{1/4 thru} and
@code{3/4 thru}.  @code{Sd} and @code{sdtty} list the call as @code{<N/4> thru}
in the menu.  In @code{sd}, you click on that and then click on a number (only 1 and 3
are legal, of course).  In @code{sdtty}, you can type @code{<N/4> thru} and then type
1 or 3, or you can type the call directly, either in numbers or in words.  That is,
you can type either @code{1/4 thru} or @code{quarter thru}.  No matter how you
enter one of these calls, it will always be printed out in words, as in
@code{three quarter thru} or @code{half chain and circulate in}.

@item Person designators
These work like the others in a straightforward way.  The calls appear in the menu
with the @code{<ANYONE>} keyword, as in @code{patch the <ANYONE>}.  In @code{sd},
you click on that and then make a selection from a popup menu.  In @code{sdtty},
you can either type the @code{<ANYONE>} literally and then answer the question,
or you can type in the desired call directly, as in @code{patch the sides}.

The gender designators are @code{boys} and @code{girls}.  This is the way they
appear in the Callerlab mainstream list.  The author does not take a position
on whether the adult terms would be more reasonable words to use in any given context.
You must use your own judgement in deciding what to say.

Not all designators are legal in all cases; for example, you can't call
@code{leads run} from a grand wave.

The program specifically refuses to recognize the meaning of the designators @code{centers}
and @code{ends} while in a 1x8 setup (e.g., a grand wave).  This is because these terms
can be ambiguous in such a setup.  If you want the centers of each 1x4, you must use
the @code{EACH 1X4}, @code{EACH LINE}, or @code{EACH WAVE} concept in order to make the
@code{centers} or @code{ends} designators work.  Of course, in many cases, other designators,
such as @code{boys} or @code{girls} can identify the same people unambiguously.
If you want to designate the 4 people in the center of the set, use @code{center 4}.
@code{Outer pairs} specifies the others.

@item Tagging Calls
Calls that use tagging calls have the keyword @code{<ATC>} (for Any Tagging Call) in
them, as in @code{<ATC> your neighbor} or @code{<ATC> chain thru and scatter reaction}.
Specify these in the usual way.  In @code{sdtty} you can type the @code{<ATC>} directly
or you can enter the complete call.

At C3 and above, the tagging calls include the calls @code{revert <ATC>} and
@code{reflected <ATC>} that make use of another tagging call.  In @code{sd}, you
will be presented with another popup.  In @code{sdtty}, you can type in the
entire call directly, as in @code{revert cross flip chain thru reactivate}.

@item <ANYTHING> Calls
Calls that use the ``<ANYTHING>'' mechanism, such as @code{in roll motivate},
have the keyword @code{<ANYTHING>} in them, as in @code{<ANYTHING> motivate}.
In @code{sdtty}, you can type in the entire call directly.  In @code{sd},
click on the call with the word @code{<ANYTHING>} in it.  A popup will appear,
asking for the replacement for the circulate.

Only bona-fide circulate-type calls, and other well-recognized similar
things such as @code{split counter percolate} can be obtained by this method.
You can get more general substitutions by using the @code{simple modifications}
command.  Type (or click) that command, and then @code{motivate}.  You will
be asked for a substitute call.  You can enter anything at this point,
such as @code{swing the fractions}.  The result will appear in the transcript
with brackets, as in @code{[swing the fractions] motivate}.

@item Subcalls
Mandatory subcalls appear in the menu as the keyword @code{<ANYTHING>}, as
in @code{clover and <ANYTHING>}.  The handling of these in @code{sdtty} is not as
nice as for the keywords discussed previously.  It is not possible to type in the call
just the way you want it to appear.  @i{You must literally type the <ANYTHING>}.
That is, you type @code{clover and <ANYTHING>} or @code{slant <ANYTHING> and <ANYTHING>}.
Of course, because of the completing reader, you rarely need to type that much.
Just @code{clover a} is enough, for example.  Furthermore, function key
@iftex
@keycap{F8}
@end iftex
@ifinfo
<F8>
@end ifinfo
is equivalent to typing @code{<ANYTHING>}.
In @code{sd}, click on the menu item in the usual way.  Either way,
the program will prompt you for a subcall.  This can be any legal call, including
concepts and modifiers.  Whatever you enter will appear in brackets, as in
@code{clover and [TANDEM shazam]}.
These mandatory subcalls, with the keyword @code{<ANYTHING>} in the menu,
are just one of many types of modifications.  @xref{Call Modifications}.

@item Modifiers such as cross, left, split, grand, single, magic, and interlocked
As discussed above, the program considers these to be actual concepts,
even though they aren't really.

Some calls use these concepts in ways that have a tricky word order.

Whether the word order is tricky or not, you can always enter the concept
followed by the call as separate items.
For example, in @code{sd}, you can click on @code{left} followed by
@code{chase right}.  In @code{sdtty}, you can type in @code{left} and then
@code{chase right}, on two separate lines.

In addition, @code{sdtty} allows more natural text entry.  You can type in
@code{grand swing thru} or @code{chase left} directly.

Other examples of this phenomenon are
@example
   switch to an interlocked diamond
   unwrap the magic diamonds
   hang a left
   scoot and cross ramble
   trans cross reactivate
   revert cross flip chain thru cross nuclear reaction
@end example

No matter how you entered it, the calls will be printed out with the words
in the correct place.

The foregoing only applies to calls in which the word is an actual concept
or modifier.  Some calls happen to have the word @code{cross} as part of
their names.  Examples are:  @code{cross and wheel}, @code{cross and turn},
@code{cross your neighbor}, and @code{crossfire}.  Such calls appear in the
menu just as they are spelled.
@end table

@node Call Menus, Scrolling, Call Variations, Entering Calls
@subsection Call Menus

In @code{sd}, the call menu is the long menu near the center of the screen.  There are
actually 17 menus that can appear here, each tailored to the current
setup.  For example, if the current setup is right-hand waves, a menu
will appear that contains only those calls that the program believes
might be legal from right-hand waves.  This determination is approximate
but conservative---appearance on the menu does not necessarily mean it
is legal, though absence from the menu means that the program is fairly
certain that it can't be legal.  There is a @dfn{universal} menu that
appears when the setup is not one of the common ones, or when anything
complex is going on.  This contains every call that is in the database
for the chosen level.

The call menus are alphabetized in a way that ignores blanks and hyphens.
Special keywords such as @code{<N>}, @code{<ANYONE>}, @code{<DIRECTION>},
or @code{<ANYTHING>} are listed before letters.
Hence, @code{<ANYONE> run} and @code{<ATC> your neighbor}
will be found near the beginning of the menu.

@node Scrolling,  , Call Menus, Entering Calls
@subsection Scrolling

The call menu can be scrolled with the scroll bar to its left.  Move the
mouse into the scroll bar area.  Clicking the left mouse button will scroll
the window down over the menu by a percentage of the window's size that is
equal to the percentage that the cursor is down from the top of the scroll
bar.  Clicking the right mouse button will scroll the window up by the
same amount.  Clicking the middle mouse button will move the window to a
percentage down the menu that is equal to the percentage that the cursor
is down from the top of the scroll bar.  If the mouse is moved while the
middle mouse button is held down, the menu will scroll in real time.

@node Entering Concepts, Call Modifications, Entering Calls, Calling
@section Entering Concepts

A call may be preceded by concepts, which modify the action of the call.
These may be nested (@dfn{stacked}) to any reasonable depth.

In @code{sdtty}, just type the concept you want.  The completing reader will
operate in the usual way.  Many concepts may be entered in a natural way,
on the same line as the call that they affect.  As discussed previously,
modifiers like @code{cross} and @code{left} are all in this category.
Many other concepts can be typed this way also.  For example, you can
type @code{random tandem swing thru} all on one line.

For reasons of ambiguity in the language, many concepts may @i{not}
be entered in this way.  The most notorious of these are the @code{so-and-so}
concepts, such as @code{boys}.  You must type an
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after each such concept,
even though the concept and the call that it modifies will appear
on the same line in the finished text.

Since it is difficult to remember which concepts must be typed on separate
lines, @code{sdtty} always permits you to do so.  When in doubt, type concepts
on separate lines with an
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after each one.  With practice, you will develop
a feel for which things you can type naturally and which ones are difficult.

Whether you typed concepts on separate lines or on one line, the result is
the same, and the output file will look the same.
For example, the following are all legal and equivalent.

@example
   reverse random tandem swing thru
   
   reverse random
   tandem swing thru
   
   reverse
   random
   tandem
   swing thru
@end example

In the output file, they will all be shown as @code{reverse random tandem swing thru}.

In @code{sd}, click on the concept from a menu.  In a
perhaps hopeless attempt to keep the concept menus from becoming too
unwieldy, concepts have been organized into a general concept menu and
several submenus organized by topics.  The main concept menu is in the
lower left corner.  It supposedly contains all the extremely common
concepts.  Buttons for the other concepts submenus appear above this
menu.  Clicking on one of these buttons brings up the submenu.  If you
don't see what you want on a concept submenu, move the mouse away.  Some
concepts appear in more than one submenu---it doesn't matter which one
you use.  With practice, you will know which submenu to use.  All available
concepts, organized by submenu, are listed in @ref{Concept Notes}.

When you click on any concept, the universal call menu replaces whatever
special call menu may have been presented, since the set of legal calls
becomes highly unpredictable.

Some concepts require a numeric designator (e.g., @code{interrupt after the 3rd
part}) or a people designator (e.g., @code{girls are stable}).  The handling
is the same as for calls that require these.

Some concepts require two calls (e.g., @code{checkpoint} and @code{interlace}).  After
choosing such a concept, enter the first call, preceded by whatever concepts
apply to it.  The program will then prompt you for the second call.
A complex tree of concepts and calls can thus be constructed.

The program recognizes the level at which concepts are legal, but lets you
override this if you wish.  The @code{toggle concept levels} command toggles
(turns on or off) the state of off-level concept permission.
@xref{Changing Modes} and @ref{Using Off-Level Concepts}.

@node Call Modifications, Discarding Concepts After an Error, Entering Concepts, Calling
@section Call Modifications

Some calls can be modified in a natural way, such as @samp{catch fan the top 3},
@samp{busy 1/2 tag},
and @samp{vertical tag your neighbor}, or in unnatural ways, such as @samp{trade
the diamond but replace the diamond circulate with explode the diamond}.
To form such a call, you must first enable call modifications
by clicking on @code{simple modifications} or @code{allow modifications}
before choosing the call.

There are two levels of this feature.  If you click on @code{simple
modifications}, you get the simple version, which only prompts
you for @dfn{natural} modifications.  Natural modifications have been somewhat
arbitrarily defined as those for which there is an accepted way of fitting
the words in without using the phrase ``but replace the <whatever> with
<whatever>.''  If you click on @code{allow modifications}, you allow
a potentially large number of modification possibilities, sometimes several
in the same call.

In most cases, @code{simple modifications} is probably the right thing.

The special ``circulate'' modifications exemplified by @samp{in roll motivate}
can be entered by this method.  Select @code{simple modifications}, select
@code{motivate}, and replace the circulate.  The result will show the replacement
call in brackets and spelled out in full, as in @code{[in roll circulate] motivate}.
However, there is a better way to get these particular types of modifications---select
@code{<ANYTHING> motivate} and then select the replacement for the circulate.
The result will look natural, for example, @code{in roll motivate}.
In @code{sdtty} you can type in such a call directly.

When either level of modifications is selected, the line at the top of
the text transcript area indicates this.  Also, the universal call menu
is chosen whenever modifications are enabled, since the possibilities are
unpredictable.

When you click on a call for which modifications are possible, a popup
will appear saying something like @code{The box circulate can be
replaced.  Do you want to replace it?}  If you want to replace the
designated call, click in the active area of the popup; otherwise, move
the mouse away.  If you indicate that you want to
replace the call, you will then be prompted for the replacement call.
Enter it, along with any concepts.  In some cases you may be asked
repeatedly about various modifications.  For example, in @i{motivate},
you can replace the initial @i{circulate}, and you can turn the star a
different amount.  You may select any or all of these modifications.

Note:  When complex modifications are involved, the program may ask for them
in an order that seems unnatural.  This is because it asks in the order that
it executes the call internally, which may not be the same as the order in which
the words are spoken.  Do not be alarmed.  Observe the popup titles and
prompts carefully.  The final result should come out in the correct order.

For both these optional modifications and the mandatory subcalls discussed
earlier (e.g., @code{clover and <anything>}), the program attempts to show
unambiguously how everything is structured, by putting subcalls and their
accompanying concepts in square brackets.  It also attempts to put
natural modifications in their natural place in the phrase.  In complex
cases, like @samp{[CHECKPOINT LEFT catch [SINGLE CONCENTRIC snake] 3 BY
[2/3 recycle] the difference] cover up} things may be quite difficult.
How (and whether) you choose to read such a card is up to you.

@node Discarding Concepts After an Error, Asymmetric Selectors, Call Modifications, Calling
@section Discarding Concepts After an Error

When an error occurs in the execution of a call, the program tries
to leave in place any concepts that were associated with that call.
That is, after printing the error message, the program will behave
as though you had once again typed those concepts.  The assumption here
is that only the call was mistaken, and you really wanted the concepts
and do not wish to have to enter them again.  If you don't want those
concepts, you can remove them one by one with the ``undo'' command.
Or you can use the command ``discard entered concepts'' to get rid of
all of them at once.

Some people may find this behavior objectionable.  You can make the
program automatically discard all pending concepts whenever an error
occurs by using the @code{-discard_after_error} command-line switch
when the program is started.  You can also place the line
@code{discard_after_error} into the ``Options'' section of the initialization
file.  @xref{The Initialization File}.

@node Asymmetric Selectors,  , Discarding Concepts After an Error, Calling
@section Asymmetric Selectors

The people selector popup contains various asymmetric selectors such as
@code{near line} and @code{far box}.  You can use these selectors with
the @code{so-and-so do your part} concept to call @i{near column
pass thru}, etc.  The resultant setup must be reasonable---shape-changers
on one side of the set may lead to problems.
Most calls have not been checked for
robustness in the presence of asymmetrical setups.  Use this with care!
The resolver checks all eight people, so it should work.
If you have not restored symmetry, resolves may be extraordinarily difficult
to find.


@node Resolving and Searching, Misc Commands, Calling, Top
@chapter Resolving and Searching

This chapter describes how to have the program find calls for you to
accomplish various goals.

@menu
* Resolving::                   Resolving
* Normalize and Standardize::   Normalizing or Standardizing the Setup
* Pick Random Call::            Letting the program pick a random call
* Create Setup::                Creating a Specific Setup
* Reconcile::                   The @code{Reconcile} operation.
@end menu

@node Resolving, Normalize and Standardize,  , Resolving and Searching
@section Resolving

Whenever the setup is in a resolved state, whether intentionally or
accidentally, the program indicates that fact at the bottom of the
transcript area.
The program looks for @i{right and left grand}, @i{left allemande},
@i{promenade}, @i{single file promenade}, and @i{circle left/right}
getouts from a variety of setups.  If the sequence needs an
@i{extend}, @i{slip the clutch}, @i{circulate}, @i{pass thru}, @i{trade by},
@i{cross by}, or @i{dixie grand}
first, the program reports that too.

Whenever the @samp{resolve} message appears, you can end the sequence and
write it to a file by selecting @code{write this sequence}.
In @code{sd}, the button for this is in the group in the upper left
portion of the screen.  In @code{sdtty}, simply type the command, with
the usual completion mechanism.

There are
at least three ways to resolve a sequence: you can wander into a resolve
by accident, you can @dfn{sight resolve} the square, entering the calls
that you want, or you can use the @code{resolve} command.  This command
adds the necessary calls to the sequence, exactly as if you had entered
them.

When you select @code{resolve}, the program goes into a special mode in
which it searches for resolutions, saves them, and lets you look through
them and pick one that you like.
A resolution is a sequence of up to three calls
that leads to a resolved state.  While the program is in resolve mode,
the call menu is replaced by a special menu of options, along with
information about the current resolution.  That information tells how
many resolutions are currently stored and which one is currently shown.
When you select @code{resolve}, the program finds the first resolution and
displays it, showing information @samp{1 out of 1}, which means that it
has one resolution stored, and resolution number one is currently displayed.
The transcript area shows the effect of that resolution.

You can select @code{find another} to search for another resolution and add
it to its stored list.  When the list has more than one resolution in it,
selecting on @code{previous} and @code{next} will move around in its
list of previously found resolutions and show whichever one you want.
In this way, you can search
for a better resolution than the one you already have, but go back to
the earlier one if no better one is forthcoming.

Selecting @code{accept current choice} will leave resolve mode, causing
the current resolution to be added to the sequence exactly as though
you had entered those calls manually.

Selecting @code{abort the search}, @code{exit the search}, @code{quit the search},
or @code{undo the search}
will throw away all of the saved resolutions and leave resolve
mode, but will not destroy the sequence.  The sequence will be left just
as it was before @code{resolve} was selected.

Selecting anything else, such as @code{write this sequence},
is equivalent to @code{accept} followed by whatever that action
is.  So, for example, you can select @code{write this sequence} as soon as
you see a resolution that you like.

When using @code{sdtty}, these special commands are typed into the completing reader
in the usual way.  To make it more convenient to enter them, the command names
have been chosen to be unambiguous from just one or two letters.  So, for example,
@code{p} means @code{previous}, @code{n} means @code{next}, and @code{f}
means @code{find another}.

If one or more concepts have been entered when you select @code{resolve}, the
program will search only for resolutions whose first call starts with those
concepts.  So, for example, selecting @code{once removed} and then
@code{resolve} might get you this resolution:

@example
   ONCE REMOVED reverse the pass
   linear flow
   right and left grand  (7/8 promenade)
@end example

The program searches for resolutions by using a random number generator to
generate up to 5000 random sequences, occasionally inserting concepts.
It biases the search in favor of short sequences (one call) rather than
long ones (three calls) and against resolutions that require @i{all 8
circulate}, @i{pass thru}, or @i{trade by} at the end.
If, after 5000 attempts, no resolution is found, the @code{find another}
operation fails.  (This tends to happen if you try to resolve out of an
hourglass at Mainstream.)  You can select @code{find another} again to make
another 5000 attempts if you wish.

@i{Remember that the @code{resolve} operation by itself does not write
the sequence to a file.}  You will not be able to print a sequence until
it has been written to a file.  You must give the @code{write this sequence}
command to write out the sequence.

@node Normalize and Standardize, Pick Random Call, Resolving, Resolving and Searching
@section Normalizing or Standardizing the Setup

These commands invoke an operation very similar to the resolver,
except that they search for sequences of up to three calls that
make the setup ``nicer''.

The @code{normalize} command reduces
various matrices, such as 4x4, into an 8-person setup.  It uses a variety
of phantom-like concepts to do its work.

Be aware that the phantom-like concepts that this command uses are not
the only ways to get out of large matrix setups.
There are a number of calls,
like @i{press},
@i{truck}, @i{loop}, @i{squeeze}, @i{Z axle}, and @i{finish a long trip}
that are also useful.
The @code{normalize} operation does not search for such things.  It is only
intended to search for things that might not be obvious.

The @code{standardize} command turns the setup into an 8-person setup
in which people are facing in ``reasonable'' directions.  That is, it
gets out of T-bone setups.  It uses both plain calls and calls with
concepts.

If you have selected @code{toggle concept levels},
these commands may
make use of concepts that are not legal at the chosen level.  This is sometimes
useful in emergencies.

@node Pick Random Call, Create Setup, Normalize and Standardize, Resolving and Searching
@section Letting the program pick a random call

There are five commands in this family:  @code{pick random call},
@code{pick simple call}, @code{pick concept call}, @code{pick level call},
and @code{pick 8 person level call}.
They search for any legal single call.  While this may sound like
a fairly pointless operation, remember that you can use this while one or
more concepts are already entered, in which case it will search for legal calls
that involve those concepts.  Hence, this operation is useful for finding
clever uses of difficult concepts such as @i{checkpoint},
@i{interlace}, or @i{on your own}.

The command @code{pick random call} attempts to pick completely random
things---sometimes calls, and sometimes calls with concepts.
@code{Pick simple call} never uses concepts.  @code{Pick concept call}
always uses at least one concept with the call that it picks.
@code{Pick level call} picks only calls that are at or near the specified
calling level.  (By ``near'' we mean that, if the calling level is C4,
it will pick C4A or C4 calls.  If the level is A2, it will pick A1 or A2 calls.)
@code{Pick 8 person level call} is similar, but it picks only calls that
involve all 8 people.

@node Create Setup, Reconcile, Pick Random Call, Resolving and Searching
@section Creating a Specific Setup

These commands pick some call or calls that go into a specified setup.
The commands are:
@example
   create any lines
   create waves
   create 2fl
   create lines in
   create lines out
   create inverted lines
   create 3x1 lines
   create any columns
   create columns
   create magic columns
   create dpt
   create cdpt
   create trade by
   create 8 chain
   create any 1/4 tag
   create 1/4 tag
   create 3/4 tag
   create 1/4 line
   create 3/4 line
   create diamonds
   create any tidal setup
   create tidal wave
@end example

``Any lines'' and ``any columns'' mean any 2x4 setup in which people
are all in generalized lines or columns, respectively.  ``Any tidal
setup'' means any 1x8, no matter how people are facing.
All the others are independent of handedness---for example, a
two-faced line can be of either handedness.

@node Reconcile,  , Create Setup, Resolving and Searching
@section The @code{Reconcile} operation

Selecting @code{reconcile} invokes an operation like resolving, but it
puts the generated calls someplace other than at the end of the
sequence.  This is useful if you have a clever getout at the end of the
sequence, and you want it to be the resolve, but people don't have their
partners and corners.  This lets you retroactively modify the sequence
so that the clever getout will work.

Note first that this operation may only be invoked when the setup is
left-handed two-faced lines, right-handed waves, or left-handed waves,
in which case it assumes you want a @i{promenade}, @i{right and left grand}, or
@i{left allemande} respectively.  The program must know which getout type you
want.  If the setup is an 8-chain, it can't tell.  In that case, either
do a @code{touch} or a @code{left touch}, to tell the program that you really
want a @i{right and left grand} or @i{allemande left}, respectively.
Then, after the reconcile operation is complete, you can erase that extra call.

The reconcile operation is very similar in behavior to resolve, except
that the program needs to know the insertion point.  Rather than
searching for the first resolve as soon as you enter the mode, the
reconcile operation lets you set the insertion point before searching.
Select @code{raise reconcile point} or @code{lower reconcile point} to
set it.  A dotted line will be displayed showing where in the sequence
the generated calls will be placed.  When this is in the right place,
select @code{find another} to find the first reconcile.  You can
change the insertion point at any time.

Reconciles are extremely difficult to find---much harder than resolves.
To avoid frustration, make the insertion point be at a place where the
setup is very simple and a large number of calls are legal.  We recommend
making the insertion point be at a place where the setup is in waves.
Remember that, if the insertion point is at an hourglass, the program
has to find a random sequence of up to three calls that goes from an hourglass
to another hourglass while miraculously performing the required
permutation.

Avoid using reconcile when a gender-dependent or head/side-dependent
call lies between the insertion point and the end of the sequence.  The
program checks every reconcile by re-executing all calls from the
insertion point to the end and verifying that everything is exactly as
it was except for the permutation of the people.  For example, if the
call @samp{heads kickoff} occurs after the insertion point, and a
potential reconcile changes heads and sides, it will not be offered.
For gender-dependent calls the situation is a little better: if, at the
end of the sequence, the boys are in the center and the girls on the end
before doing the reconcile, you know that any inserted sequence will
have to be gender-preserving anyway, so calls like @samp{star thru} and
@samp{boys kickoff} will be okay.

@node Misc Commands, Terminal Interface, Resolving and Searching, Top
@chapter Miscellaneous Commands

This section describes commands that are not concerned with generating
sequences.

@menu
* Save Sequence::               Saving the Sequence
* Change Output File::          Changing the Output File
* Change Title::                Changing the Title
* Abort/Exit/Undo::             Abort, Exit, and Undo
* Inserting Comments::          Inserting Comments
* Keeping Pictures::            Keeping Pictures of the Setup
* Changing Modes::              Changing Modes
@end menu

@node Save Sequence, Change Output File,  , Misc Commands
@section Saving the Sequence

At any time when the sequence is resolved (for example, after a successful
use of the @code{resolve} operation), you can select @code{write this sequence}.
(This command used to be called @code{end this sequence}.)
This will append the current sequence to the current output file, and then
go back to the startup screen.  You will be given an opportunity to enter
a line of text to be used as a subtitle, for example ``very hard interlace''
or ``stupid biggie.''  The written sequence will also be annotated with the
level, the current date and time, and the version numbers of the program and
database.

Until you have done the @code{write this sequence} operation, the sequence is not
written to disk and you cannot start writing a new sequence.  Just
resolving isn't enough.

@node Change Output File, Change Title, Save Sequence, Misc Commands
@section Changing the Output File

You can change the name of the file to which the program writes its
output by selecting the @code{Change output file} command.  A popup
will appear, prompting you for a new file name, or @code{sdtty} will
ask you to type in the new name.  This action will become
effective the next time a sequence is written out.  Sequences previously
written will stay under their old name.

When the initialization file is used, any change in the output file name will
be written back to that file at the end of the session.

@node Change Title, Abort/Exit/Undo, Change Output File, Misc Commands
@section Changing the Title

You can change the title that will be printed at the top of each sequence
by selecting the @code{Change Title} command.  A popup
will appear, prompting you for a new title, or @code{sdtty} will
ask you to type in the new title.  This action will become
effective the next time a sequence is written out.  Sequences previously
written will keep their old title.  You can remove the title by just
pressing
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
when asked for the new title.

When the program starts, there is no title, unless the initialization
file was used.

When the initialization file is used, any change in the title will
be written back to that file at the end of the session.

@node Abort/Exit/Undo, Inserting Comments, Change Title, Misc Commands
@section @code{Abort}, @code{Exit}, and @code{Undo}

If you select the @code{exit} command, the program will exit.  If a
sequence is in progress, the program will ask for confirmation first.
(Remember that a sequence is not finished until the @code{write this
sequence} command has been given.)
In @code{sd} with the X Window System, using your window manager
to send a @code{Delete Window} message to the
program is equivalent to clicking on the @code{exit} button.  This is
what normally happens when you double-click the special control button in the
upper left corner of the @code{sd} window.

If you select the @code{abort} command, the program will abort the sequence
but not exit.  It will go back to the startup screen to allow you to
start another sequence.  It will ask for confirmation first.

If you select the @code{undo} command while no call is partially entered,
that is, while no concepts have been entered, the program will erase
the last complete call, with all of its concepts.  If one or more
concepts have been entered, only the last concept will be erased.

@node Inserting Comments, Keeping Pictures, Abort/Exit/Undo, Misc Commands
@section Inserting Comments

You can insert arbitrary text strings into the sequence transcript in the
form of @i{comments}.  This is useful for things that you may want to say
to help the dancers, such as ``side boys be careful---go to your left.''
Also, if you want to call something that the program can't do, so you have
to trick the program into doing it by means of several other calls, it is useful
to enter a comment saying what you originally wanted.  This can guide you
when editing the transcript file.

To enter a comment, select @code{insert a comment}.  In @code{sd}, a popup
will appear into which you may enter the text.  In @code{sdtty}, simply type
the comment text on the next line.  The comment will be enclosed in curly braces
in the transcript.

A comment may be entered in front of any concept or call, and goes into
the transcript exactly where it was entered.  Because of the way the program
assembles mouse-clicks into transcript lines, it is not possible to enter
a comment at the end of a line.

@node Keeping Pictures, Changing Modes, Inserting Comments, Misc Commands
@section Keeping Pictures

The program shows pictures on the screen for the current position
and the position just before the last call.  Normally, those pictures
will not appear in the sequence written to a file.  If you want the
current position to have its picture written in a file (say, because the
sequence is very difficult and you believe it may be necessary to say
something helpful then like ``check a parallelogram with boys in the center
box'') click on @code{keep picture}.

@node Changing Modes, , Keeping Pictures, Misc Commands
@section Changing Modes

There are two commands that change some aspect of the way @code{sd}
or @code{sdtty} run.  The two commands are @code{toggle concept levels}
and @code{toggle active phantoms}.  Normally, both of these are off.
You may want to turn one or both of them on for your own personal
preference, or for some special reason.  These commands @dfn{toggle} their
respective modes.  That is, they turn the mode on if it was off, and
off if it was on.  The current state of the modes is always displayed
in the input prompt in @code{sdtty}, or the mode line in the upper
right corner in @code{sd}.

The @code{toggle concept levels} command changes the legality of concepts
that are not on the specified calling level.  @xref{Entering Concepts}.

The @code{toggle active phantoms} command changes the persistence of
phantoms during certain calls.  @xref{Assume Waves}.

@node Terminal Interface, Linguistic Idiosyncrasies, Misc Commands, Top
@chapter Terminal Interface

@menu
* Sdtty::                       The @code{sdtty} program
* Function Keys in Sdtty::      Function Keys
* Sdtty on the PC::             The PC version
* Sdtty on Unix::               The Unix version
@end menu

@node Sdtty, Function Keys in Sdtty,  , Terminal Interface
@section Sdtty

The program @code{sdtty} uses the completing reader for call,
concept, and command entry.

When typing, press @key{Space} to complete the current word.
Type
@iftex
@keycap{TAB}
@end iftex
@ifinfo
@key{<TAB>}
@end ifinfo
or
@iftex
@keycap{ESC}
@end iftex
@ifinfo
@key{<ESC>}
@end ifinfo
to complete as much as possible.
Type @kbd{C-u} (that is, Control U) to clear a partially-typed line.

@code{sdtty} has a special command @code{refresh display}
that has no counterpart in
the window-based version.  It causes a complete clean transcript
of the current sequence to be printed.  This can be used if the display got
messed up due to such things as unreliable terminal or modem behavior.

@code{sdtty} tries to keep the screen up-to-date efficiently,
maintaining a clean transcript of the current sequence on the screen
at all times, by using whatever Operating System facilities it thinks are
appropriate.  If, for any reason, this doesn't work properly for you,
you can give the @code{-no_cursor} switch at program startup to disable
that.  This will cause @code{sdtty} to treat the computer's display as
if it were a dumb typewriter.  When started in this way, the part of
the transcript that has changed with each command is simply redisplayed.
This will inevitably lead to a choppy appearance on the screen or
printing device.  The @code{refresh display} command cleans that up.

@node Function Keys in Sdtty, Sdtty on the PC, Sdtty, Terminal Interface
@section Function Keys in Sdtty

On the PC, @code{Sdtty} recognizes a number of function keys.  These
are equivalent to typing the following commands:

@example
key      normal                    shift                  control

F1   heads start              sides start           just as they are
F2   two calls in succession  twice
F3   pick random call         pick concept call     pick simple call
F4   resolve                  reconcile             normalize
F5   refresh display          keep picture          insert a comment
F6   simple modifications     allow modifications
F7   toggle concept levels    toggle active phantoms
F8   <anything>               <concept>
F9   undo last call           abort the search
F10  write this sequence      change output file
F11  pick level call          pick 8 person level call
F12  accept current choice
@end example

All of these except @samp{<anything>} and @samp{<concept>} execute the command
directly, that is, pressing the function key is equivalent to typing the indicated
text and then pressing
@iftex
@keycap{ENTER}.
@end iftex
@ifinfo
@key{<ENTER>}.
@end ifinfo
The keys for @samp{<anything>} and
@samp{<concept>} are simply equivalent to entering that text without pressing
@iftex
@keycap{ENTER}.
@end iftex
@ifinfo
@key{<ENTER>}.
@end ifinfo

@node Sdtty on the PC, Sdtty on Unix, Function Keys in Sdtty, Terminal Interface
@section Sdtty on the PC

@code{Sdtty} uses the @code{DPMI} memory manager.  If necessary, it uses its own
copy of @code{DPMI}.  It can run under either standalone DOS or the
@samp{MS-DOS Prompt} under Windows.

You need a 386 or higher processor and 2Mb of memory.
A hard disk is recommended.  There
should be at least 175 kilobytes of memory free in the first 640Kb.
The authors have not actually tried it on a system this small, and we
would be interested in your experiences.

@code{Sd} is believed to be
insensitive to slight inaccuracies in floating-point division.

To deal with different types of display hardware with various screen sizes,
the @code{-lines @var{n}} switch can be given at program startup, as in
@code{sdtty -lines 36 a2}.  The default size is 25.

@node Sdtty on Unix,  , Sdtty on the PC, Terminal Interface
@section Sdtty on Unix

The Unix version normally uses the @i{curses} display access mechanism.  It
should make effective use of the screen-editing features of the terminal
(VT-100 or emulation of same, or whatever) to keep the screen updated.
However, this requires that all of the system facilities for dealing with
terminals (@code{TERM} environment variable, @code{terminfo} database,
@code{stty} behavior, etc.) be working properly.
If, for any reason, this doesn't
work for you, you can turn the @i{curses} mechanism off completely by using the
@code{-no_cursor} command-line switch at program startup.  This should even
make it possible to use the program from a printing device.

When using @i{curses}, it normally tries to use the insert/delete line
capabilities of your terminal device to update the screen more efficiently.
For certain terminal or modem configurations, this may be
counterproductive.  If so, you can turn this feature off
by giving the command-line switch
@code{-no_line_delete} at program startup.

@node Linguistic Idiosyncrasies, Using Off-Level Concepts, Terminal Interface, Top
@chapter Linguistic Idiosyncrasies

In a number of cases, the program behaves in a way that could be considered
idiosyncratic, peculiar, or simply wrong.
Some of these cases are admittedly bugs
or shortcomings of the program.  Others are inevitable consequences of what the
program is trying to do.

The syntax, semantics, and general structure of the square dance calling
language is fairly regular and precise---much more so than, for
example, the English language.  That is, the correspondence between dancer
actions and verbal phrases is fairly regular.  However, there are exceptions.
A very simple example of this is the fact that callers generally say
@samp{quarter top} and @samp{half the top}, using the word ``the'' in
one case but not the other.

The program handles these exceptions by calling in an occasionally stilted but
unambiguous computer-ese dialect.  This dialect is intended to be
very close to the words you would use when calling, but it is sometimes
different.
The rationale for this is that it is too hard to make the program always use
the words that a caller would use.  When writing sequences, be aware that the
dancers do not necessarily know this computer-ese dialect.  Use the words
that you think are correct and natural.  Your judgement is much better than any
program's judgement can ever be.

The program sometimes requires you to say various @dfn{helper} words, such
as @code{left} in cases where their necessity is is not universally
agreed upon.  For example, from a left-handed quarter-tag, @code{sd}
will not accept @code{scoot and plenty}---you are required to enter
@code{left scoot and plenty}, even though the Callerlab definition does
not require the word @code{left} in this case.  What helper words you
use or don't use when calling is, of course, up to you.

There are some innocent-looking things that the program can generate for which
appropriate words do not exist.  You must not write sequences containing such
things, because you won't be able to call them.  For example, from
boy-boy-girl-girl
waves, it is perfectly straightforward for a caller to say @samp{boys hinge}.
From boy-girl-boy-girl waves, @samp{boys hinge} is meaningless, but the
program accepts
@samp{boys do your part, hinge}.  It doesn't know that this is an unacceptable
thing to call.  Don't do it.

In general, if you don't think you can clearly express to the dancers
what you want, don't call it.

A number of concepts are particularly vulnerable to this phenomenon.
Examples are @code{precede it by}, @code{follow it by}, the fractional
concepts like @code{1/2}, @code{1-1/2}, and @code{3 times}, and
the calls that designate certain people.

Callers often use phrases such as @samp{finish @dots{}} or @samp{like a @dots{}}
in imprecise ways.  Sd uses a very precise definition
for these phrases, and we urge you to use them only in this way.

@node Using Off-Level Concepts, Call Notes, Linguistic Idiosyncrasies, Top
@chapter Using Off-Level Concepts

Because the program is so literal-minded, it sometimes doesn't understand
how to do things that are in fact very easy for callers to express and
for dancers to do.  In some cases, the necessary sophistication lies
in some concept that is legal only at high challenge levels.

When such a situation arises, you can tell the program to permit the use
of concepts that would not normally be legal.  The command to do this
is @code{toggle concept levels}.  @xref{Changing Modes}.

If you have a line of 6 (or 8) people, and you want them to do a @samp{1/2 tag},
use the @code{3x3} (or @code{4x4}) concept.  Of course, if you were calling
mainstream, you wouldn't say @samp{3x3 1/2 tag}.  You would presumably say
something like @samp{line of 6 in the center, 1/2 tag}.

If you have a column of 6, and you want them to @samp{walk and dodge} in that
setup, that is, the lead two dodge while the other 4 walk forward, use
the @code{2X1} concept.  Use your own words when calling this.

If you want people to do something (e.g., @samp{diamond circulate}) around the outside,
you may need to use the @code{disconnected} concept.  For example, if
you had waves with the boys on the ends, and you had just done a
@samp{1/2, acey deucey}, the boys have a big diamond around the outside.
You can't just do a @code{BOYS diamond circulate}, because the
@code{so-and-so} concept is extremely fussy.
@xref{Designating Certain People}.  The way to do this is with
@code{BOYS DISCONNECTED diamond circulate}.  This concept is only
legitimate at C2, so you will need @code{toggle concept levels} below that.
You would presumably say something like @samp{boys diamond circulate around
the outside}.

Whenever you use an off-level concept, a warning will be printed in the
transcript.  You should read such a card using whatever words are
appropriate to get the dancers through the action that you intend.

@node Call Notes, Concept Notes, Using Off-Level Concepts, Top
@chapter Call Notes

@menu
* Sweeping Direction::          Sweeping Direction
* C1 Single Rotate::            C1 Single Rotate
* Spread::                      Spread
* <ANYTHING> and circle::       <ANYTHING> and circle
* Centers Back Away::           Centers Back Away
* So-and-so Promenade::         So-and-so Promenade
* Ends Divide::                 Ends Divide
* Little/Little More/Plenty::   Little/Little More/Plenty
* Flip Back::                   Flip Back
* Face <DIRECTION>::            Face <DIRECTION>
* Grand Chain 8::               Grand Chain 8
* Snag Circulate::              Snag Circulate
* Funny Square Thru::           Funny Square Thru
* Rotate from Columns::         Rotate from Columns
* Recycle::                     Recycle has two forms in the Database
* Going Through Impossible Situations:: Going Through Impossible Situations
@end menu

@node Sweeping Direction, C1 Single Rotate, , Call Notes
@section Sweeping Direction

@samp{Sweep 1/4}, @samp{with the flow}, and @samp{by golly}
are somewhat unsophisticated in the way they calculate the sweeping direction.
The program infers the sweeping direction from the roll direction of
the preceding call.  This is known to work for the common calls such as
@i{recycle}, but may do something tasteless if used with an unusual call.

@node C1 Single Rotate, Spread, Sweeping Direction, Call Notes
@section C1 @i{Single Rotate}

@samp{Single rotate while the others} is intended to be called to the
heads or sides from a squared set.  It performs the common C1 usage of
this call.  It is nonsensical in other contexts.

@node Spread, <ANYTHING> and circle, C1 Single Rotate, Call Notes
@section Spread

The term @dfn{spread} can mean different things and so is three calls in
this program.

Use the call @samp{spread} after calls such as @i{follow your neighbor}.

Use the call @samp{@dots{} and spread} after @i{wheel and deal},
or after starting a sequence with something like @samp{heads star thru}.
You can also use the call @samp{wheel and spread}.

Use the call @samp{<ANYONE> spread} from columns, to get the designated
people to slide away from their partner into a 4x4 matrix.

@node <ANYTHING> and circle, Centers Back Away, Spread, Call Notes
@section <ANYTHING> and circle

Callers use the @code{<ANYTHING> and circle} construction with either
an 8-person call to be done by everyone, or a 4-person call to be done
just by the centers, and dancers generally have no confusion about it.
The program is not so clever.  The @code{<ANYTHING> and circle} call
has all 8 people do the call, so, for example, it could be used with
@code{ping-pong circulate} or @code{scoot and plenty}.  If you want
just the centers to do the <ANYTHING> call, you can use the @code{centers}
concept.  For example, you could select @code{<ANYTHING> and circle 1/4},
then @code{centers}, then @code{switch the wave}.  The result will
come out as @code{[CENTERS switch the wave] and circle 1/4}.
You presumably would not say the word @samp{centers} when calling this.

There is another way to get this effect is to select @code{simple
modifications} followed by @code{swing and circle}.  When this
method is used, the modification call will be done by the centers
only.  So you could select @code{simple modifications}, then
@code{swing and circle 1/4}, and then give the modification call
@code{switch the wave}.

If all else fails, there is a call @code{and circle 1/4} that just
does the final circling part.

@node Centers Back Away, So-and-so Promenade, <ANYTHING> and circle, Call Notes
@section Centers Back Away

This call is intended for use in sequences that begin with heads or
sides doing a @samp{ladies chain} or @samp{right and left thru} or
something similar.  After they do such a call, they will remain in
the center.  To have them do the next call (for example, @samp{pass the
ocean} or @samp{star thru}), just use the @samp{centers} concept.
If you want the @emph{inactive} dancers to come in and do the next call,
use the call @samp{centers back away, others come in and <ANYTHING>}.
So, for example, you might enter:
@example
   heads start
   ladies chain
   centers back away, others come in and <ANYTHING>
   star thru
@end example
You might read this as ``head ladies chain, then the sides move in and
star thru''.

@node So-and-so Promenade, Ends Divide, Centers Back Away, Call Notes
@section So-and-so Promenade

These calls are intended for use in sequences that begin with heads
or sides promenading halfway around the set.  The calls are
@example
   promenade halfway, come in to the middle and <ANYTHING>
@end example
and
@example
   promenade halfway, while the others <ANYTHING>
@end example
In each case, start the sequence with the @code{heads start} or @code{sides
start} command, and then issue one of the calls listed above.  Ignore the
fact that the displayed setup will look strange before the promenade.
You will be prompted for the @samp{<ANYTHING>} call, which will be
done by the appropriate people in the center of the set.

@node Ends Divide, Little/Little More/Plenty, So-and-so Promenade, Call Notes
@section Ends Divide

This is a call that should be used when you want the outsides to move
along until they are facing each other.  For example, after @samp{heads
swing thru}, you might say @samp{ends divide}, and then have them @samp{star thru}.
Note that @samp{ends divide} is the name of the call.  It is not an
application of the @samp{ends} concept.  You must type it on one line,
and you may not substitute another designator, such as @samp{sides}, for
the word @samp{ends}.  So, for example, you might enter:
@example
   heads start
   swing thru
   ends divide
   ends
   touch 1/4
   6x2 acey deucey
@end example
You might read this as ``heads swing thru, while the sides divide
and touch 1/4''.

@node Little/Little More/Plenty, Flip Back, Ends Divide, Call Notes
@section Little, Little More, and Plenty

These are problematical calls when the outsides are in line-like, rather
than column-like, orientation.  This situation arises, for example, when
the starting setup is twin diamonds.  The Callerlab C1 and C2 definitions
state that in this case the outsides counter rotate just as they are,
without first quartering in some direction.  However, many high-level callers
have adopted a definition that says that the outsides @emph{always} quarter
right (or take whatever direction is given) before counter rotating.
Sd uses this formulation.  To handle all the possibilities, there are 3
varieties of the call
@samp{little}---just @samp{little}, @samp{little, ends face <DIRECTION>},
and @samp{little, ends go as you are}.  Use the last one when the
dancers are in diamonds and you want the outsides to counter rotate
directly.  Whether or not you say ``ends go as you are'' is up to you.
The calls @samp{little more} and @samp{plenty} have analogous behavior.

@node Flip Back, Face <DIRECTION>, Little/Little More/Plenty, Call Notes
@section Flip Back

This call is a special case of the @samp{<ATC> back to a wave} class
of calls, and is a recognized C1 call.  You should use this name rather
than the potentially misleading @samp{flip back to a wave}.

@node Face <DIRECTION>, Grand Chain 8, Flip Back, Call Notes
@section Face <DIRECTION>

The call @samp{face <DIRECTION>} does not appear to be a genuine
Callerlab-sanctioned call.  It is intended to be used, for example,
after @samp{tag the line}, to give the direction that you wish to
have the dancers face.  So, for example, you could enter the calls
@samp{tag the line} followed by @samp{face in} to get the action
that is commonly expressed as @samp{tag the line, in}.  Note that
the A2 designators @samp{zig-zag}, etc., are among the permissible
directions.

@node Grand Chain 8, Snag Circulate, Face <DIRECTION>, Call Notes
@section Grand Chain 8

In order to handle all of the nuances of @samp{grand chain 8}, it
was necessary to make a separate call @samp{grand chain 8 (centers and ends)}.
Use this call when you want just the centers or ends to do their part,
or you are using some concept like @samp{central}.  In other circumstances,
just @samp{grand chain 8} should work.

@node Snag Circulate, Funny Square Thru, Grand Chain 8, Call Notes
@section Snag Circulate

The @samp{snag} concept, meaning to have the centers do just half of the
call, does not work with the call @samp{circulate}, because that
call is not defined in the database as having centers' and ends' parts.
Hence, the separate call @samp{snag circulate} has been provided.

@node Funny Square Thru, Rotate from Columns, Snag Circulate, Call Notes
@section Funny Square Thru

Because of the peculiarity of this call, this call was not implemented
with the @samp{funny} concept.  Instead, it is a call by itself.
This means that, in @code{sdtty}, you type @code{funny square thru <n>}
on one line, rather than pressing
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after the word @code{funny}.
In @code{sd}, the call menu will have @code{funny square thru <n>}.

@node Rotate from Columns, Recycle, Funny Square Thru, Call Notes
@section Rotate from Columns

Remember that @i{rotate} and @i{single rotate} from columns is legal only
at C3, but from lines it is legal at C2.  Since the program has no
knowledge of different starting setups implying different levels, the call
is in the database at C2.  Don't use it from columns at that level.

@node Recycle, Going Through Impossible Situations, Rotate from Columns, Call Notes
@section Recycle

There are two @i{Recycle} calls in the database: @samp{recycle} can be done
from waves, facing couples, right-handed boxes, or a couple facing a
right-handed mini-wave.  It can take the @samp{cross}, @samp{single}, or
@samp{diamond} modifiers.  It is the call that dancers will do when told
to @i{recycle}, and is the call that is used in @i{cover up} and
@i{counterpoint}.

Unfortunately, there is no mechanism for the program to recognize a call
as being fractionalizable in some setups but not others, and the
facing-couples version of recycle is not fractionalizable.
To permit fractional use of recycle, as with
@samp{interlace} or @samp{random}, we have provided a call
@samp{recycle (by parts)}, which can be done only from lines.  Use this call
(but don't read the ``by parts'' phrase) when fractions are required.

@node Going Through Impossible Situations,  , Recycle, Call Notes
@section Going Through Impossible Situations

Under certain circumstances, people who collide in the same spot during
a call will take right hands with each other, according to well-known
rules governing this type of occurrence.  Other than that, the program does
not allow ``impossible'' intermediate situations in which multiple people
occupy the same spot.

In some cases, you may want to call something that sends people through
a momentary impossible situation, for example calling something like
@samp{everyone do your part, split trade circulate twice} when people
are in normal waves.  The first @samp{split trade circulate} is impossible,
but if you tell the dancers to do their own part and not worry about
the collision after the first one, they can do it.

The program doesn't like to do this.  Just calling @code{twice split trade
circulate} won't work, because the program will have multiple dancers on
the same spot after the first one.  You can trick the program into doing
it anyway, by using the @code{so-and-so do your part} concept.  Enter something
like @code{heads do your part, twice split trade circulate while the
others twice split trade circulate}.  Exactly who has to be designated
depends on the the setup.

You can also use this method to get everyone to do their part of
calls that are illegal in the existing setup.  For example, flip back
is illegal from facing lines.  If you really want people to do it anyway,
with everyone doing their part, you can enter @code{beaus do your part,
flip back while the others flip back}.

@node Concept Notes, Misc Advice, Call Notes, Top
@chapter Concept Notes

@menu
* Phantom Concepts::            Phantom Concepts
* Tandem or Couples Concepts::  Tandem or Couples Concepts
* Distorted Setup Concepts::    Distorted Setup Concepts
* 4-person distorted concepts:: 4-person distorted concepts
* Miscellaneous Concepts::      Miscellaneous Concepts
* Main Menu Concepts::          Miscellaneous Concepts Appearing Only in the Main Menu
* Concentric::                  Concentric
* Assume Waves::                Assume Waves
* Assuming a Quarter-Tag::      Assuming a Quarter-Tag
* Designating Certain People::  Designating Certain People
* 12 Matrix and 16 Matrix::     12 Matrix and 16 Matrix
@end menu

Most concepts have clear and precise meanings, and do not
need any further discussion here.  However, for a significant
number of concepts, the distinction between precisely defined,
universally understood terminology, and ``common sense''
description of what you want the dancers to do, becomes rather
blurred.  When using computers to write choreography, a lot of
questions of the form, ``How do I get the program to do this?''
arise.  For that reason, a complete list of available concepts
will be given here.  For many of them, their meaning is clear, and
nothing further will be said.  For the troublesome ones, we
will attempt to describe just what the program understands
them to mean.

For many of the less straightforward cases, the words that the
program uses are not the words that you would use to get the
dancers to do the equivalent thing.  You must always use your
own judgement.  No claim is made that the program's notion
of what the words literally mean is the universally accepted
definition of the concept.

In the menu-based program (Sd), most of these concepts are on
special menus that are brought up by clicking on one of the
concept icons on the left side of the screen.  There are far too
many concepts to make them all visible on the screen at the same time.
In sdtty, just type the name of the concept without worrying about what
menu it would be on.

Just what constitutes a ``concept'' and what constitutes a mere
``variation'' of a call is not always clearly delineated.  We list
below only those things that the program considers to be ``concepts.''
There are many other variations of calls, such as @i{square chain thru
to a wave} that are not listed here.  In general, variations of this sort
can be obtained simply by clicking on them or typing them.  They should
be visible on the call menu, and, if you type a question mark to @code{sdtty}
while typing the call name, these variations should be displayed.

In the concept names, ``C/L/W'' has the usual meaning of ``columns,
lines, or waves.''  Extending that terminology, ``B'' means boxes,
``D'' means diamonds, ``1'' means 1/4 tags, and ``3'' means 3/4 tags.
``DS'' means ``diamond spots'', that is, diamonds or general 1/4 tags
in which no assumption is made about anyone's facing direction.
``GT'' means ``general 1/4 tags'', in which the ends could individually
be facing either in or out.

In all concepts that can be done either from lines or waves,
the ``waves'' version has an implicit ``assume waves'' operation
in it.  Under normal circumstances, this means that the live people can make use of
the assumption of waves in order to decide how to start the call.  For example,
in normal columns, @code{split phantom waves in roll circulate}, which
is equivalent to @code{split phantom lines, assume waves, in roll circulate},
is legal, since the phantom in-roller's location can be deduced from the
wave assumption.

The call @code{split phantom lines in roll circulate} is illegal from columns
because the facing direction of the phantom in-roller is unknown.

If ``active phantoms'' are used, either because the @code{with active phantoms}
concept is used after the phantom wave concept or because the @code{toggle
active phantoms} command was given, the phantoms will work throughout the entire
call, based on the initial facing direction in waves.

The concepts with the word @code{diamonds} have an implicit @code{assume
general diamonds} operation in them.  This means that everyone must think they are individually
in some kind of diamond, with their right or left hand toward the center.
You may give an explicit @code{assume} concept to make the setup more specific if
you wish, as in @code{split phantom diamonds} followed by @code{assume interlocked
diamonds}.

The concepts with the words @code{1/4 tags} or @code{3/4 tags} require some kind
of line in the middle, and the ends as a couple facing in or out, respectively.
Hence, for example, the @code{split phantom 1/4 tags} concept includes 1/4 tags,
1/4 lines, or any kind of line in the center, as long as the ends are facing in.
You may give an explicit @code{assume} concept to make the setup more specific if
you wish, as in @code{split phantom 1/4 tags} followed by @code{assume right 1/4 lines}.

The concepts with the words @code{general 1/4 tags} have an implicit @code{assume
general 1/4 tags} operation.  This means that the centers must think that they are
in some kind of line, and the ends must be in some kind of couple or miniwave.  The
word @dfn{general} means that the in-or-out facing direction of the outsides is
unimportant, but they must be facing in or out, not sideways as in diamonds.
There are no @code{general 3/4 tags} concepts, because the @code{general 1/4 tags}
setup does not distinguish between ends facing in or out.

The concepts with the words @code{diamond spots} make no assumptions at
all about facing direction.  The people can be in any kind of general diamond
or general 1/4 tag.  Use these when people's facing directions are bizarre.

Precisely what an assumption means is determined by whether the
``active phantoms'' mode is turned on, and is discussed in @ref{Assume Waves}.

@node Phantom Concepts, Tandem or Couples Concepts, , Concept Notes
@section Phantom Concepts

These involve picking out virtual setups, which may include
phantoms, from a real formation that is larger than eight people.

The menu for these is brought up by clicking on the ``phantom
line/col concepts'' or ``phantom box/dmd/qtag concepts'' icon.

In all cases outboard phantoms are added as required at the start of the call,
and removed where possible at the conclusion of the call.

@table @code
@item split phantom C/L/W/B/D/1/3/DS/GT
@item interlocked phantom C/L/W/B/D/1/3/DS/GT
@item phantom C/L/W/B/D/1/3/DS/GT
These are straightforward.
@item 12 matrix split phantom C/L
@item 12 matrix interlocked phantom C/L
@item 12 matrix phantom C/L
These are done from a 3x4.  The setup is separated into
parallel 2x3's, and the call is done in each of those setups.
@item divided C/L/W
These are done from a 2x8.  The setup is separated into
end-to-end 2x4's, and the call is done in each of those setups.  They are equivalent
to, and generally replaced by, @i{split phantom boxes}.
If people are T-boned, you can use @code{standard} to permit the concept to be used.
@item 12 matrix divided C/L/W
These are similar to @i{divided C/L/W}, except that they are
done from a 2x6.  The setup is separated into
end-to-end 2x3's, and the call is done in each of those setups.  There is no
@i{split phantom boxes} equivalent for these.
@item twin phantom tidal C/L/W
These are done from a 2x8, and form two parallel 1x8's with phantoms,
in each of which the call is done independently.

The program uses the term ``tidal'' to mean a 1x8.  You may prefer to
use the word @code{grand}.
@item twin phantom C/L/W of 6
These are done from a 2x6, and form two parallel 1x6's with phantoms,
in each of which the call is done independently.
@item triple C/L/W/B/D/1/3/DS/GT
@item quadruple C/L/W/B/D/1/3/DS/GT
These are straightforward.
@item center triple C/L/W/B (singular)
@item outside triple C/L/W/B
These are done from a setup that can be construed as having a center
4-person setup with two other 4-person setups on the outside.  The center
setup can be different from the outside setups, and reasonable independent
shape-changers are allowed.

A suitably populated 4x4 matrix can be construed as a center triple box
surrounded by outside triple lines or columns.
@item center phantom C/L/W/B
@item outside phantom C/L/W/B
These are done from a setup that can be construed as having a center
8-person setup with two other 4-person setups on the outside.  The center
setup can be different from the outside setups, and reasonable independent
shape-changers are allowed.

A common case of this is a 4x4.  The center phantom lines or columns
can do an 8-person call.  The outer phantom lines or columns can do
independent 4-person calls.
@item triple C/L/W/B/D/1 working together
@item triple C/L/W/B working apart
@item triple L/W/B working forward/backward
@item triple C/B working right/left
@item triple C/L/W/B working clockwise/counterclockwise
@item quadruple C/L/W/B/D/1 working together
@item quadruple C/L/W/B working apart
@item quadruple L/W/B working forward/backward
@item quadruple C/B working right/left
@item quadruple C/L/W/B working clockwise/counterclockwise
These are straightforward.
@item triple diagonal C/L/W
@item triple diagonal L/W working forward/backward
@item triple diagonal columns working right/left
These are done from a 6x6 matrix.  For example, in ``blocks'', the
main diagonal and the two adjacent diagonal lines of 4, each of which
has only centers occupying it, comprise the triple diagonal lines.
These concepts are quite obscure.
@item triple twin C/L/W
This is done from a 4x6 setup.  Three parallel 2x4 setups are
formed, and the call is done independently in each of them.
@item concentric triple boxes
@item concentric quadruple boxes
These are done from a 2x6 or 2x8 respectively.  The concentric boxes
work independently.
@item twin phantom D/1/3/DS/GT
These are two sets of parallel diamonds or 1/4 tags (that is,
setups in which you could call @code{6x2 acey deucey} or
@code{scoot and plenty}) that are next to each other along the
opposite orientation to the orientation given by @code{split phantom
diamonds}.  That is, there is a 2x2 matrix of diamonds or 1/4 tags.
The diamonds in each parallel pair work with each other, but the
pairs work independently.
@end table

@node Tandem or Couples Concepts, Distorted Setup Concepts, Phantom Concepts, Concept Notes
@section Tandem or Couples Concepts

The menu for these is brought up by clicking on the ``couples/tandem concepts'' icon.

@table @code
@item as couples@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ couples twosome
@item tandem@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ tandem twosome
@item siamese@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ siamese twosome
@item couples of three@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ couples threesome
@item tandems of three@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ tandem threesome
@item couples of four@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ couples foursome
@item tandems of four@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ tandem foursome
@item boxes work solid@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ boxsome
@item diamonds work solid@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ diamondsome
@item skew@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ skewsome
@item <ANYONE> are as couples@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ <ANYONE> are couples twosome
@item <ANYONE> are tandem@ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ @ <ANYONE> are tandem twosome
@item <ANYONE> are couples of three@ @ @ @ @ @ @ @ @ @ <ANYONE> are couples threesome
@item <ANYONE> are tandems of three@ @ @ @ @ @ @ @ @ @ <ANYONE> are tandem threesome
@item inside triangles work solid@ @ @ @ @ @ @ @ @ @ @ @ inside triangles work threesome
@item outside triangles work solid@ @ @ @ @ @ @ @ @ @ @ outside triangles work threesome
@item in point triangles work solid@ @ @ @ @ @ @ @ @ @ in point triangles work threesome
@item out point triangles work solid@ @ @ @ @ @ @ @ @ out point triangles work threesome
@item wave-based triangles work solid@ @ @ @ @ @ @ @ wave-based triangles work threesome
@item tandem-based triangles work solid@ @ @ @ @ @ tandem-based triangles work threesome
@item <ANYONE>-based triangles work solid@ @ @ @ <ANYONE>-based triangles work threesome
These are straightforward.

Any of the above twosome/threesome/whateversome may also be
``<N/4> whateversome'' or ``whateversome <N/4> solid''

Any of the above may be used with the @code{phantom} concept in front
of it.  There are no concepts like @code{phantom tandem} listed
separately---you must use the @code{phantom} concept followed by the
concept that you want.
When using sdtty, you must press
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after typing the word @code{phantom}.
You can't type, for example, @code{phantom tandem} on one line.

The @i{phantom tandem/as couples} concepts expand the people into a 4x4
matrix whenever possible.  When that is not possible, a 2x8 matrix is
formed.  You can use the @code{2x8 matrix} concept in order to force this.
For example, from normal columns, @code{phantom tandem} puts all the real
people in tandem with each other, and makes them the centers of @i{lines}.
You could call a @code{ferris wheel}, but not a @code{checkmate the column},
from this setup.  If you wanted the pairs of real people to be centers of
columns, so that you could call @code{checkmate the column}, use
@code{2x8 matrix phantom tandem checkmate the columns}.
@item gruesome twosome
This is done from a 2x8.  It has an implicit ``assume waves'' in it.
@end table

@node Distorted Setup Concepts, 4-person distorted concepts, Tandem or Couples Concepts, Concept Notes
@section Distorted Setup Concepts

The menu for these is brought up by clicking on the ``distorted setup concepts'' icon.

@table @code
@item stagger
@item big block          (any kind of lines)
@item big block waves    (this means ``assume waves'')
These encompass any kind of distorted lines or columns.
@item O
@item butterfly
These are straightforward.
@item stairstep C/L/W
A ``stairstep'' is a 4x4 matrix occupied so that everyone has exactly
one live person on their left or right.  It could typically be obtained
by doing a @code{split phantom columns split circulate} from normal
columns.  You may wish to use the @code{distorted C/L/W} concept instead.
@item ladder C/L/W
A ``ladder'' is a 4x4 matrix occupied so that everyone has exactly one
live person in front or in back.  It could typically be obtained
by doing a @code{split phantom waves split circulate} from normal
waves.  You may wish to use the @code{distorted C/L/W} concept instead.
@item offset C/L/W
An ``offset'' C/L/W is a pair of lines or columns that has been sheared
in the middle by either 50% or 100%, making a 3x4 or 4x4 matrix, respectively.
A 4x4 matrix offset line or column is sometimes referred to as ``clumps''.
All of the live people work together accross the shear line.  If a shape-changer
is called, the setup may become a 2x8 matrix, that is, a 100% offset
parallelogram.
@item Z C/L/W
This is a pair of lines or columns that have been distorted by having the
centers or the ends move one full matrix spot, to make a 4x4 matrix, or
by having centers and adjacent ends move 1/2 matrix spot in opposite
directions, to make a 3x4 matrix.  The people move together in pairs.
The 4x4 matrix version can be formed by having either the centers or the
ends press ahead from waves. The 3x4 matrix version can be formed by
having everyone 1/2 press ahead from waves.
@item distorted C/L/W
This encompasses any kind of distortion of a pair of lines or columns
into a 3x4 or 4x4 matrix.
@item diagonal C/L/W (singular)
@item <ANYONE> in your diagonal C/L/W (singular)
These require a ``blocks'' setup.  They specify the ``long diagonal'',
recognized as either a line or column.  You may specify who the people
are (heads, boys, etc.) or not, as you choose.
@item diagonal C/L/W (plural)
These are done from a 4x6.  The setup has 8 real people, doing an
8-person call.  The setup could be formed from stairsteps by having
the ends press ahead or back such that each line is diagonal and straight.
These concepts are quite obscure.
@item diagonal C/L/W of 3 (plural)
These are done from ``blocks''.  The two lines or columns work together
in a 2x3 matrix, doing a 6-person call.
@item distorted tidal C/L/W (singular)
These are done from a 2x8 matrix in which ther real people form some
kind of distorted 1x8.
@item <ANYONE> in your distorted C/L/W/B/D (singular)
These are done from a variety of setups, in which the designated people
form a recognizable distorted setup.  Reasonable shape-changers are allowed.
@item parallelogram
This includes 100% offset parallelograms in 2x8 matrices.
@item phantom big block L/W
@item phantom stagger columns
@item phantom stairstep C/L/W
@item phantom ladder C/L/W
@item phantom offset C/L/W
@item phantom butterfly or O
These are the phantom versions of the indicated concepts, in which
each dancer works in the spots of indicated setup, with real people
or phantoms as required.
@end table

@node 4-person distorted concepts, Miscellaneous Concepts, Distorted Setup Concepts, Concept Notes
@section 4-person distorted concepts

The menu for these is brought up by clicking on the ``4-person distorted
setup concepts'' icon.

@table @code
@item split
This divides a 2x4 into two 2x2's.  It also has all the other meanings
of the word ``split''.  The distinction between this as a concept and
as a word appearing in a call name is extremely hazy.
@item once removed
@item once removed diamonds
The @code{once removed} concept encompasses diamonds. so you can
say either @code{once removed} or @code{once removed diamonds}.
@item magic
@item diagonal
@item trapezoid
These are straightforward.
@item overlapped diamonds
This is done from a 1x4.
@item overlapped lines
@item overlapped waves
These are done from a diamond.
@item interlocked parallelogram
This is either done from a 2x4 or a 3x4.  In the latter case,
the spots occupied by real people are used to form two
interlocked parallelograms sharing the center line or column.
@item interlocked boxes
This is done from 3x4 matrix ``Z'' lines or columns.
The spots occupied by real people are
used to form two elongated boxes sharing the center line or column.
It is equivalent to @code{Z C/L/W once removed}.
@item twin parallelograms
This is done from 3x4 matrix offset lines or columns.  The people
that would form each distorted line or column instead form a distorted
box.
@item each Z
@item interlocked Z's
These are done from 3x4 or 4x4 ``Z'' lines or columns, and are equivalent
to @code{Z C/L/W split} and @code{Z C/L/W once removed}, respectively.
@item jay
@item back-to-front jay
@item back-to-back jay
These include the cases of a 2-faced line in the center.
In that case the shapes of the resultant 4-person boxes are
different, and the concepts are equivalent to the ``parallelogram''
concepts below.
@item facing parallelogram
@item back-to-front parallelogram
@item back-to-back parallelogram
These are other names for the @code{jay} concepts, except that
the center line is required to be a 2-faced line.
@item blocks
@item in your blocks
These are two names for the same thing.
@item 4 phantom interlocked blocks
These are straightforward.
@item triangular boxes
This may only be done from a ``blocks'' setup.
@item 4 phantom triangular boxes
This may be done from any 4x4 matrix.
@item distorted blocks
This may be done from a 4x4 matrix that comprises
blocks with some people out of their usual place
in an unambiguous way.  People work to the same spots.
@end table

@node Miscellaneous Concepts, Main Menu Concepts, 4-person distorted concepts, Concept Notes
@section Miscellaneous Concepts

The menu for these is brought up by clicking on the ``miscellaneous concepts'' icon.
Many also appear in the special concept menu that is always visible.

@table @code
@item left
@item reverse
@item cross
@item single
@item grand
@item mirror
@item interlocked
These are straightforward.
@item single file
You must use this concept, instead of the words ``on a double track'' or
whatever, when doing calls like @i{dixie style} from a single file starting
double pass thru.
@item triangle
This turns a triangle into a box by having the apex step backward.
It is intended for things like @code{triangle peel and trail}.
@item diamond
This is for things like @code{diamond quarter thru} and
@code{diamond single wheel}.  You should not need to select @code{diamond}
except when you actually want this concept.  There are cases in which it
may seem that the word @i{diamond} ought to be added after selecting
@code{interlocked} and/or @code{magic}.  The program will insert the
extra word @i{diamond} for you.  So, for example, selecting @code{magic}
and then @code{alter the diamond} will get @samp{magic diamond, alter
the diamond}, and selecting @code{magic}, @code{interlocked}, @code{diamond},
@code{as couples}, and @code{quarter right} will get @samp{magic interlocked
diamond, diamond as couples quarter right}.
@item 12 matrix
@item 16 matrix
See @ref{12 Matrix and 16 Matrix}.
@item phantom
This is both the C1 concept, and the concept required in front of
a tandem or as-couples concept to turn it into @samp{phantom tandem}
or @samp{phantom as couples}.
@item funny
This can handle @samp{circulate}-like calls and @samp{square thru}, but
can't handle things like @samp{funny slide thru 3 times}
@item matrix
This is used in front of concepts like @samp{split phantom waves} to indicate
that the normal ``glueing'' rule is replaced by a rule that makes each setup
stay centered on its original center, possibly resulting in overlap among
the setups.
@item assume <some setup>
@item assume normal casts
@item with active phantoms
See @ref{Assume Waves} and @ref{Assuming a Quarter-Tag}.
@item invert
This inverts the centers' and ends' parts of the call.
@item fan
@item yoyo
@item central
@item invert central
@item snag
@item invert snag
@item mystic
@item invert mystic
These are straightforward.
@item <ANYONE> are standard in
This is used in front of concepts like @samp{split phantom lines}.
@item stable
@item <ANYONE> are stable
@item <N/4> stable
@item <ANYONE> are <N/4> stable
@item trace
@item ferris
@item release
@item stretch
@item stretched setup
@item stretched box
@item stretched line
These are straightforward.
@item centers
@item ends
@item centers and ends
@item center 6
@item outer 6
@item center 2
@item outer 2
@item center 6/outer 2
@item center 2/outer 6
@item <ANYONE>
@item <ANYONE> (while the others)
@item <ANYONE> disconnected
@item <ANYONE> disconnected (while the others)
@item <ANYONE> do your part
@item <ANYONE> do your part (while the others)
@item on your own
@item own the <ANYONE>
@item ignore the <ANYONE>
These are straightforward.  @i{You must enter these concepts by themselves.}
That is, you must press
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after typing any of these concepts.  This is
true of all of the concepts that designate certain people.  You can't just type
@code{centers trade}, because it is ambiguous.  Similarly, you can't just
type @code{boys disconnected swing thru}.  You must press
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after @code{boys disconnected}.  See @ref{Designating Certain People} for a detailed
discussion of these concepts.
@item <ANYONE> lead for a
This is used from a ``promenade, do not stop @dots{}'' situation.  The call
will be done as if in 2-faced lines, with the designated people in the
lead.  The final promenade distance will be computed as though you had allowed
the dancers to promenade about halfway around the set before they did the call.
@item ends concentric
@item centers and ends concentric
These are like @samp{ends} and @samp{centers and ends}, except that the
concentric rules (e.g., lines-to-lines and columns-to-columns) are used
to dictate where the ends should finish.
@item checkpoint
@item reverse checkpoint
@item checkerboard
@item checkerbox
@item checkerdiamond
@item <ANYONE> preferred for trade, checkerboard
@item <ANYONE> preferred for trade, checkerbox
@item <ANYONE> preferred for trade, checkerdiamond
@item shadow box
These are straightforward.
@item <ANYONE> work <concept>
This concept is rather difficult to do in the most general case.
The program executes it effectively as an @samp{own the <ANYONE> for
a <concept> <call> by <call>}.  That is, @code{ends work tandem, swing thru}
is performed by having the ends do their part of a @samp{tandem swing thru}
while the centers do a @samp{swing thru}.
This concept is entered by typing the designated people instead of the
@samp{<anyone>}, and then ``work <concept>''.  You literally type the
``<concept>'', including the angle brackets.  (Of course, type-in completion
makes it unnecessary to type the whole thing.)  After you press
@iftex
@keycap{ENTER},
@end iftex
@ifinfo
@key{<ENTER>},
@end ifinfo
type the concept, press
@iftex
@keycap{ENTER},
@end iftex
@ifinfo
@key{<ENTER>},
@end ifinfo
and type the call.
@item two calls in succession
This concept allows a pair of calls to be executed atomically under a concept.
This makes it possible to do a @samp{concentric (recycle ; roll)} and have the
lines-to-lines rule embrace the roll.  It also makes it possible to place two
calls on the same line that need to be spoken together for clarity, such as
@samp{recycle and roll}.  The finished transcript will show the two calls within
parentheses, and separated by a semicolon.  The proper way
to say the concept when calling is problematical.  Something like @samp{consider
the following two calls to be one unit, and do a stable swing thru and turn thru}
might be appropriate.
@item precede it by
@item follow it by
The concepts @code{precede it by} and @code{follow it by} take two subject
calls.  They perform the first call (first in textual order, that is)
@i{before} or @i{after}, respectively, the second.  For example,
@code{follow it by roll, swing thru} does a swing thru and roll.
There is only one context in which these concepts are sensible---they can be
the subject of the @code{piecewise}, @code{random}, or @code{reverse random}
meta-concepts.  For example, @code{piecewise follow it by criss cross the
deucey, turn the key} will do a @samp{criss cross the deucey}
after each of the three parts of @samp{turn the key}.

These concepts are among the situations in which the program does not attempt
to print out the exact words that are appropriate to use when calling, but
instead prints out an unambiguous description of what is supposed to happen.
The exact words you should use depend on the context and on your judgement.
You might say @code{piecewise add a criss cross the deucey, and turn the key},
or @code{do a criss cross the deucey after each part, and turn the key}, or
something similar.
@item crazy
@item reverse crazy
@item <N/4> crazy
@item <N/4> reverse crazy
These are straightforward.
@item <N>/<N>
@item 1-<N>/<N>
@item twice
@item <N> times
@item do the last <N>/<N>
@i{You must enter these concepts by themselves.}
That is, you must press
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
after typing any of these concepts.  This is
necessary to avoid the difficulties of deciphering such things as
@samp{1/2, mix}, @samp{3/4, mix}, @samp{3/4 mix}, and @samp{2/3, 3/4 mix}.
In the finished transcript, a comma will appear after these concepts
to resolve the ambiguity.  You never type the comma---pressing
@iftex
@keycap{ENTER}
@end iftex
@ifinfo
@key{<ENTER>}
@end ifinfo
at the appropriate moment tells the program how you want the ambiguity resolved.

The @code{M/N} concept, where @code{M} and @code{N} are numbers, causes that
fraction of the subject call to be executed, as in @samp{3/5 swing the fractions}.
In @code{sdtty}, just type in the numbers directly, as in @code{3/5}.
In @code{sd}, the concept is listed as @code{<M/N>}.  A popup will appear asking
for the numbers.  Enter two of them.

The @code{1-M/N} concept causes the subject call to be executed once and the indicated
fraction of a second time, as in @samp{1-1/2 split circulate}.

Not all calls are fractionalizable in this way.  Also, the exact way you should
say the fraction might vary according to the call or your individual taste.
It will always appear before the call in the transcript, but you might want to
say the fraction after the call, as in @samp{swing the fractions four fifths} or
@samp{split circulate once and a half}.

The @code{twice} concept simply causes the subject call to be executed
twice.  This is a notion familiar at all levels from Mainstream
(@samp{spin chain thru, the girls double circulate}) to C4 (@samp{piecewise
twice, recoil}).

The @code{<N> Times} concept causes the subject call to be executed that number
of times.  In @code{sdtty}, just type in the number directly, as in @code{3 times}.
In @code{sd}, the concept is listed as @code{<N> times}.  A popup will appear
asking for the number.

No universally recognized words for these exist, so the program uses the generic
phrases noted above.  When calling, use whatever words you think are appropriate,
such as @samp{twice}, @samp{thrice}, @samp{circulate two positions}, or whatever.
@item piecewise
@item initially
@item finally
@item random
@item reverse random
These are followed by the concept to which they apply.  You may enter the
concepts and call separately, as in
@example
@iftex
reverse @keycap{ENTER}
random @keycap{ENTER}
tandem @keycap{ENTER}
swing thru @keycap{ENTER}
@end iftex
@ifinfo
reverse @key{<ENTER>}
random @key{<ENTER>}
tandem @key{<ENTER>}
swing thru @key{<ENTER>}
@end ifinfo
@end example
or all together, as in
@example
@iftex
reverse random tandem swing thru @keycap{ENTER}
@end iftex
@ifinfo
reverse random tandem swing thru @key{<ENTER>}
@end ifinfo
@end example
@item shifty
@item shift <N>
@item interlace
@item reverse order
These are straightforward.
@item finish
@item like a
To Sd, @code{finish} means ``skip the first part,'' and is only legal for
calls for which the first part is recognizable.  Sd also recognizes the concept
@code{like a}, meaning ``do the last part.''  You need to be aware, however,
that there are calls for which, while it is technically legal to say such things,
they are not accepted as common usage.  For example, @code{finish shazam} as a way of
saying @dfn{U turn back}, or @code{finish mix} or @code{like a mix} as ways
of saying @dfn{centers trade}, would have to be considered rather peculiar.
You must exercise your judgement when using these concepts.

We believe that these are the technically correct meanings of these phrases,
and are consistent with common usage when that common usage is correctly
applied.  For example,
@example
   cast off 3/4
   LIKE A shazam
@end example
is a commonly accepted and completely correct usage.

One occasionally hears things like @dfn{cross chain reaction, centers
finish like a wheel the ocean}, in which the final cast off 3/4 of the
chain reaction was ``pushy.''  While the plain English language meaning
of that is clear, the way you must enter that to Sd is
@example
   CROSS chain reaction
   CENTERS LIKE A wheel the ocean
@end example
You must, of course, verify that the casting direction is correct for
smooth dancing of this figure.
@item <ANYONE> start
@item skip the <Nth> part
@item do the <Nth> part <concept>
@item replace the <Nth> part
@item interrupt after the <Nth> part
These concepts cause the call to be interrupted or replaced as indicated.

The @code{<ANYONE> start} concept has the indicated people do their own
part of the first part of the call, after which the others join them.
You should type this in as, for example
@example
@iftex
boys start @keycap{ENTER}
quarter thru @keycap{ENTER}
@end iftex
@ifinfo
boys start @key{<ENTER>}
quarter thru @key{<ENTER>}
@end ifinfo
@end example
The @code{do the <Nth> part <concept>} concept applies the given concept
to the indicated part of the call, but not to the rest.  You literally type the
``<concept>'', including the angle brackets.  (Of course, type-in completion
makes it unnecessary to type the whole thing.)  For example, you might type
@example
@iftex
do the 2nd part <concept> @keycap{ENTER}
tandem @keycap{ENTER}
remake @keycap{ENTER}
@end iftex
@ifinfo
do the 2nd part <concept> @key{<ENTER>}
tandem @key{<ENTER>}
remake @key{<ENTER>}
@end ifinfo
@end example
The @code{replace} and @code{interrupt} concepts require two calls.  After
typing the concept, type the call that is to have a part interrupted or replaced.
The program will then ask you for the call that comprises the interruption or
replacement.

Some of the replacement/interruption meta-concepts push the
semantics of the language to the limit.  Whenever a call undergoes an
interruption or enters or leaves a part with an additional concept on it,
there is an implicit @i{piecewise} at that instant.  That is, concepts and
setups are re-evaluated.
This behavior is not always obvious to the dancers.
Furthermore, in some cases it may be perceived as wrong.  For example, an
implied @i{piecewise} on a concept such as @i{cross concentric} or
@i{single cross concentric} is very likely to be considered wrong,
because the centers and ends will switch with each other multiple times.
If you have any doubt about whether some instance of concept stacking is
correct and will be understood by the dancers, do not use it.

Furthermore, replacements and interruptions are @emph{normal}, that is, they
do not carry any concepts that were on the call being replaced---only
those on the entire operation.

Example, from a starting DPT setup:

@example
DELAY: TANDEM TWOSOME clean sweep 1/4 BUT REPLACE THE 3rd
PART WITH A [CHECKPOINT crossfire BY crossfire]
@end example

Normally, the tandem twosome behavior is not re-evaluated after each
part of the clean sweep.  But, since the third part was replaced with
something else to which that concept did not apply, the setup is
re-evaluated before doing the final part.  Note in particular that
the replacement was @emph{normal}---the call having a part replaced was a
@i{tandem twosome clean sweep 1/4}.  If we wanted the entire operation,
including the replacement, to be tandem twosome (with no re-evaluation,
of course) we might call:
@example
TANDEM TWOSOME DELAY: clean sweep 1/4 BUT REPLACE THE 3rd
PART WITH A [SINGLE CROSS CONCENTRIC turn thru]
@end example

If you think that some instance of a replacement or interruption will
cause confusion on the dance floor because of this sort of issue,
you should not use it.
@item inside triangles
@item outside triangles
@item in point triangles
@item out point triangles
@item tall 6
@item short 6
@item wave-based triangles
@item tandem-based triangles
@item <ANYONE>-based triangles
These are straightforward.
@item concentric
@item cross concentric
@item single concentric
@item single cross concentric
@item concentric diamonds
@item cross concentric diamonds
See @ref{Concentric}.
@item grand working forward/backward
@item grand working right/left
@item grand working as centers
@item grand working as ends
@item <ANYONE> are centers of a double-offset 1/4 tag
@item <ANYONE> are centers of a double-offset 3/4 tag
@item <ANYONE> are centers of a double-offset thing
@item <ANYONE> are centers of double-offset diamond spots
@item inrigger
@item outrigger
@item leftrigger
@item rightrigger
@item backrigger
@item frontrigger
These are straightforward.
@item common point galaxy
@item common spot columns
@item common point diamonds
@item common end lines
The program assumes that the ``common spot'' concepts treat people as though
they had collided and taken @i{right} hands.  Left-hand miniwaves are not
accepted.  If you want to use these concepts with people in left-hand
miniwaves, you must apply the @samp{mirror} concept to the entire operation.

The @code{common point galaxy} concept is used from a ``rigger'' setup in
which the ``wings'' are collided points.  The @code{common spot columns}
concept is used from offset right-hand columns.  The @code{common point
diamonds} concept is used from the kind of setup one obtains after a
@samp{6x2 acey deucey} from facing diamonds.   The @code{common end lines}
concept is used from a parallelogram in which the ``wings'' are collided
ends of the lines.
@item 1x2/2x1/2x2/1x3/3x1/3x34x4
These are straightforward.
@item all 4 couples
@item all 8
@item all 8 (diamonds)
The @code{all 4 couples} and @code{all 8} concepts appear to be undergoing
some re-examination.  The program's behavior on these might not be
satisfactory at the present time.  The @code{all 8 (diamonds)} concept
is used from a thar, in which the call is intended to be performed in
each of two interleaved diamonds.  In real life, one can generally call this
as just @code{all 8}, and the dancers will know what is required.  The
program is not that smart, and requires the ``(diamonds)'' hint.
@end table

@node Main Menu Concepts, Concentric, Miscellaneous Concepts, Concept Notes
@section Miscellaneous Concepts Appearing Only in the Main Menu

These appear only in the concept menu that is always visible on the left
side of the screen.

@table @code
@item each 1x4
@item each line
@item each wave
These can be used in troublesome situations to force a setup to be split
in the indicated way.  For example, from a tidal wave, the @code{each wave}
concept can be used to cause a @samp{counter rotate} to be performed as a
@samp{lockit}.  The @code{each 1x4} concept splits the setup into 1x4
setups without regard for individual dancers' facing direction.  From
columns, @code{each 1x4 sidetrack} can cause the @samp{sidetrack} to be
done in individual columns (though @code{single sidetrack} will do the
same thing).
@item 1x12 matrix
@item 1x16 matrix
@item 2x6 matrix
@item 2x8 matrix
@item 3x4 matrix
@item 4x4 matrix
@item 3x8 matrix
@item 4x6 matrix
@item 16 matrix of parallel diamonds
These force the setup to be expanded as shown, to cause various other concepts
to be interpreted in the desired way.  For example, from parallel waves,
the concept @code{phantom tandem} would expand the setup to a 4x4 matrix,
making each person in tandem with a phantom, and creating a virtual 2x4.
@code{2x8 matrix phantom tandem} would leave live people tandem with live
people, create phantoms in tandem with other phantoms, and create a virtual
tidal line.  The @code{16 matrix of parallel diamonds} concept expands to
quadruple diamond spots.
@end table

@node Concentric, Assume Waves, Main Menu Concepts, Concept Notes
@section Concentric

The @samp{concentric} and @samp{cross concentric} concepts are formulated
as follows:
The rule tells how the people who finish on the outside should
elongate their 2x2 if they finish in a 2x2.  This is the only
case that needs to be addressed.

@enumerate
@item
If the people who finished on the outside in a 2x2 started
in a 2x2, they use the ``lines-to-lines/columns-to-columns'' rule,
relative to what setup @emph{they} thought they were in.

If the concept was @i{concentric}, so these people started on
the outside in an elongated 2x2, they can make a decision about
whether they had line or column elongation.  They do not have
to be in a 2x4 for this.  For example, from a dogbone created by
Heads touch, the sides think they are in columns.  But from ordinary
diamonds or an hourglass, they think they are in lines.

If the concept was @i{cross concentric}, so these people started in the
center in a 2x2, they must have the assistance of the original ends.
The original setup must have been a 2x4, except for weird pinwheel-like
setups noted below.  Hence it is @emph{illegal} to call @i{cross concentric
@w{square thru 2}} from a rigger in which the center box is facing couples
and the wings have right hands and are expected to rear back.  The
centers do not know whether they were in lines or columns because the
ends are not in an acceptable setup.  The centers do @emph{not} use the
``checkpoint elongate perpendicular to the 1x4 rule''---that rule does not
apply here.  If the outsides are in a pinwheel, that is, occupying a 4x4
matrix in an irregular way, each center
makes the line vs.@: columns decision based on the end person in their own
quadrant.  That is, the center person's own facing direction and that
end person's @emph{location,} but not that end person's facing direction.

@item
If the people who finished on the outside in a 2x2 started
in a 1x4 or diamond, they use the @dfn{checkpoint rule}---they elongate
their resulting 2x2 perpendicular to ``the long axis''.  In order to handle
all cases correctly, it is important to be very careful in choosing what
that long axis is.  As a good approximation, it is the long axis of
``the whole set''.

If the concept was @i{concentric}, so these people started on
the outside in a 1x4 or diamond, they use their own long axis, which is
the same as the long axis of the whole set.

If the concept was @i{cross concentric}, so these people started in
the center in a 1x4 or diamond, what they do depends on what setup the
original ends began in.  If the original ends began in a 1x4 or diamond,
the axis of that 1x4 or diamond is the same as the axis of the whole set.
The original centers elongate their 2x2 perpendicular to that.  This rule
applies, for example, when @samp{centers lockit; cross concentric recycle}
is called from a tidal wave.

If the concept was @i{cross concentric} and the original ends began in
a 2x2, the original centers @emph{ignore} the elongation of that 2x2.  Instead,
they elongate their resulting 2x2 perpendicular to @i{their own axis}, that
is, the axis of the 1x4 or diamond in which they began.  This rule applies,
for example, when @samp{cross concentric recycle} or @samp{center 2 shazam;
cross concentric diamond recycle} is called from a quarter-tag.
@end enumerate

@node Assume Waves, Assuming a Quarter-Tag, Concentric, Concept Notes
@section Assume Waves

There are several concepts that you can use to tell the dancers how phantoms
are facing.  They are
@example
   assume waves
   assume miniwaves
   assume couples
   assume two-faced lines
   assume one-faced lines
   assume inverted lines
   assume inverted boxes
   assume normal columns
   assume magic columns
   assume eight chain
   assume trade by
   assume dpt
   assume cdpt
   assume facing lines
   assume back-to-back lines
   assume general diamonds
   assume general 1/4 tags
   assume right 1/4 tags
   assume left 1/4 tags
   assume right 3/4 tags
   assume left 3/4 tags
   assume right 1/4 lines
   assume left 1/4 lines
   assume right 3/4 lines
   assume left 3/4 lines
   assume normal diamonds
   assume facing diamonds
   assume normal interlocked diamonds
   assume facing interlocked diamonds
@end example

Additionally, there are two related concepts, @code{assume normal casts} and
@code{with active phantoms}, which will be discussed below.

When these concepts are used by themselves, the information
that they convey tells the dancers how to begin certain calls such as
@samp{hinge}, @samp{vertical tag}, and @samp{in roll circulate}.
The information is thrown away after the call begins.  That is, the program
does not hold the dancers responsible for tracking phantoms through a call.
It only tells them how to begin.

Use these concepts with care.  Many dancers don't like to be held responsible
for the facing direction of phantoms.

These concepts will be implicitly applied whenever something like @code{split
phantom waves} or @code{triple diamonds} is used.

It is of course illegal to use one of these concepts, either explicitly
with @code{assume} or implicitly with something like @code{split phantom
waves}, if the live dancers are not facing in a way that is consistent with
the assumption.

@subsection Assume Normal Casts

The concept @code{assume normal casts} may be used in cases in which you
do not require the dancers to track phantoms through the call, but you
want to resolve any ambiguity about the @samp{cast off 3/4} operations
that happen at the end of such calls as @samp{chain reaction} and
@samp{motivate}.  You might read such an operation as @samp{12 matrix
motivate, assume the final cast off is normal}.

@subsection With Active Phantoms

The concept @code{with active phantoms}, used after one of the @code{assume}
concepts (either implicit or explicit), effectively places invisible but
otherwise intelligent dancers
on the phantom spots, with facing directions deduced from the assumption.
Those phantoms proceed through the entire call, interacting with each other
and with the live dancers as necessary.  If the call is impossible for the
phantoms to do, or if illegal collisions occur between live dancers and phantoms,
an error message is printed.  At the end of the call, any live dancers or
phantoms that come to the same spot may take right hands with each other,
if that is appropriate for the call.

Most of the types of @code{assume} concepts listed above are sufficiently
explicit that, if even a single live dancer is present in the setup, everyone's
facing direction may be inferred.  This is necessary for the @code{with active
phantoms} concept, of course.  For example, a single live dancer can determine
the handedness of all the phantoms when @code{assume two-faced lines} is given.
Two of the concepts are not sufficiently explicit for this, and may not be used
with @code{with active phantoms}.  They are

@example
   assume general diamonds
   assume general 1/4 tags
@end example

If you are going to use @code{with active phantoms}, you must give more detailed
assumptions than these two, such as @code{assume left 1/4 lines} or @code{assume
facing diamonds}.

Use the @code{with active phantoms} concept with extreme care, if at all.
It is extremely dangerous in terms of what it may require the dancers to do.
Many dancers find it difficult enough to do the live people's parts of calls
without having to do the phantoms' parts also.

You can put @code{sd} into a mode in which there is an implicit
@code{with active phantoms} whenever any assumption is made.
The @code{toggle active phantoms} command toggles (turns on or off)
this mode.  @xref{Changing Modes}.
When in this mode, @code{sd} will not actually insert the text
@code{with active phantoms} after each @code{assume} concept.

@node Assuming a Quarter-Tag, Designating Certain People, Assume Waves, Concept Notes
@section Assuming a Quarter-Tag

Callers sometimes wish to perform a generalized quarter-tag call (e.g.,
@samp{scoot and little}) from a setup in which only the center wave
contains real people, and the outsides need to be assumed.  For example,
from an as-couples wave, one could wish to specify that the live dancers
are the as-couples center wave of a quarter-tag.  The way to specify this
when calling is typically something like @samp{as couples in a quarter-tag,
scoot and little}.

The proper way to specify this in @code{sd} or @code{sdtty} is with the
@code{as couples} (or @code{tandem} or @code{couples twosome} or whatever)
concept, followed by a suitable @code{assume} concept, such as @code{assume
general 1/4 tags} or @code{assume right 1/4 tags}.  Which of these assumptions
you choose doesn't matter as long as it is consistent with the setup you are
creating, since you probably won't read the concept verbatim anyway.

For example, from an as-couples wave, you could select:
@example
   as couples
   assume right 1/4 tags
   scoot and little
@end example
Or, from parallel waves, you could select:
@example
   tandem
   assume general 1/4 tags
   ping-pong circulate
@end example

@node Designating Certain People, 12 Matrix and 16 Matrix, Assuming a Quarter-Tag, Concept Notes
@section Designating Certain People

There are six related concepts here.  You must have a clear
understanding of how the program treats them in order to use them effectively.
Compared to the natural and fluent way most dancers and callers use these
ideas, the program may seem idiosyncratic and ignorant in its handling of them.
@xref{Linguistic Idiosyncrasies}.

The six concepts are

@example
   so-and-so
   so-and-so disconnected
   so-and-so in your distorted setup
   so-and-so do your part
   ignore the so-and-so
   own the so-and-so
@end example

In general, be aware that the choice of words and punctuation that the program
uses for these concepts is determined by the need to avoid ambiguity, and may
not be the words that you should use when calling.

Also, the program is very fussy about using the designators correctly.  A large
number of designators are provided to help you with this.  In addition to the usual
@code{heads}, @code{sides}, @code{boys}, @code{girls}, @code{head corners},
@code{centers}, @code{ends}, @code{center 2}, @code{center 6}, @code{outer 2}, and
@code{outer 6}, there are some that are designed for difficult situations.

@table @code
@item center 4
This is intended for use in a parallelogram or offset lines
or columns.  It designates the center triple box, or center triple
line/column, respectively.  Just saying @code{centers} will not be
effective here.

@item outer pairs
This designates the people that are not in the @code{center 4}.
In a parallelogram, it designates the pairs of people in the outer triple
boxes (the ``wings'').  In offset lines or columns, it designates
the the pairs of people in the outer triple lines or columns.

@item center diamond
This is intended for use in a setup with a wave between, and
perpendicular to, two miniwaves.  (This is the setup that results
from a @code{1/2 circulate} from waves.)  In this setup, @code{centers}
means the center @emph{wave}.  If you want the center diamond instead, you
must say so.

@item center 1x4
This is intended for use in things like 3x1 diamonds.  (This is the setup
that results from a @code{1/2 acey deucey} from waves.)  In this setup,
@code{centers} means the center @emph{diamond}.  If you want the center wave
instead, you must say @code{center 1x4}.  The program uses the designator
@code{center 1x4} as a catch-all for the center line or the center column.
When reading the card, you probably ought to be more specific.

@item center 1x6
This is similar, but refers to a line or column of 6.  It is intended
for use in things like 3x1 diamonds, when you want the center wave of 6
to do, for example, a @code{grand swing thru}.  The program will not
accept @code{centers} or @code{center 6} for this, since those terms are not
well-defined in this situation.
@end table

@subsection So-And-So

The concepts are:

@example
   @code{<so-and-so> <call>}
         or
   @code{<so-and-so> <call> while the others <other call>}
@end example

If the designated people are centers or ends, the program will do
the call(s) according to its best judgement of what the calls mean.
Otherwise, it will find the maximal connected undistorted subsets, and
do the call in those subsets.  For example, from boy-boy-girl-girl waves,
the boys are in two miniwaves that have nothing to do with
each other.  The boys can do 2-person calls, such as trade or hinge,
in those setups.  If the others are told to do a second call, they do it
in their connected undistorted subsets.  For example, we could say
@code{boys, hinge while the others shazam}.  The results will be
reassembled as a 2x4, a C1-phantom setup, stars, or something similar.

From boy-girl-boy-girl waves, the boys are in 4 1-person connected undistorted
setups.  Using this concept, the boys can quarter right, but they can't trade
or hinge.

Now it is commonly accepted practice to say @samp{boys trade} when the boys are
looking out, and have them effectively trade the wave.  This is because
the call @samp{trade} is a special case, not because calls in general can be
done from that setup.  To see this, consider the call @code{roll away}.
It, and two-person calls in general, are @emph{not} legal unless the people are
adjacent.  The special property of the call @code{trade}, that it can be done
by designated people who are not adjacent, is simply an idiosyncrasy that
everyone knows.
The Sd program recognizes this by having a call in its database
@code{<anyone> trade} as well as the call @code{trade}.  Use that call, not
the @code{<anyone>} concept, to get the appropriate people to trade
down the line when in waves.

If you really want non-adjacent people to @code{roll away}, use the
@code{disconnected} concept.

Incidentally, this is why concepts are capitalized.  Otherwise, the line
@code{boys trade} appearing on a printed sequence would be ambiguous.
The Sd program is designed to make it possible to determine unambiguously, by looking at
the printout, how an action arose.

@subsection So-And-So Disconnected

The concepts are:

@example
   @code{<so-and-so> disconnected <call>}
         or
   @code{<so-and-so> disconnected <call> while the others <other call>}
@end example

This is like @code{<so-and-so>}, but finds the maximal undistorted subsets,
whether they are connected or not.  This is a recognized C2 concept.  It is
generally intended to be used from grand (1x8) setups, in which the designated
people leave the room and compress themselves into a 1x4 setup.  After doing
the call they come back and place themselves in the same four spaces that
they had vacated.  A few shape-changing calls are permitted.  In this case,
whichever set of people occupied the center spots prior to the call will
occupy the center of the result, in accordance with accepted usage for
this concept.

@subsection So-And-So in your Distorted Setup

The concepts are:

@example
   @code{<so-and-so> in your distorted line <call>}
         or
   @code{<so-and-so> in your distorted wave <call>}
         or
   @code{<so-and-so> in your distorted column <call>}
         or
   @code{<so-and-so> in your distorted diamond <call>}
         or
   @code{<so-and-so> in your distorted box <call>}
@end example

The designated people are identified in a geometrically distorted setup.
If the result of the call has a different shape and orientation from the
beginning setup, those dancers may nevertheless be able to go back to the
same collective spots, or may be able to maintain the same general location
in the total formation.

Be aware that the program requires you to use the most specific concept
in each case.  The @code{distorted} concept requires that the setup be
geometrically distorted in shape, not just disconnected.  Do not say
@code{distorted} when @code{disconnected} will do, and do not say
@code{disconnected} when just telling the people to do the call will do.

This concept has been set at C2.  You can use it at lower levels if
you issue the @code{toggle concept levels} command.

@subsection So-And-So Do Your Part

The concepts are:

@example
   @code{<so-and-so> do your part <call>}
         or
   @code{<so-and-so> do your part <call> while the others <other call>}
@end example

This means that the non-designated dancers leave the room and re-form their own
setup in another room.  The setups are not shrink-wrapped---they stay
the same size in each room, with phantoms where the other people are.
The appropriate call is done in each room.  The non-designees come back,
and the two setups are merged.  This merging operation is similar to that
used for @code{<so-and-so>}.  It may result in things like C1-phantom
setups.  From boy-boy-girl-girl waves, @code{boys do your part, hinge}
will leave C1 phantom setups, just as @code{boys, hinge} will.
In fact, the difference
between these concepts is rather subtle in many cases.  The important point
is that, in each room, the dancers work in the entire setup.  For example,
from facing lines, if the centers do their part of @code{right and left thru},
they work on their own side, with the nonexistent ends, rather than working
in the center.

From boy-girl-boy-girl waves, @code{boys do your part, hinge} creates a mess.
No sensible dancer would consider it acceptable.  Do not use such things.

The second form of this concept will be printed in the final transcript
as @code{do your part, <so-and-so> <call> while the others <other call>}.
You must still enter it as shown above, with the designator first and
the phrase @samp{do your part} second.

@subsection Ignore the So-And-So

The concept is:

@example
   @code{ignore the <so-and-so>, <call>}
@end example

This means that the designated people do nothing, while the others do
the call in the disconnected setup around them.  From the standpoint
of the non-designated people, the spots occupied by the designated
people do not exist.

This concept has been set at C1.  You can use it at lower levels if
you issue the @code{toggle concept levels} command.

@subsection Own the So-And-So

The concept is:

@example
   @code{own the <so-and-so>, <call> by <other call>}
@end example

This is similar to the @code{<so-and-so> do your part} concept, except that the
result setups are reassembled according to strict matrix positions.  That
is, instead of a C1 phantom setup, a 4x4 matrix may result.
This is a recognized C3A concept.

@node 12 Matrix and 16 Matrix, , Designating Certain People, Concept Notes
@section 12 Matrix and 16 Matrix

This discussion will be in terms of 12 matrices.  16 matrices are analogous.

Definition: a @dfn{large setup} is a setup of more than 8 people.
A @dfn{large call} is a call executed in such a setup.  There are very few
large calls that don't have some kind of modifier like @samp{12 MATRIX}
or @samp{3x3} in their name.

General principle:  when in a large setup, so that phantoms are present,
you must say something to acknowledge the existence of the phantoms, that
is, to say that the phantoms' spots count.  This is necessary whether doing
a large call, or splitting the large setup into smaller ones for doing small
calls.  So, for example, if you are in a parallelogram, you can't just say
the name of a large call.  You must say @samp{12 MATRIX} or @samp{2X6 MATRIX}.

The explicit matrix concepts @samp{MxN MATRIX}, e.g., @samp{2X6 MATRIX}, legitimize
the large setup, saying where the phantoms are, and making it possible to
call large calls, or, if the call has no large version, to split the setup
and do multiple instances of smaller versions.

Explicit matrix concepts can also be used to dictate the precise formation
with phantoms when using tandem or as-couples concepts.  For example, from
two-faced lines, @samp{2X8 MATRIX AS COUPLES} leads to virtual 2x4 lines (in
which the ends are all phantoms), @samp{4X4 MATRIX AS COUPLES} leads to virtual
2x4 columns (this happens to be the same as @samp{PHANTOM AS COUPLES} in this
setup), and @samp{4X4 MATRIX BOXES WORK SOLID} leads to a virtual 2x2.
@samp{2X8 MATRIX BOXES WORK SOLID} leads to a virtual 1x4.  From twin diamonds
in which each diamond has all 4 people facing the same way,
@samp{16 MATRIX OF PARALLEL DIAMONDS DIAMONDSOME} leads to a virtual 1x4
in which both ends are phantoms.  @samp{DIAMONDSOME} leads to a virtual 1x2.

The call size modifiers @samp{12 MATRIX} or @samp{16 MATRIX} legitimize the large setup
(though they don't always state unambiguously where the phantoms are, which
can lead to difficulty) and also select a large version of a call.  When
this modifier is used, only large versions of the call may be
performed---the setup will not be split for small versions.

When we say that @samp{12 MATRIX} is a call size modifier, we mean that, for
example, @samp{12 MATRIX relay the top} is a call.  @samp{3X4 MATRIX relay the top}
is not a call.  It is a statement that the setup is a legitimate 3x4,
and a request to do the call @samp{relay the top} in it, which is illegal.
There are some calls, like circulate, that can be done either with
explicit matrix concepts or with call size modifiers.

In a great many instances explicit matrix concepts like @samp{2X6 MATRIX} or
@samp{3X4 MATRIX} can be used interchangeably with the call size modifier
@samp{12 MATRIX}.  For example, @samp{2X6 MATRIX in roll circulate} and
@samp{12 MATRIX in roll circulate} are equivalent in 2x6 lines.
@samp{3X4 MATRIX circulate}
and @samp{12 MATRIX circulate} are equivalent in triple lines.  It should
never be necessary to give both an explicit matrix concept and a call
size modifier.

The explicit matrix concepts and call size modifiers all have the additional
property that they can expand a smaller setup as required, so, for example,
@samp{12 MATRIX circulate} is legal in normal columns.
(Special case: in a 2x4
setup, the @samp{16 MATRIX} call modifier doesn't know whether to expand to a
4x4 or a 2x8, so you may need to use @samp{4X4 MATRIX} or @samp{2X8 MATRIX} explicitly.
In other cases, the expansion is clear.)


For example, from triple waves,
@code{12 MATRIX circulate}
and
@code{3X4 MATRIX circulate}
are both legal and equivalent.

From parallelogram waves,
@code{12 MATRIX circulate}
and
@code{2X6 MATRIX circulate}
are both legal and equivalent, as are
@code{12 MATRIX in roll circulate}
and
@code{2X6 MATRIX in roll circulate}.

@subsection Small Calls (defined for 8 or fewer people)

If a call is defined for a setup of 8 or fewer people, and the setup is larger
than 8 people, so you want the setup divided, you must give an explicit matrix
concept such as @samp{2X6 MATRIX}.  This defines the formation, and tells people
to divide the 12-person formation into the smaller formations required to do
the call.  Do not say @samp{12 MATRIX}.  That designates a 12-person call, which
this is not.

So, from parallelogram columns,
@code{2X6 MATRIX double play}
is legal, while
@code{12 MATRIX double play}
and
@code{double play}
are not.  You may also say
@code{12 MATRIX DIVIDED COLUMNS double play}.
(The 12 MATRIX DIVIDED COLUMNS concept forms two 6-person setups.)

The above examples will work from 2x4 columns also---it expands
the matrix by placing phantoms outside.

From triple waves, you may also say
@code{3X4 MATRIX double play}
or
@code{12 MATRIX SPLIT PHANTOM COLUMNS double play}
but not
@code{12 MATRIX double play}.

You may substitute calls like @samp{3x3 peel off} for @samp{double play} in the
above.  Note that the @samp{MxN} concept identifies a variant of the call.
It does not cause the matrix to be expanded or recognized.

@subsection Large Calls (defined for more than 8 people)

Most large calls are versions of calls that are normally done from small
setups.  That large version must be identified with some modifier such as
@samp{12 MATRIX}, or @samp{MxN}.  Furthermore, you must legitimize the phantoms by
giving an appropriate modifier.  An explicit matrix concept such as
@samp{2X6 MATRIX} will do, as will a call size modifier such as @samp{12 MATRIX}.

From parallelogram columns, you may say
@code{12 MATRIX circulate}
or
@code{2X6 MATRIX circulate}
or
@code{12 MATRIX 3X3 transfer the column}
or
@code{2X6 MATRIX 3X3 transfer the column}
but not
@code{3X3 transfer the column}.

The above examples will work from 2x4 columns also---it expands
the matrix by placing phantoms outside.

@node Misc Advice, Customization, Concept Notes, Top
@chapter Miscellaneous Advice and Warnings

If a call that you believe is legal does not appear on the menu,
click on @code{allow modifications}.  This will bring up the universal call
menu.  You can then thrash out which of you or the computer is correct.

The program sometimes prints non-fatal @i{warnings} about calls.
These are intended
principally as advice to you, the user of the program, that the call
you have just entered may not be a reasonable thing to call.  It is not
necessarily the case that reading the warning aloud when calling the
sequence is the correct thing to do, though it might be.  The call
might simply be inappropriate, or it might be wise to say something along
the lines of ``be careful; everyone do your part.''
The significance of a warning may also depend on the level.  Some things
that are extremely peculiar but barely legal at high challenge levels are
simply not done at lower levels.  You should use your judgement.  

Warning:  The database is not without errors or misunderstandings in
nonstandard uses of calls.  The program generally tries to be extremely
conservative.  However,
you should not blindly accept what the program does, particularly if
a call was used in an unusual way.  The management will not be
responsible for any sequences left unattended.

Warning:  Some combinations of things that seem obvious
to the program might not be agreed to by the dancers.  Particularly
at high challenge levels, some things are controversial.  Proceed with
caution.  Unless you agree wholeheartedly with what the program did, and
believe that the dancers will also agree, it may be best not to do it.
Don't stack outrageous interrupts and replacements, with concepts going
every which way, unless you are prepared to explain yourself at the end
of the tip.

Warning:  The program's notion of levels is only keyed to concepts and
calls, not to concept/call combinations, and not to calls in the context
of certain setups.  For example, since @i{split} and @i{square thru} are
both Mainstream, it thinks that @i{split square thru} is Mainstream, even
though it is A1.  Also, @i{chain reaction} should only be used from the
simple @samp{heads pass the ocean} setup at A1, but the program doesn't
know this.

For debugging, there is a hidden level called @code{all}, which is above
C4.  At this level, even the invisible calls that are used in the
definitions of other calls are legal.  They typically begin with an
underscore.  Also, when the @code{all} level is selected, all
sequentially-defined calls are fractionalizable, even if they aren't in
practice.

The font for the text output window must be fixed-width so the
formation pictures are legible.  If you do not get this by default,
set this X resource:

@example
Sd*text*font: -misc-fixed-medium-r-normal--13-*-*-*-c-70-iso8859-1
@end example

@node Customization, Versions, Misc Advice, Top
@chapter Customization with X Resources

The file @file{Sd.res} is a sample X user resource file for the program.  It
contains values for a number of parameters, including most of the
text on the screen which is not fetched from the calls database.
Install @file{Sd.res} as @file{$HOME/Sd} to use these resources.

People who have many user resource files for different applications
may wish to store them in a directory other than their home directory.
To do so, set the environment variable @code{XAPPLRESDIR} to the directory
where your resource files are.  For example, one of the authors uses
the subdirectory @file{app-resources}, and his .cshrc contains this line:

@example
setenv XAPPLRESDIR ~/app-resources
@end example

To use a different value for any of these parameters, either edit the
resource file or load the changed value into your X server's resource
database.  To modify the server resource database, put a modified
version of the appropriate line in the @file{.Xresources} file in your home
directory (assuming you run @code{xrdb .Xresources} from @file{.xsession} or
whatever your X startup file is called).  You will have to re-run @code{xrdb}
after editing your @file{.Xresources} file.
You should add @samp{Sd} to the front
of any lines you move to your @file{.Xresources} file.

All values in the distributed @file{Sd.res} file except the colors are the
defaults and are in the file for illustration only.  You can remove
them if you wish your installed user resource file to contain only the
resources you change.

To have mouse button 3 invoke the Undo operation, as one of the
authors does, set these resources:

@example
Sd*frame*Label*Translations: #override <Btn3Down>: undo()
Sd*frame*List*Translations: #override <Btn3Down>: undo()
@end example

@ifset copyleft
@node Versions, Copying, Customization, Top
@end ifset
@ifclear copyleft
@node Versions, , Customization, Top
@end ifclear
@chapter Versions

The version is a string consisting of parts separated by colons.

If you customize any part of Sd for your own use, or fix bugs, you should
assign the result a new version by appending to the current version.
This will help in keeping track of bug reports.  The version string is
defined near the top of the file @file{sdmain.c}.  For example, you might
set it to @code{25.6.joe1} for your private version.

The calls database also has a version.
If you modify the database, you should
change the version string at the top of the file.

@ifset copyleft
@node Copying, , Versions, Top
@include gpl.txinfo
@end ifset

@page
@ifclear html
@iftex
@c make an even number of pages so the TOC comes out
@c correctly with two-sided printing.
@ifodd@pageno@else
@ @page
@fi
@end iftex

@contents
@iftex
@c make an even number of pages of TOC
@ifodd@pageno@else
@page
@ @c
@fi
@end iftex
@end ifclear

@bye

@c Local Variables:
@c time-stamp-start: "Time-stamp: "
@c time-stamp-end: "$"
@c time-stamp-format: "%b %d, %y"
@c End:
